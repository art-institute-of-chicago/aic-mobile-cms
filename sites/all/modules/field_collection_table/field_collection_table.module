<?php

/**
 * @file
 * Module implementing a field-collection table formatter.
 */

/**
 * Implements hook_field_formatter_info().
 */
function field_collection_table_field_formatter_info() {
  return array('field_collection_table_view' => array(
      'label' => t('Table of field collection items'),
      'field types' => array('field_collection'),
      'settings' => array(
        'edit' => t('Edit'),
        'delete' => t('Delete'),
        'add' => t('Add'),
        'description' => TRUE,
        'view_mode' => 'full',
        'empty' => TRUE,
        'cssrowcol' => FALSE,
        'cssfield' => FALSE,
      ),
    ), );
}

/**
 * Implements hook_field_formatter_view().
 */
function field_collection_table_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $view_mode = !empty($display['settings']['view_mode']) ? $display['settings']['view_mode'] : 'default';

  switch ($display['type']) {
    case 'field_collection_table_view' :
      $header = array();
      $field_names = array();
      foreach (field_info_instances('field_collection_item', $field['field_name']) as $field_collection_item) {
        $item_view_mode = !empty($field_collection_item['display'][$view_mode]) ? $view_mode : 'default';
        if ($field_collection_item['display'][$item_view_mode]['type'] != 'hidden') {
          $weight = $field_collection_item['display'][$item_view_mode]['weight'];
          $field_names[$weight] = $field_collection_item['field_name'];

          if ($field_collection_item['display'][$item_view_mode]['label'] != 'hidden') {
            $header[$weight] = array(
              'data' => (
                module_exists('i18n_field'))
                ? i18n_field_translate_property($field_collection_item, 'label')
                : $field_collection_item['label'],
              'class' => $field_names[$weight],
            );
          }
          else {
            $header[$weight] = '';
          }
        }
      }
      ksort($header);
      ksort($field_names);

      $rows = array();
      foreach ($items as $delta => $item) {
        $field_collection = field_collection_field_get_entity($item);
        if (empty($field_collection)) {
          continue;
        }
        $view = $field_collection->view($view_mode);
        $content = $view['field_collection_item'][$field_collection->identifier()];
        $column = array();
        foreach ($field_names as $field_name) {
          if (isset($content[$field_name])) {
            $content[$field_name]['#label_display'] = 'hidden';
          }
          else {
            $content[$field_name] = array(
              '#markup' => '<span class="empty_field"></span>',
              '#empty' => TRUE,
            );
          }
          $column[] = array(
            'data' => $content[$field_name],
            'class' => $field_name,
          );
        }

        $links = array(
          '#theme' => 'links',
          '#theme_wrapper' => 'item_list',
          '#attributes' => array('class' => array('field-collection-view-links', ), ),
        );

        foreach (array('edit', 'delete') as $op) {
          if (!empty($settings[$op]) && field_collection_item_access($op == 'edit' ? 'update' : $op, $field_collection)) {
            $links['#links'][$op] = array(
              'title' => t($settings[$op]),
              'href' => $field_collection->path() . '/' . $op,
              'query' => drupal_get_destination(),
            );
            $header['operations'] = t('Operations');
          }
        }

        if (!empty($links['#links'])) {
          $column[] = array(
            'data' => $links,
            'class' => "field_collection_item_operations",
          );
        }

        $rows[] = array(
          'data' => $column,
          'class' => array('field_collection_item'),
        );
      }

      // remove header if all labels are hidden
      if (!array_filter($header)) {
        $header = array();
      }

      $element[0] = array(
        '#theme' => 'table',
        '#header' => $header,
        '#rows' => $rows,
      );

      if (!empty($settings['empty'])) {
        $element[0]['#theme'] = 'table__field_collection_table';
        $element[0]['#settings']['empty'] = TRUE;
      }
      if (!empty($settings['cssrowcol'])) {
        $element[0]['settings']['cssrowcol'] = TRUE;
      }
      if (!empty($settings['cssfield'])) {
        $element[0]['settings']['cssfield'] = TRUE;
      }
      break;
  }

  field_collection_field_formatter_links($element, $entity_type, $entity, $field, $instance, $langcode, $items, $display);

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_collection_table_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = field_collection_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);

  if ($display['type'] == 'field_collection_table_view') {
    $element['empty'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide empty columns'),
      '#description' => t('If checked, hide empty Field Collection table columns.'),
      '#default_value' => $settings['empty'],
    );

    /*
     * add css row and column selectors to table cells
     * MN
     */
    $element['cssrowcol'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add css class selector for rows and columns'),
      '#description' => t('If checked, it will add to each table cell the following selectors: row-x cell-y, where x is the row number and y is the column number'),
      '#default_value' => $settings['cssrowcol'],
    );
    /*
     * add css field selectors to table cells
     * MN
     */
    $element['cssfield'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add css class selector by field'),
      '#description' => t('If checked, it will add to each table cell a class selectorsbased on the field name'),
      '#default_value' => $settings['cssfield'],
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_collection_table_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $output = field_collection_field_formatter_settings_summary($field, $instance, $view_mode);
  if ($display['type'] == 'field_collection_table_view') {
    $output .= '<br>';
    $output .= !empty($settings['empty']) ? t('Empty columns: Hidden') : t('Empty columns: Shown');
    /*
     * show if css rows and columns selectors to table cells
     * MN
     */
    $output .= '<br>';
    $output .= (!empty($settings['cssrowcol']) ? t('Add') : t('No')) . ' ' .t('css class selectors for rows and columns');
    /*
     * show if css field selectors to table cells
     * MN
     */
    $output .= '<br>';
    $output .= (!empty($settings['cssfield']) ? t('Add') : t('No')) . ' ' .t('css class field selectors');
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function field_collection_table_theme($existing, $type, $theme, $path) {
  $base = array(
    'file' => 'theme.inc',
    'path' => $path . '/theme',
  );
  return array(
    'field_collection_table_multiple_value_field' => $base + array('render element' => 'element', ),
    'field_collection_table_multiple_value_fields' => $base + array('render element' => 'element', ),
    'table__field_collection_table' => $base + array('variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'attributes' => array(),
        'caption' => NULL,
        'colgroups' => array(),
        'sticky' => TRUE,
        'empty' => '',
        'settings' => array(),
      ), ),
  );
}

/**
 * Implements hook_field_attach_form().
 */
function field_collection_table_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  // Host entity edit.
  foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
    if (isset($form[$field_name]) && $instance['widget']['type'] == 'field_collection_table') {
      $language = $form[$field_name]['#language'];
      $form[$field_name][$language]['#theme'] = 'field_collection_table_multiple_value_fields';
      $form[$field_name][$language]['#custom_settings'] = $instance['widget']['settings'];
      $form[$field_name][$language]['#pre_render'][] = 'field_collection_table_pre_render_multiple_fields';
    }
    $field = field_info_field($field_name);
    if ($field['type'] == 'field_collection'
      && $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED
      && empty($form_state['programmed'])
      && field_access('edit', $field, $entity_type)
      && $instance['widget']['type'] == 'field_collection_table') {

      $element_langcode = $form[$field_name]['#language'];
      $element_wrapper = $form[$field_name][$element_langcode]['add_more']['#ajax']['wrapper'];
      for ($i = 0; $i <= $form[$field_name][$element_langcode]['#max_delta']; $i++) {
        if (isset($form[$field_name][$element_langcode][$i]['remove_button'])) {
          $form[$field_name][$element_langcode][$i]['remove_button']['#ajax']['wrapper'] = $element_wrapper;
        }
      }
    }
  }

  // Individual field collection item edit.
  //
  if ($entity_type == 'field_collection_item') {
    $instance = $entity->instanceInfo();
    if ($instance['widget']['type'] == 'field_collection_table') {
      $form['#theme'] = 'field_collection_table_multiple_value_field';
      $form['#pre_render'][] = 'field_collection_table_pre_render_field';
    }
  }
}

/**
 * Callback for #pre_render for a single row, hide the titles for each field.
 */
function field_collection_table_pre_render_field($element) {
  if (isset($element['#entity_type']) && isset($element['#bundle'])) {
    foreach (field_info_instances($element['#entity_type'], $element['#bundle']) as $field_name => $instance) {
      if (empty($element[$field_name])) {
        continue;
      }

      $field = &$element[$field_name];
      $field_info = field_info_field($field_name);
      $language = $field['#language'];
      if (isset($field[$language])) {
        // Set the most common places for a title to display invisible.
        $field['#title_display'] = 'invisible';
        $field[$language]['#title_display'] = 'invisible';
        foreach (element_children($field[$language]) as $child) {
          if (array_key_exists('#type', $field[$language][$child]) && !in_array($field[$language][$child]['#type'], array(
            'radio',
            'checkbox'
          ))) {
            $field[$language][$child]['#title_display'] = 'invisible';
          }
          // Check the individual columns. Most commonly 'value'.
          foreach ($field_info['columns'] as $column => $column_info) {
            // Ensure column exist in form to prevent displaying empty
            // table columns.
            if (isset($field[$language][$child][$column])) {
              $field[$language][$child][$column]['#title_display'] = 'invisible';
            }
            // The date module sometimes adds its own random titles inside value.
            if (in_array($field_info['type'], array(
              'date',
              'datestamp',
              'datetime'
            ))) {
              foreach (element_children($field[$language][$child][$column]) as $date_child) {
                $field[$language][$child][$column][$date_child]['#title_display'] = 'invisible';
              }
            }
          }
        }
      }
      else {
        $field['#label_display'] = 'hidden';
      }
    }
  }
  return $element;
}

/**
 * Callback for #pre_render for multiple rows, hide the titles for each field.
 */
function field_collection_table_pre_render_multiple_fields($element) {
  foreach (element_children($element) as $key) {
    // Skip the 'add_more' element.
    if (is_numeric($key)) {
      $element[$key] = field_collection_table_pre_render_field($element[$key]);
      /*
       * MN
       * we transfer the field instance structure from the field children to the main field
       * we needed it in the main field collection, so we can insert raw, column and field css class
       * if requested in the settings
       * while we go through the element's children, we remove such structure from them
       * just to save space
       */
      if (isset($element[$key]) && isset($element[$key]['#instance'])) {
        // transfer instance if we have not already done
        if ( !isset($element['#instance']) ) {
          $element['#instance'] = $element[$key]['#instance'];
        }
        // remove the key from the array and save space
        unset($element[$key]['#instance']);
      }
    }
  }
  return $element;
}

/**
 * Implements hook_entity_view().
 */
function field_collection_table_entity_view($entity, $type, $view_mode, $langcode) {
  if (get_class($entity) != 'FieldCollectionItemEntity') {
    return;
  }

  $display = field_get_display($entity->instanceInfo(), $view_mode, $entity->hostEntity());
  if ($display['type'] == 'field_collection_table_view') {
    $entity->content['#theme'] = 'field_collection_table_multiple_value_field';
    $entity->content['#pre_render'][] = 'field_collection_table_pre_render_field';
  }
}

/**
 * Implements hook_field_widget_info().
 */
function field_collection_table_field_widget_info() {
  return array('field_collection_table' => array(
      'label' => t('Table'),
      'field types' => array('field_collection'),
      'settings' => array('nodragging' => FALSE, ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ), );
}

/**
 * Implements hook_field_widget_form().
 */
function field_collection_table_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'field_collection_table' :
      $instance['widget']['type'] = 'field_collection_embed';
      $element = field_collection_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      /*
       * MN
       * add to element structure the field instance where are stored the field settings for adding row and column and field name css classes
       */
      if ( $element ) {
        $element['#instance'] = $instance;
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function field_collection_table_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'field_collection_table') {
    $form['nodragging'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable drag and drop'),
      '#description' => t('If checked, users cannot rearrange the rows.'),
      '#default_value' => $settings['nodragging'],
    );
  }

  return $form;
}
