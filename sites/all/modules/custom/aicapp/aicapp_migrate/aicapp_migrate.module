<?php

/**
 * Implements  hook_menu().
 */
function aicapp_migrate_menu() {
  $items['admin/config/system/aic/migrations'] = array(
    'title' => 'Content Migration',
    'description' => 'Tools to migrate content types and from v1 format to v2 format.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aicapp_migrate_admin_migrate'),
    'access callback' => 'user_access',
    'access arguments' => array('administer aic api settings'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_query_TAG_alter()
 */
function aicapp_migrate_query_tour_stops_missing_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_tour_stops', 'o', 'node.nid = o.entity_id');
  $query->isNull('o.field_tour_stops_value');
}

/**
 * Implements hook_query_TAG_alter()
 */
function aicapp_migrate_query_object_audio_missing_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_audio_commentary', 'o', 'node.nid = o.entity_id');
  $query->isNull('o.field_audio_commentary_value');
}

/**
 * Form callback.
 */
function aicapp_migrate_admin_migrate($form, &$form_state) {
  $all_migrations_complete = variable_get('aicapp_migrate_v1_v2', FALSE);
  // Data migration between v1 and v2.
  if (variable_get('aicapp_migrate_v1_v2_language', FALSE) && variable_get('aicapp_migrate_v1_v2_fields', FALSE)) {
    $all_migrations_complete = TRUE;
    $overview = t('All migrations complete');
  }
  global $language;
  $form['aicapp_data'] = array(
    '#type' => 'fieldset',
    '#collapsible' => $all_migrations_complete,
    '#collapsed' => $all_migrations_complete,
    '#title' => t('Content language and field migration'),
    '#tree' => TRUE,
  );
  if ($all_migrations_complete) {
    $form['aicapp_data']['migration_remove_existing'] = array(
      '#type' => 'checkbox',
      '#title' => t('Remove Version 2 Field Values'),
      '#default_value' => (variable_get('migration_remove_existing', 0)) ?: 0,
      '#description' => t('Whether or not to remove all existing field_tour_stops & field_audio_commentary items.'),
    );
    $form['aicapp_data']['migration_repeat'] = array(
      '#prefix' => t('All data has been migrated.'),
      '#type' => 'submit',
      '#value' => t('Repeat Migration'),
    );
  }
  else {
    $counts = $types = array(
      AICAPP_TYPE_AUDIO => t('Audio'),
      AICAPP_TYPE_TOUR => t('Tours'),
    );
    // Set default audio and tour counts.
    $counts[AICAPP_TYPE_TOUR] = 0;
    $counts[AICAPP_TYPE_AUDIO] = 0;
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array_keys($types), 'IN')
      ->propertyCondition('language', LANGUAGE_NONE, '=');
    $result = $query->execute();
    $form['aicapp_data']['migration_language_prefix']['#markup'] = '<p><strong>' . t('Content Language Migration') . '</strong></p>';
    if (empty($result['node'])) {
      variable_set('aicapp_migrate_v1_v2_language', TRUE);
      $form['aicapp_data']['migration_language_complete'] = array(
        '#markup' => t('All content items have been updated to %lang.', array('%lang' => strtoupper($language->language))),
      );
    }
    else {
      foreach ($result['node'] as $item) {
        $type = $item->type;
        if (isset($types[$type]) && !isset($to_convert[$type])) {
          $to_convert[$type] = $types[$type];
        }
      }
      $convert_types = '<p>' . t('The following types will be converted to @lang', array('@lang' => $language->name . ' (' . $language->language . ')')) . '</p><ul>';
      foreach ($to_convert as $bundle => $type) {
        $convert_types .= '<li>' . $type . '</li>';
      }
      $form['aicapp_data']['migration_language_types'] = array(
        '#type' => 'hidden',
        '#value' => array_keys($to_convert),
      );
      $form['aicapp_data']['migration_language_type_info'] = array(
        '#markup' => $convert_types . '</ul><br>',
      );
      $form['aicapp_data']['migration_language_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Update Content Language'),
      );
      // Add results here for use in submit callback.
      $form_state['build_info']['args'] = array(
        0 => $result,
      );
    }
    $form['aicapp_data']['migration_fields_prefix']['#markup'] = '<p><strong>' . t('Content Fields Migration') . '</strong></p>';
    $types = array(
      AICAPP_TYPE_OBJECT => t('Objects'),
      AICAPP_TYPE_TOUR => t('Tours'),
    );
    // Set object and reset tour counts;
    $counts[AICAPP_TYPE_OBJECT] = 0;
    $counts[AICAPP_TYPE_TOUR] = 0;
    foreach ($types as $type => $label) {
      $query = new EntityFieldQuery();
      $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $type, '=');
      if ($type === AICAPP_TYPE_OBJECT) {
        $query->addTag('object_audio_missing');
      }
      elseif ($type === AICAPP_TYPE_TOUR) {
        $query->addTag('tour_stops_missing');
      }
      $result = $query->execute();
      if (!empty($result['node'])) {
        // Validate that all the results can be migrated.
        $i = 0;
        foreach ($result['node'] as $nid => $obj) {
          if (empty($obj->type) || $obj->type !== $type) {
            continue;
          }
          $i++;
          $callback = 'aicapp_migrate_validate_type_' . $type;
          $params = array($nid, &$counts, $i, &$to_add);
          $valid = call_user_func_array($callback, $params);
          if (empty($valid)) {
            unset($result['node'][$nid]);
          }
        }
        // Add results here for use in submit callback.
        $form_state['build_info']['args'][$type] = $result;
        $counts[$type] = count($result['node']);
      }
    }
    if (empty($counts[AICAPP_TYPE_OBJECT]) && empty($counts[AICAPP_TYPE_TOUR])) {
      variable_set('aicapp_migrate_v1_v2_fields', TRUE);
      $form['aicapp_data']['migration_fields_complete'] = array(
        '#markup' => '<p>' . t('All content items fields have been updated.') . '</p>',
      );
    }
    else {
      if ($counts[AICAPP_TYPE_OBJECT] > 0) {
        $default = AICAPP_TYPE_OBJECT;
      }
      elseif ($counts[AICAPP_TYPE_TOUR] > 0) {
        $default = AICAPP_TYPE_TOUR;
      }
      if ($counts[AICAPP_TYPE_TOUR] === 0) {
        unset($types[AICAPP_TYPE_TOUR]);
      }
      if ($counts[AICAPP_TYPE_OBJECT] === 0) {
        unset($types[AICAPP_TYPE_OBJECT]);
      }
      // Only allow tour after all objects have been updated.
      $form['aicapp_data']['migration_fields_types'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Select content type(s) with fields to updated:'),
        '#options' => $types,
        '#default_value' => array($default),
        '#description' => t('Every node of the chosen type(s) fields will be updated. Before updating tours, make sure that all objects have been updated.'),
      );
      // Disable the tour type if objects remain
      if ($counts[AICAPP_TYPE_OBJECT] > 0) {
        $form['aicapp_data']['migration_fields_types'][AICAPP_TYPE_TOUR]['#disabled'] = TRUE;
        $count = $counts[AICAPP_TYPE_OBJECT];
      }
      else {
        $count = $counts[AICAPP_TYPE_TOUR];
        $form['aicapp_data']['migration_add_associations'] = array(
          '#type' => 'checkbox',
          '#title' => t('Add Missing Audio Commentary to Objects'),
          '#default_value' => (variable_get('migration_add_associations', 1)) ?: 0,
          '#description' => t('When migrating tour stops, if a tour stop audio item is not already associated with the object for that stop, create the association.'),
        );
      }
      $form['aicapp_data']['migration_fields_batch'] = array(
        '#type' => 'numberfield',
        '#size' => 10,
        '#length' => 10,
        '#default_value' => $count,
        '#attributes' => array(
          'max' => max($counts[AICAPP_TYPE_OBJECT], $counts[AICAPP_TYPE_TOUR]),
        ),
        '#title' => t('Number of content items to update per batch.'),
      );
      $form['aicapp_data']['migration_fields_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Update Content Fields'),
      );
    }
  }
  return $form;
}

/**
 * Admin setting validation callback.
 */
function aicapp_migrate_admin_migrate_validate($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] === 'Update Content Language') {
    global $language;
    // What node type(s) are to be updated.
    $types = $form_state['values']['aicapp_data']['migration_language_types'];
    if (empty($form_state['build_info']['args']) || empty($types)) {
      drupal_set_message('There were no items to migrate');
      return;
    }
  }
}

/**
 * Admin setting validation callback.
 */
function aicapp_migrate_admin_migrate_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] === 'Repeat Migration') {
    variable_set('aicapp_migrate_v1_v2', FALSE);
    variable_set('aicapp_migrate_v1_v2_language', FALSE);
    variable_set('aicapp_migrate_v1_v2_fields', FALSE);
    if (empty($form_state['values']['aicapp_data']['migration_remove_existing'])) {
      return;
    }
    // Remove all tour stop that were migrated allow for migration to happen again.
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array(AICAPP_TYPE_TOUR, AICAPP_TYPE_OBJECT), 'IN');
    $result = $query->execute();
    if (empty($result['node'])) {
      return;
    }
    // Remove all values entered into the new field format.
    foreach ($result['node'] as $nid => $object) {
      $node = node_load($object->nid);
      if ($node->type === AICAPP_TYPE_OBJECT) {
        $field = 'field_audio_commentary';
        $node->skip_hooks_presave = TRUE;
      }
      elseif ($node->type === AICAPP_TYPE_TOUR) {
        $field = 'field_tour_stops';
      }
      if (empty($node->{$field}[LANGUAGE_NONE])) {
        continue;
      }
      $entity = entity_metadata_wrapper('node', $node);
      // Remove the tour stops.
      $field_collection_values = array();
      foreach ($node->{$field}[LANGUAGE_NONE] as $key => $value) {
        // Build array of field collection values.
        $field_collection_values[] = $value['value'];
        // Unset them.
        unset($node->{$field}[LANGUAGE_NONE][$key]);
      }
      // Delete field collection items.
      entity_delete_multiple('field_collection_item', $field_collection_values);
      $entity->save();
    }
  }
  elseif ($form_state['clicked_button']['#value'] === 'Update Content Language') {
    global $language;
    $result = array_shift($form_state['build_info']['args']);
    $types = $form_state['values']['aicapp_data']['migration_language_types'];
    foreach (array_filter($types) as $type) {
      if (empty($type) || empty($result['node'])) {
        continue;
      }
      foreach ($result['node'] as $nid => $obj) {
        if (empty($obj->type) || $obj->type !== $type) {
          continue;
        }
        $node = node_load($nid);
        $field_languages = field_language('node', $node);
        foreach ($field_languages as $field => $field_language) {
          if ($field_language !== LANGUAGE_NONE) {
            continue;
          }
          if ($field === 'title_field') {
            $node->title_sync_source_lang = $language->language;
            $node->{$field}[$language->language] = array(
              0 => array('value' => $node->title_original),
            );
            unset($node->{$field}[LANGUAGE_NONE]);
          }
          else {
            $items = field_get_items('node', $node, $field, $field_language);
            if (!empty($items)) {
              $node->{$field}[$language->language] = $items;
            }
          }
        }
        if (!empty($node->{$field}[LANGUAGE_NONE])) {
          unset($node->{$field}[LANGUAGE_NONE]);
        }
        $node->language = $language->language;
        node_save($node);
      }
      $message = t('All @type content items with no language have been set to English', array('@type' => $type));
      drupal_set_message($message);
    }
  }
  elseif ($form_state['clicked_button']['#value'] === 'Update Content Fields') {
    $counts = array();
    $batch_size = !empty($form_state['values']['aicapp_data']['migration_fields_batch']) ? $form_state['values']['aicapp_data']['migration_fields_batch'] : 50;
    $add_associations = !empty($form_state['values']['aicapp_data']['migration_add_associations']) ? $form_state['values']['aicapp_data']['migration_add_associations'] : 0;
    $types = $form_state['values']['aicapp_data']['migration_fields_types'];
    foreach (array_filter($types) as $type) {
      if (empty($type) || empty($form_state['build_info']['args']) || empty($form_state['build_info']['args'][$type])) {
        continue;
      }
      $result = $form_state['build_info']['args'][$type];
      $counts[$type] = $i = 0;
      $to_add = array();
      if ($batch_size !== 0 && is_numeric($batch_size)) {
        $total = count($result['node']);
        // Limit to the $batch_size amount.
        $chunks = array_chunk($result['node'], $batch_size, TRUE);
      }
      else {
        $total = count($result['node']);
        $chunks = array($result['node']);
      }
      $result['node'] = array_shift($chunks);
      foreach ($result['node'] as $nid => $obj) {
        if (empty($obj->type) || $obj->type !== $type) {
          continue;
        }
        $i++;
        $callback = 'aicapp_migrate_migrate_type_' . $type;
        $params = array(
          $nid,
          &$counts,
          $i,
          &$to_add,
          'update',
          $add_associations,
        );
        call_user_func_array($callback, $params);
      }
      $remaining = !empty($result['node']) ? count($result['node']) : 0;
      $type_message = array(
        '@type' => $type,
        '@size' => $counts[$type],
        '@remain' => max(($total - $counts[$type]), 0),
      );
      drupal_set_message(t(
        '@size @type items have been migrated to use the new field format. @remain @type item(s) remain to migrate.',
        $type_message
      ));
    }
  }
}

/**
 * Helper function to migrate tour fields.
 */
function aicapp_migrate_migrate_type_tour($nid, &$counts = array(), $i = 0, &$to_add = array(), $mode = 'update', $create_object_audio = FALSE) {
  if (empty($counts)) {
    $counts[AICAPP_TYPE_TOUR] = 0;
  }
  $node = node_load($nid);
  $node->_is_changed = FALSE;
  $entity_wrapper = entity_metadata_wrapper('node', $node);
  $found = array(
    'field_t_object' => NULL,
    'field_t_audio' => NULL,
    'field_t_audio_bumper' => NULL,
  );

  // Check for field_stops2 field collection items.
  if (!empty($node->field_stops2[LANGUAGE_NONE])) {
    $ids = array();
    foreach ($node->field_stops2[LANGUAGE_NONE] as $key => $value) {
      $ids[] = $value['value'];
    }
    $stops = field_collection_item_load_multiple($ids);
    $stops = current($stops);
    foreach ($found as $field => $n) {
      if (!isset($stops->{$field}[LANGUAGE_NONE])) {
        continue;
      }
      foreach ($stops->{$field}[LANGUAGE_NONE] as $id => $stop) {
        $found[$field][] = $stop['nid'];
      }
    }
  }
  // In terms of selector numbers, there are 3 cases.
  $count_object = count($found['field_t_object']);
  $count_audio = count($found['field_t_audio']);
  $count_bumper = count($found['field_t_audio_bumper']);
  // if ($count_object > $count_audio) {
  //
  // }
  // elseif ($count_object < $count_audio) {
  //
  // }
  // Check if there are currently audio commentary items.
  if (!empty($node->field_tour_stops[LANGUAGE_NONE])) {
    foreach ($node->field_tour_stops[LANGUAGE_NONE] as $key => $value) {
      $field_collection_item_values[] = $value['value'];
    }
  }
  // Add the new tour stop
  if (!empty($found['field_t_object'])) {
    if ($mode === 'validate') {
      return TRUE;
    }
    // Before adding anything new, make sure these values are not already on
    // the node.
    $current_items = array();
    if ($current = field_get_items('node', $node, 'field_tour_stops')) {
      foreach ($current as $item) {
        $current_items[] = field_collection_field_get_entity($item);
      }
    }
    foreach ($found['field_t_object'] as $k => $object_id) {
      // If this object id exists in the current items, do not add it again.
      foreach ($current_items as $current_item) {
        $object_item = !empty($current_item->field_tour_stop_object[LANGUAGE_NONE])
                  ? $current_item->field_tour_stop_object[LANGUAGE_NONE][0]['target_id'] : NULL;
        if ($object_item === $object_id) {
          // Object node matches current, move to next tour stop item.
          continue 2;
        }
      }
      $item_values = array(
        'field_tour_stop_object' => array(
          'value' => $object_id,
        ),
      );
      if (isset($found['field_t_audio'][$k])) {
        $audio_nid = $found['field_t_audio'][$k];
        $object_node = node_load($object_id);
        if (!is_object($object_node)) {
          // This object doesn't exist, continue to next stop object.
          $replacement = array(
            '@tour' => $node->nid,
            '@object' => $object_id,
          );
          drupal_set_message(t(
            'There was a problem migrating tour stops for tour node ID: @tour. A stop contains an object node ID: @object, that does not exist.',
            $replacement
          ));
          continue;
        }
        // Get all audio nids that are already associated with an object.
        $object_audio_nids = aicapp_migrate_get_object_audio_nids($object_node);
        $object_audio_found = array_key_exists($audio_nid, $object_audio_nids);
        // Check if the audio node was found in the object field_audio_commentary.
        if (!$object_audio_found && $create_object_audio) {
          $object_node->skip_hooks_presave = TRUE;
          $object_entity_wrapper = entity_metadata_wrapper('node', $object_node);
          // The audio node for this tour stop was not associated with the
          // object for this stop, so add it now.
          // Create the collection entity and set it's "host".
          $collection = entity_create('field_collection_item', array('field_name' => 'field_audio_commentary'));
          $collection->setHostEntity('node', $object_node);
          $collection_wrapper = entity_metadata_wrapper('field_collection_item', $collection);
          $collection_wrapper->field_audio_commentary_audio->set($audio_nid);
          $object_entity_wrapper->save();
          // Get the last item added.
          $all_items = $object_entity_wrapper->field_audio_commentary->value();
          $last = count($all_items) ? end($all_items) : NULL;
          if (isset($last->item_id)) {
            $item_values['field_tour_stop_audio_commentary'] = array(
              'value' => $last->item_id,
            );
          }
        }
        elseif ($object_audio_found) {
          // Audio NID was found as a key. The value of this key is the
          // field collection id, which is what we need to add to the $items_values.
          $item_values['field_tour_stop_audio_commentary'] = array(
            'value' => $object_audio_nids[$audio_nid],
          );
        }
      }
      if (isset($found['field_t_audio_bumper'][$k])) {
        $item_values['field_tour_stop_bumper'] = array(
          'value' => $found['field_t_audio_bumper'][$k],
        );
      }
      // Create the collection entity and set it's "host".
      $collection = entity_create('field_collection_item', array('field_name' => 'field_tour_stops'));
      $collection->setHostEntity('node', $node);
      $collection_wrapper = entity_metadata_wrapper('field_collection_item', $collection);
      foreach ($item_values as $key => $values) {
        $collection_wrapper->{$key}->set($values['value']);
      }
    }
    $node->_is_changed = TRUE;
  }
  if ($node->_is_changed) {
    unset($node->_is_changed);
    $entity_wrapper->save();
    $counts[AICAPP_TYPE_TOUR]++;
    return TRUE;
  }
}

/**
 * Helper function to get all the audio nids associated with an object
 * via field_audio_commentary.
 */
function aicapp_migrate_get_object_audio_nids($object_node) {
  $item_values = array();
  if ($object_node && $field_items = field_get_items('node', $object_node, 'field_audio_commentary')) {
    foreach ($field_items as $audio_commentary_item) {
      $field_collection_entity = field_collection_field_get_entity($audio_commentary_item);
      $audio_items = field_get_items('field_collection_item', $field_collection_entity, 'field_audio_commentary_audio');
      if (empty($audio_items) || empty($audio_items[0]['target_id'])) {
        continue;
      }
      $item_values[$audio_items[0]['target_id']] = $field_collection_entity->item_id;
    }
  }
  return $item_values;
}

/**
 * Helper function to migrate tour fields.
 */
function aicapp_migrate_validate_type_tour($nid, &$counts = array(), $i = 0, &$to_add = array()) {
  $validate = aicapp_migrate_migrate_type_tour($nid, $counts, $i, $to_add, 'validate');
  if ($validate) {
    return TRUE;
  }
}

/**
 * Helper function to migrate object fields.
 */
function aicapp_migrate_validate_type_object($nid, &$counts = array(), $i = 0, &$to_add = array()) {
  $validate = aicapp_migrate_migrate_type_object($nid, $counts, $i, $to_add, 'validate');
  if ($validate) {
    return TRUE;
  }
}

/**
 * Helper function to migrate object fields.
 */
function aicapp_migrate_migrate_type_object($nid, &$counts = array(), $i = 0, &$to_add = array(), $mode = 'update') {
  if (empty($counts)) {
    $counts[AICAPP_TYPE_OBJECT] = 0;
  }
  $node = node_load($nid);
  $node->_is_changed = FALSE;
  $node->skip_hooks_presave = TRUE;
  $entity_wrapper = entity_metadata_wrapper('node', $node);
  $found = array(
    'field_object_selector_numbers' => NULL,
    'field_object_selector_number' => NULL,
    'field_object_audio' => NULL,
  );
  // Check for field_object_selector_numbers, field_object_selector_number, and field_object_audio
  if (!empty($entity_wrapper->field_object_selector_numbers[LANGUAGE_NONE])) {
    $found['field_object_selector_numbers'] = $node->field_object_selector_numbers[LANGUAGE_NONE];
  }
  if (!empty($node->field_object_selector_number[LANGUAGE_NONE])) {
    $found['field_object_selector_number'] = $node->field_object_selector_number[LANGUAGE_NONE];
  }
  if (!empty($node->field_object_audio[LANGUAGE_NONE])) {
    // Uses 'nid' as value key instead of 'value'
    $found['field_object_audio'] = $node->field_object_audio[LANGUAGE_NONE];
  }
  $count_multi = count($found['field_object_selector_numbers']);
  $count_audio = count($found['field_object_audio']);
  // In terms of selector numbers, there are 3 cases.
  if ($count_multi === 1) {
    // One of each, make sure they are the same.
    if ($found['field_object_selector_number'] &&
      $found['field_object_selector_number'][0]['value'] === $found['field_object_selector_numbers'][0]['value']) {
      // Numbers match, there is 1 matching selector being used.
      $to_add[$i]['selector'][] = $found['field_object_selector_number'][0]['value'];
      if ($count_audio) {
        foreach ($found['field_object_audio'] as $k => $v) {
          $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
        }
      }
      else {
        // No audio found unset this selector to add.
        unset($to_add[$i]['selector']);
      }
    }
    else {
      // Number will take precendence.
      $to_add[$i]['selector'][] = $found['field_object_selector_number'][0]['value'];
      $to_add[$i]['selector'][] = $found['field_object_selector_numbers'][LANGUAGE_NONE][0]['value'];
      // Multi and single do not match. Check audio count.
      if ($count_audio > 1) {
        foreach ($found['field_object_audio'] as $k => $v) {
          $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
        }

      }
      elseif ($count_audio === 1) {
        $to_add[$i]['audio'][] = $found['field_object_audio'][0]['nid'];
        unset($to_add[$i]['selector'][1]);
      }
      else {
        // No audio found unset this selector to add.
        unset($to_add[$i]['selector']);
      }
    }
  }
  // More than one field_object_selector_numbers found.
  elseif ($count_multi > 1) {
    foreach ($found['field_object_selector_numbers'][LANGUAGE_NONE] as $k => $v) {
      $to_add[$i]['selector'][] = $found['field_object_selector_numbers'][$k]['value'];
    }
    if ($count_audio) {
      foreach ($found['field_object_audio'][LANGUAGE_NONE] as $k => $v) {
        $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
      }
    }
    else {
      unset($to_add[$i]['selector']);
    }
  }
  // No multiple count but found one selector
  elseif ($found['field_object_selector_number']) {
    $to_add[$i]['selector'][] = $found['field_object_selector_number'][0]['value'];
    if ($count_audio) {
      foreach ($found['field_object_audio'] as $k => $v) {
        $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
      }
    }
  }
  elseif ($count_audio) {
    foreach ($found['field_object_audio'] as $k => $v) {
      $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
    }
  }
  // Add the new audio commentary
  if (!empty($to_add[$i]) && !empty($to_add[$i]['audio'])) {
    if ($mode === 'validate') {
      return TRUE;
    }
    // Before adding anything new, make sure these values are not already on
    // the node.
    $current_items = array();
    if ($current = field_get_items('node', $node, 'field_audio_commentary')) {
      foreach ($current as $item) {
        $current_items[] = field_collection_field_get_entity($item);
      }
    }
    foreach ($to_add[$i]['audio'] as $k => $audio_id) {
      // If this audio id exists in the current items, do not add it again.
      foreach ($current_items as $current_item) {
        $audio_item = !empty($current_item->field_audio_commentary_audio[LANGUAGE_NONE])
                  ? $current_item->field_audio_commentary_audio[LANGUAGE_NONE][0]['target_id'] : NULL;
        if ($audio_item === $audio_id) {
          // Audio node matches current, move to next audio item.
          continue 2;
        }
      }
      // Setup the values in the structure expected by the field_collection entity.
      $item_values = array(
        'field_audio_commentary_audio' => array(
          'value' => $audio_id,
        ),
      );
      if (isset($to_add[$i]['selector'][$k])) {
        $item_values['field_object_selector_number'] = array(
          'value' => $to_add[$i]['selector'][$k],
        );
      }
      // Create the collection entity and set it's "host".
      $collection = entity_create('field_collection_item', array('field_name' => 'field_audio_commentary'));
      $collection->setHostEntity('node', $node);
      $collection_wrapper = entity_metadata_wrapper('field_collection_item', $collection);
      foreach ($item_values as $key => $values) {
        $collection_wrapper->{$key}->set($values['value']);
      }
    }
    $node->_is_changed = TRUE;
  }
  if ($node->_is_changed) {
    unset($node->_is_changed);
    $entity_wrapper->save();
    $counts[AICAPP_TYPE_OBJECT]++;
    return TRUE;
  }
}
