<?php

/**
 * @file
 * Manage objects and galleries that are used in the Mobile APP.
 *
 * Objects and galleries have some data stored in Drupal, and some coming from data hub queries to the
 * Chicago Art Institute's existing DB.  Objects physical location can be pinned on a Google Map of the Institute.
 *
 * This module creates a button that when clicked, pulls all the published content into a JSON file (appData.json) at
 * the site root, which is then called by the mobile APP.
 *
 * Email notices are also fired when objects are pulled out of galleries or added back into galleries.
 */

/**
 * Implements  hook_init().
 */
function aicapp_init() {
  global $language;
  define('AICAPP_DEFAULT_LANG', $language->language);
  define('AICAPP_ARTWORK_QUERY', 'artwork');
  define('AICAPP_GALLERY_QUERY', 'gallery');
  define('AICAPP_IMAGE_SERVER', rtrim(variable_get('aicapp_image_server_url', 'https://lakeimagesweb.artic.edu/iiif/2'), '/'));
  define('AICAPP_IMAGE_CROP_REGION', 'full');
  define('AICAPP_IMAGE_CROP_ROTATION', 0);
  define('AICAPP_IMAGE_CROP_QUALITY', 'default');
  define('AICAPP_IMAGE_CROP_FORMAT', 'jpg');
  define('AICAPP_TYPE_AUDIO', 'audio');
  define('AICAPP_TYPE_OBJECT', 'object');
  define('AICAPP_TYPE_GALLERY', 'gallery');
  define('AICAPP_TYPE_PAGE', 'page');
  define('AICAPP_TYPE_TOUR', 'tour');
  define('AICAPP_TYPE_EXHIBITION', 'exhibition');
  define('AICAPP_TYPE_MAP_ANNOTATION', 'map_annotation');
  define('AICAPP_TYPE_MAP_FLOOR', 'map_floor');
  define('AICAPP_DATA_AGGREGATOR', 'aic_data_aggregrator');
  define('AICAPP_DATA_API_HOST', rtrim(variable_get('aicapp_data_api_host', 'http://aggregator-data-test.artic.edu'), '/'));
  define('AICAPP_DATA_API_ENDPOINT_EXHIBITION', variable_get('aicapp_data_endpoint_exhibitions', '/api/v1/exhibitions'));
  define('AICAPP_DATA_API_ENDPOINT_ARTWORKS', variable_get('aicapp_data_endpoint_artworks', '/api/v1/artworks'));
  define('AICAPP_DATA_API_ENDPOINT_GALLERIES', variable_get('aicapp_data_endpoint_galleries', '/api/v1/galleries'));
  define('AICAPP_DATA_API_ENDPOINT_IMAGES', variable_get('aicapp_data_endpoint_images', '/api/v1/images'));
  define('AICAPP_DATA_API_ENDPOINT_EVENTS', variable_get('aicapp_data_endpoint_events', '/api/v1/events'));
  define('AICAPP_DATA_API_ENDPOINT_TOURS', variable_get('aicapp_data_endpoint_tours', '/api/v1/tours'));
  define('AICAPP_DATA_API_ENDPOINT_AUTOCOMPLETE', variable_get('aicapp_data_endpoint_autocomplete', '/api/v1/autocomplete'));
  define('AICAPP_DATA_API_ENDPOINT_MEMBERS', variable_get('aicapp_data_endpoint_members', '/api/v1/members'));
  define('AICAPP_JSON_FILENAME', variable_get('aicapp_json_filename', 'appData'));
  define('AICAPP_JSON_V2', variable_get('aicapp_json_version_2', 'v2'));
  define('AICAPP_TOUR_VOCABULARY_NAME', variable_get('aicapp_tour_vocabular_name', 'categories'));
  define('AICAPP_CURRENT_SERVER_FQDM', rtrim(variable_get('aicapp_env_fqdm', 'http://aicweb10.artic.edu'), '/'));
}

/**
 * Implements  hook_menu().
 */
function aicapp_menu() {
  $items['objects/search'] = array(
    'title' => 'Add an Object',
    'page callback' => 'aicapp_search_object',
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  // This is redundant, a placeholder for the next one.
  $items['objects/object_add'] = array(
    'title' => 'Add Object',
    'page callback' => 'aicapp_search_object',
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  $items['objects/object_add/%'] = array(
    'title' => 'Add Object',
    'page callback' => 'aicapp_add_object',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  $items['objects/noimg'] = array(
    'title' => 'Objects without Images',
    'page callback' => 'aicapp_object_noimg',
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  $items['objects/check-objects-gallery'] = array(
    'title' => 'Check Objects Gallery Info',
    'page callback' => 'aicapp_object_checks',
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  /* Queries to retrieve data from remote API */
  $items['admin/settings/aic-api'] = array(
    'title' => 'AIC API module settings',
    'description' => 'Specify the URLs of your API',
    'page callback' => 'aicapp_admin_redirect',
    'access callback' => 'user_access',
    'access arguments' => array('administer aic api settings'),
    'type' => MENU_CALLBACK,
    'file' => 'aicapp.admin.inc',
    'file path' => drupal_get_path('module', 'aicapp') . '/includes',
  );
  $items['admin/config/system/aic'] = array(
    'title' => 'AIC module settings',
    'description' => 'Global Settings For AIC APP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aicapp_admin'),
    'access callback' => 'user_access',
    'access arguments' => array('administer aic api settings'),
    'file' => 'aicapp.admin.inc',
    'file path' => drupal_get_path('module', 'aicapp') . '/includes',
  );
  $items['admin/config/system/aic/global'] = array(
    'title' => 'AIC module settings',
    'description' => 'Global Settings For AIC APP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aicapp_admin'),
    'access callback' => 'user_access',
    'access arguments' => array('administer aic api settings'),
    'file' => 'aicapp.admin.inc',
    'file path' => drupal_get_path('module', 'aicapp') . '/includes',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  // API Configurations
  $items['admin/config/system/aic/api'] = array(
    'title' => 'AIC API settings',
    'description' => 'Specify the URLs of your API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aicapp_admin_api'),
    'access callback' => 'user_access',
    'access arguments' => array('administer aic api settings'),
    'file' => 'aicapp.admin.inc',
    'file path' => drupal_get_path('module', 'aicapp') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/system/aic/operations'] = array(
    'title' => 'AIC Operations',
    'description' => 'Utilities to run common operations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aicapp_admin_operations'),
    'access callback' => 'user_access',
    'access arguments' => array('administer aic api settings'),
    'file' => 'aicapp.admin.inc',
    'file path' => drupal_get_path('module', 'aicapp') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function aicapp_permission() {
  return array(
    'add objects' => array(
      'description' => t('Add or edit objects in the museum'),
      'title' => t('Add or Edit Objects'),
      'restrict access' => FALSE,
    ),
    'administer aic api settings' => array(
      'description' => t('Configure AIC Custom Module Settings'),
      'title' => t('Administer AIC Settings'),
      'restrict access' => FALSE,
    ),
  );
}

/**
 * Page callback function.
 */
function aicapp_search_object() {
  $fm = drupal_get_form('aicapp_search_form');
  return render($fm);
}

/**
 * Page callback for adding an object.
 */
function aicapp_add_object($object_id = 0) {
  $object_ids = explode(",", $object_id);
  // Collecting information to present to the user.
  $collect = array();

  foreach ($object_ids as $object_id) {
    // An object ID was passed and is not empty, query based on object ID.
    $options = array(
      'ids' => array($object_id),
      'limit' => 1,
    );
    // Query the data aggregrator.
    $results = _aicapp_fetch_data(AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS, $options);
    if (!empty($results[0])) {
      // Creates the new object or updates existing if it finds it in our Db.
      $nid = aicappSaveNode($results[0], AICAPP_TYPE_OBJECT);
      $object = '<strong>Object ' . $object_id . ' saved.</strong><br />';
      $object .= l(t('View object'), '/node/' . $nid) . '<br /><br />';
      $collect[] = $object;
    }
    else {
      $collect[] = t('Ran into a problem attempting data hub query with object id:') . $object_id . '<br />';
    }
  }
  $output = implode(' ', $collect);
  return $output;
}

/**
 * Implements hook_block_info().
 */
function aicapp_block_info() {
  $blocks['data_buttons'] = array(
    'info' => t('Load and Generate Buttons'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => 1,
  );
  $blocks['publish_butn'] = array(
    'info' => t('Publish Button'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => 1,
  );
  $blocks['data_search'] = array(
    'info' => t('Search AI Data'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'header',
    'visibility' => 1,
  );
  $blocks['gallery_count'] = array(
    'info' => t('Gallery Count'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'content',
    'visibility' => 1,
  );
  $blocks['updates_pending'] = array(
    'info' => t('Updates Pending'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'header',
    'visibility' => 1,
  );
  $blocks['info_for_no-image_page'] = array(
    'info' => t('Info for no-image page'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'content',
    'visibility' => 1,
  );
  $blocks['page_info'] = array(
    'info' => t('Content and Language Status'),
    'status' => TRUE,
    'weight' => -99,
    'region' => 'content',
    'visibility' => 1,
  );
  return $blocks;
}

/**
 * Implements  hook_block_view().
 */
function aicapp_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'data_buttons':
      $block['subject'] = t('Load and Generate Buttons');
      $block['content'] = aicapp_data_content();
      break;

    case 'publish_butn':
      $block['subject'] = t('Publish Button');
      $block['content'] = aicapp_pub_content();
      break;

    case 'data_search':
      $search_form = aicapp_search_form();
      $block['subject'] = t('Search AI Data');
      $block['content'] = render($search_form);
      break;

    case 'gallery_count':
      $block['subject'] = t('Gallery Count');
      $block['content'] = aicapp_gallery_count();
      break;

    case 'updates_pending':
      $block['subject'] = t('Updates Pending');
      $block['content'] = aicapp_updates_pending();
      break;

    case 'info_for_no-image_page':
      $block['subject'] = t('Info for no-image page');
      $block['content'] = aicapp_info_for_no_image_page();
      break;
    case 'page_info':
      $block['subject'] = '';
      $block['content'] = aicapp_page_info_content();
      break;
  }
  return $block;
}

/**
 * Block content callback.
 */
function aicapp_updates_pending() {
  $updates = variable_get('aicapp_pending');
  if ($updates) {
    return '<div class="pending">' . t('Updates Pending') . '</div>';
  }
  else {
    return '<div class="done">' . t('Up to Date') . '</div>';
  }
}

/**
 * Block content callback.
 */
function aicapp_data_content() {
  $fm1 = drupal_get_form('aicapp_loadgalleries_form');
  $fm2 = drupal_get_form('aicapp_gendata_form');
  return render($fm1) . render($fm2);
}

/**
 * Block content callback.
 */
function aicapp_pub_content() {
  $output = '';
  $file_sync_form = drupal_get_form('aicapp_file_sync_form');
  $output .= render($file_sync_form);
  return $output;
}

/**
 * Block content callback.
 */
function aicapp_info_for_no_image_page() {
  return '<p>This page is conducting a live search of each published object from the Drupal CMS in the data hub data to see if there is a full-sized image. If there is not an image in data hub or Drupal, then it is flagged.</p>
';
}

/**
 * Block content callback.
 */
function aicapp_page_info_content() {
  // Get the object found at this path.
  $object = menu_get_object();
  if (!is_object($object) || !node_access('update', $object)) {
    return;
  }
  // Get the path parts in an array.
  $path_parts = arg();
  // Node type info.
  $node_type = node_type_get_type($object->type);
  // Translation info.
  $translations = $object->translations;
  // Create an array of strings that will be imploded back into a single string.
  $message_strings = array('This is @type item.');
  // Create an array of replacement values, for use with the t().
  $types = array(
    '@type' => preg_match('/^[aeiou]/i', strtolower($object->type)) ? 'an ' . $node_type->name : 'a ' . $node_type->name,
  );
  // If this node has translation data.
  if (!empty($translations->data)) {
    global $language;
    $types['@language'] = $language->name;
    $message_strings[] = 'The current language is @language.';
    // Get a list of enabled languages.
    if (function_exists('locale_language_list')) {
      $langauges = locale_language_list();
    }
    else {
      $languages = language_list('enabled');
      $languages = $languages[1];
      $list = array();
      foreach ($languages as $language) {
        $list[$language->language] = ($field == 'name') ? t($language->name) : $language->$field;
      }
      $langauges = $list;
    }
    // Add replacement values of the current language based on the path.
    if (!empty($path_parts[3]) && $path_parts[3] === 'add' && !empty($path_parts[5]) && array_key_exists($path_parts[5], $langauges) ) {
      $types['@language'] =  $langauges[$path_parts[5]];
    }
    elseif (!empty($path_parts[2]) && $path_parts[2] === 'edit' && !empty($path_parts[3]) && array_key_exists($path_parts[3], $langauges) && empty($path_parts[4])) {
      $types['@language'] = $langauges[$path_parts[3]];
    }
  }
  if (!empty($path_parts[2]) && $path_parts[2] === 'edit') {
    // Start the output that best put into the block.
    $content = '<h5 style="border-bottom: 1px solid;background:#eee; padding:.5rem;text-align:center;">' . t(implode(' ', $message_strings), $types) . '</h5>';
    return $content;
  }
}

/**
 * Hook_form() implementation.
 */
function aicapp_loadgalleries_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh Gallery List'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
};

/**
 * Hook_form() implementation.
 */
function aicapp_gendata_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit for Publishing'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
};

/**
 * Hook_form() implementation.
 */
function aicapp_load_remote_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh Events'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
};

/**
 * Hook_form() implementation.
 */
function aicapp_file_sync_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Publish'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
}

/**
 * Page callback wth email aic-contours-notifications@artic.edu.
 */
function aicapp_object_checks() {
  // Compare objects to data hub.
  $gallery_status_form = drupal_get_form('aicapp_ObjectGalleryStatus');
  $gallery_status_message = '<p>This button will cause the system to compare all objects with the current data hub data, and update any objects that
  have been moved into galleries but are currently marked as "Not on display" in Drupal. It will send out an email to tell
  you which objects have recently been put into a gallery, update their gallery number field, and set "in Gallery" to checked.
  It will also set these objects to unpublished so you can review & enter lat / long values if needed.</p>
  <p style="margin-bottom:50px;">
  It will also check each object for any gallery location changes and update the object. An email will
  be sent out to notify of any changes. <em>It will take a while to do all this - please be patient!</em></p>';
  $output = render($gallery_status_form) . $gallery_status_message;
  // Verify object gallery status.
  $verify_obj_form = drupal_get_form('aicapp_verify_obj_gallery');
  $verify_obj_message = '<p>This will check objects to make sure the data hub field "gallery_location" is a valid gallery (one listed here under Galleries).</p>';
  $output .= render($verify_obj_form) . $verify_obj_message;
  return $output;
}

/**
 * Gallery status callback.
 */
function aicapp_ObjectGalleryStatus() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Update Objects' Gallery Status"),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
}

/**
 * Verify Object Gallery submit.
 */
function aicapp_verify_obj_gallery() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Verify Objects' Galleries"),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
}

/**
 * Object Gallery Status submit.
 */
function aicapp_objectGalleryStatus_submit($form, &$form_state) {
  $art_gone = array();
  $art_in_gallery = array();
  $locations = array();
  $changed = array();
  $object_ids = array();
  $by_object_id = array();
  $objects['#updated'] = array();
  // Load all objects, including unpublished, because we compare if objects
  // previously not in a gallery (and unpublished) are now displayed.
  $artwork_objects = node_load_multiple(array(), array('type' => AICAPP_TYPE_OBJECT));
  foreach ($artwork_objects as $object) {
    if (!is_object($object)) {
      continue;
    }
    $entity = entity_metadata_wrapper('node', $object);
    $object_id = $entity->field_object_id->value();
    if (!empty($object_id)) {
      $object_ids[] = $object_id;
      $by_object_id[$object_id] = $object;
    }
    else {
      $objects['#updated'][$object->nid] = _aicapp_update_local_artwork_data($object, $entity);
    }
  }
  // Query the data aggregrator for recent data using the object ids.
  $options = array('ids' => $object_ids, 'limit' => count($object_ids));
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS;
  $results = _aicapp_fetch_data($url, $options);
  if (!empty($results)) {
    foreach ($results as $item) {
      $id = isset($item['id']) ? $item['id'] : NULL;
      if (empty($id) || !isset($by_object_id[$id])) {
        continue;
      }
      $object = $by_object_id[$id];
      $objects['#updated'][$object->nid] = _aicapp_remote_object_properties($object, $item);
    }
  }
  foreach ($objects['#updated'] as $key => $object) {
    // Check objects here to see if they recently went off display.
    // We send email notice in that case - (they may need to update a tour?)
    // First collect the ones marked not on display in current data hub data.
    if (empty($object->in_gallery)) {
      $art_gone[] = $object->nid;
    }
    else {
      // Keep it simple for array comparison later.
      $art_in_gallery[] = $object->nid;
      if (!empty($object->gallery_title)) {
        $locations[$object->nid] = $object->gallery_title;
      }
    }

    // Make sure any objects that have changed galleries get updated.
    if (isset($object->gallery_title)) {
      $loc = $object->gallery_title;
      if (empty($object->in_gallery)) {
        $in_gallery = 0;
      }
      else {
        // The value must be either 0 or 1, so test for truthiness and set to 1.
        $in_gallery = $object->in_gallery ? 1 : 0;
      }
    }
    else {
      $loc = '';
      $in_gallery = 0;
    }
    // Check if 'in gallery' statuses have changed and sync with data hub data.
    if (isset($object->field_in_gallery[LANGUAGE_NONE][0]['value']) && $in_gallery != $object->field_in_gallery[LANGUAGE_NONE][0]['value']) {
      db_query("UPDATE {field_data_field_in_gallery}
        SET field_in_gallery_value = :ingal
        WHERE entity_id = :nid", array(':nid' => $object->nid, ':ingal' => $in_gallery));

      db_query("UPDATE {field_revision_field_in_gallery}
        SET field_in_gallery_value = :ingal
        WHERE entity_id = :nid", array(':nid' => $object->nid, ':ingal' => $in_gallery));
    }
    // Update gallery locations.
    if (isset($object->field_gallery_location[LANGUAGE_NONE][0]['value']) && $loc != $object->field_gallery_location[LANGUAGE_NONE][0]['value']) {
      // Track old gallery locations to compare with new locations.
      $oldloc = $object->field_gallery_location[LANGUAGE_NONE][0]['value'];

      db_query("UPDATE {field_data_field_gallery_location}
          SET field_gallery_location_value = :gal
          WHERE entity_id = :nid
          AND entity_type = 'node'
          AND bundle = :bundle", array(':bundle' => AICAPP_TYPE_OBJECT, ':nid' => $object->nid, ':gal' => $loc));

      db_query("UPDATE {field_revision_field_gallery_location}
          SET field_gallery_location_value = :gal
          WHERE entity_id = :nid
          AND entity_type = 'node'
          AND bundle = :bundle", array(':bundle' => AICAPP_TYPE_OBJECT, ':nid' => $object->nid, ':gal' => $loc));

      // Setting node to unpublished.
      db_query("UPDATE {node} SET status = 0 WHERE nid = :nid", array(':nid' => $object->nid));
      db_query("UPDATE {node_revision} SET status = 0 WHERE nid = :nid", array(':nid' => $object->nid));

      $changed[] = array(
        'object_id' => $object->id,
        'title' => $object->title,
        'location' => $object->gallery_title,
        'old_location' => $oldloc,
      );
    }
  }

  // flush drupal cache.
  drupal_flush_all_caches();

  // notify of any objects no longer on display.
  _email_art_removed($art_gone);

  // notify of any objects BACK on display
  _email_art_gallery($art_in_gallery, $locations, $objects['#updated']);

  // notify of any objects that have changed gallery location.
  _email_object_gallery_change($changed);
}

/**
 * verify that the gallery assigned to a published object is one of the galleries we have in Drupal.
 */
function aicapp_verify_obj_gallery_submit($form, &$form_state) {
  $object_query = "SELECT node.nid, fi.field_object_id_value AS object_id
      FROM {node}, {field_data_field_object_id} fi
      WHERE node.nid = fi.entity_id
      AND fi.bundle = :bundle
      AND node.status = 1";
  $db_objects = db_query($object_query, array(':bundle' => AICAPP_TYPE_OBJECT));
  $gallery_query = "SELECT nid, title
      FROM {node}
      WHERE node.type = :bundle
      AND node.status = 1";
  $galleries = db_query($gallery_query, array(':bundle' => AICAPP_TYPE_GALLERY));

  // need a simple array
  $gals = array();
  foreach ($galleries as $gallery) {
    $gals[] = $gallery->title;
  }
  $objects = array('#updated' => array());
  $bad_obj_galleries = '';
  $object_ids = array();
  $by_object_id = array();
  foreach ($db_objects as $object) {
    if (empty($object->nid)) {
      continue;
    }
    $object = node_load($object->nid);
    $entity = entity_metadata_wrapper('node', $object);
    $object_id = $entity->field_object_id->value();
    if (!empty($object_id)) {
      $object_ids[] = $object_id;
      $by_object_id[$object_id] = $object;
    }
    else {
      $objects['#updated'][$object->nid] = _aicapp_update_local_artwork_data($object, $entity);
    }
  }

  // Query the data aggregrator for recent data using the object ids.
  $options = array('ids' => $object_ids, 'limit' => count($object_ids));
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS;
  $results = _aicapp_fetch_data($url, $options);
  if (!empty($results)) {
    foreach ($results as $item) {
      $id = isset($item['id']) ? $item['id'] : NULL;
      if (empty($id) || !isset($by_object_id[$id])) {
        continue;
      }
      $object = $by_object_id[$id];
      $objects['#updated'][$object->nid] = _aicapp_remote_object_properties($object, $item);
    }
  }
  foreach ($objects['#updated'] as $object) {
    $match = FALSE;
    if (isset($object->gallery_title)) {
      $match = array_search($object->gallery_title, $gals);
    }
    if (($match === FALSE) && isset($object->gallery_title) && $object->gallery_title != 'Currently not on display') {
      $bad_obj_galleries .= '<li>Object ID: ' . $object->object_id . ' -- ' . $object->gallery_title . '</li>';
    }
  }
  // now notify
  if (!empty($bad_obj_galleries)) {
    drupal_set_message('Invalid gallery names found on objects: <ul>' . $bad_obj_galleries . '</ul>', 'error');
  }
  else {
    drupal_set_message('No invalid gallery names found in objects', 'status');
  }
}

/**
 * Helper function for aicapp_gendata_form_submit()
 * Compare 2 arrays of art objects. The first comes from data hub & are marked as not in gallery.
 * The 2nd is from the Drupal DB, and are marked as in gallery.
 * For any that are in both, they have recently been moved out of their gallery.
 * Shoot off email notice with a list - the admin may need to update tours.
 */
function _email_art_removed($art_gone) {
  global $base_url;
  $site_name = variable_get('site_name');

  // Now collect all objects from our Drupal DB (field_in_gallery table) that are in gallery and are published
  $result = db_query("SELECT f.entity_id, f.field_in_gallery_value
    FROM {field_data_field_in_gallery} f, {node} n
    WHERE f.bundle = :bundle
    AND f.entity_type = 'node'
    AND f.field_in_gallery_value = 1
    AND f.entity_id = n.nid
    AND n.status = 1", array(':bundle' => AICAPP_TYPE_OBJECT));

  $was_in_gallery = array();
  // grab the ones that have been on display
  foreach ($result as $item) {
    $was_in_gallery[] = $item->entity_id;
  }

  // now compare
  $recent_pulled = array_intersect($art_gone, $was_in_gallery);

  if (!empty($recent_pulled)) {
    $from = 'admin@' . $base_url;
    $to = variable_get('site_mail', '');
    $msg = '<p>' . t('This automated email is to notify you that we\'ve found objects
        that were recently REMOVED from galleries. You might need to update
        the tours if any of these objects were shown:') . '</p><ul>';
    $object_list = '';
    foreach ($recent_pulled as $nid) {
      $object = node_load($nid);
      // was this object on a tour?
      // V1 version of finding if a object is on a tour.
      $result = db_query("SELECT entity_id FROM field_data_field_stops2 WHERE field_stops2_value = :d", array(':d' => $nid));
      $tours = array();
      foreach ($result as $item) {
        $tours[] = node_load($item->entity_id);
      }
      // Try V2 tour stops if $tours is empty.
      if (empty($tours)) {
        if ($tour_objects = _aicapp_get_tour_objects(array(), $nid)) {
          foreach ($tour_objects as $tour_nid => $tour_values) {
            $tours[] = node_load($tour_nid);
          }
        }
      }

      $object_list .= '<li>object_id = ' . $object->id . ' -- ' . $object->title;
      if (!empty($tours[0])) {
        foreach ($tours as $tour) {
          $object_list .= '<br>-- On tour: ' . check_plain($tour->title);
        }
      }
      $object_list .= '</li>';

      // set the object's status to unpublished
      db_query("UPDATE {node} SET status = 0 WHERE nid = :nid", array(':nid' => $object->nid));
    }
    $msg .= $object_list . '</ul><p>Do not reply to this email.</p>';
    $headers = "From: <" . $from . ">\nMIME-Version: 1.0\nContent-type: text/html; charset=utf-8";
    $subject = $site_name . ': Object Removal Notice';

    if (mail($to, $subject, $msg, $headers)) {
      drupal_set_message('Email notice was sent regarding objects that have been removed:<ul>' . $object_list . '</ul>', 'status');
    }
    else {
      drupal_set_message('Email notice unable to send. (These objects were removed):<ul>' . $object_list . '</ul>', 'error');
    }
  }
}

/**
 * Helper function that lists, given a list of tour ids, will return all objects
 * that are currently in a published  tour, grouped by tour. You can also pass an array of
 * object ids to limit the items returned to only those objects. Passing an
 * array with just one object id will return all the tours that object is in.
 *
 */
function _aicapp_get_tour_objects($tour_nids = array(), $object_nids = array()) {
  // Normalize arguments to make sure we have arrays.
  if (!is_array($tour_nids)) {
    $tour_nids = is_numeric($tour_nids) ? array($tour_nids) : array();
  }
  if (!is_array($object_nids)) {
    $object_nids = is_numeric($object_nids) ? array($object_nids) : array();
  }
  // Load all tours filted by the given tour ids.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', AICAPP_TYPE_TOUR, '=')
    ->propertyCondition('status', 1, '=');
  if (count($tour_nids)) {
    $query->entityCondition('entity_id', $tour_nids, 'IN');
  }
  $results = $query->execute();
  $tours = isset($results['node']) ? entity_load('node', array_keys($results['node'])) : array();
  $tour_objects = array();
  foreach ($tours as $tour) {
    $tour_objects[$tour->nid] = array();
    $stops = _aicapp_get_tour_stops($tour);
    foreach ($stops as $delta => $stop) {
      if (!isset($stop['object']) || (count($object_nids) && !in_array($stop['object'], $object_nids))) {
        continue;
      }
      $tour_objects[$tour->nid][$stop['object']] = $stop;
    }
  }
  return array_filter($tour_objects);
}

function _aicapp_get_tour_stops($tour) {
  $stops = array();
  if (empty($tour->nid)) {
    return $stops;
  }
  if ($fc_items = field_get_items('node', $tour, 'field_tour_stops')) {
    $i = 0;
    foreach ($fc_items as $fc_item) {
      $item = field_collection_field_get_entity($fc_item);
      $audio_commentary_id = !empty($item->field_tour_stop_audio_commentary) ? $item->field_tour_stop_audio_commentary[LANGUAGE_NONE][0]['target_id'] : NULL;
      $audio_commentary = $audio_commentary_id ? entity_load_single('field_collection_item', $audio_commentary_id) : NULL;
      $audio_node_id = !empty($audio_commentary->field_audio_commentary_audio) ? $audio_commentary->field_audio_commentary_audio[LANGUAGE_NONE][0]['target_id']: NULL;
      $bumper_commentary_id = !empty($item->field_tour_stop_bumper) ? $item->field_tour_stop_bumper[LANGUAGE_NONE][0]['target_id'] : NULL;
      $bumper_commentary = $bumper_commentary_id ? entity_load_single('field_collection_item', $bumper_commentary_id) : NULL;
      $bumper_node_id = is_object($bumper_commentary) ? $bumper_commentary->hostEntityId() : NULL;
      $object_node_id = !empty($item->field_tour_stop_object) ? $item->field_tour_stop_object[LANGUAGE_NONE][0]['target_id'] : NULL;
      // if ($object_node = node_load($object_node_id)) {
      //   $entity = entity_metadata_wrapper('node', $object_node_id);
      //   $object_id = $entity->field_object_id->value();
      // }
      // else {
      //   $object_id = NULL;
      // }
      $stops[] = array(
        //'object_id' => $object_id,
        'object' => $object_node_id,
        'audio_id' => $audio_node_id,
        'audio_bumper' => $bumper_node_id,
        'sort' => $i,
      );
      $i++;
    }
  }
  return $stops;
}

/**
 * Helper function for aicapp_gendata_form_submit()
 * Similar to above, but the reverse. Notify of objects that are now on display in gallery.
 */
function _email_art_gallery($art_in_gallery, $locations, $objects) {
  global $base_url;
  $site_name = variable_get('site_name');

  // Now collect all objects from our Drupal DB (field_in_gallery table) that are NOT in gallery
  $not_displayed = array();
  foreach ($objects as $obj) {
    if (!is_object($obj) || empty($obj->field_in_gallery)) {
      continue;
    }
    if ($obj->field_in_gallery[LANGUAGE_NONE][0]['value'] == 0) {
      $not_displayed[] = $obj->nid;
    }
  }

  // now compare
  $recent_added = array_intersect($art_in_gallery, $not_displayed);

  if (!empty($recent_added)) {
    $from = 'admin@' . $base_url;
    $to = variable_get('site_mail', '');
    $msg = '<p>This automated email is to notify you that we\'ve found objects
        that were recently ADDED into galleries. You might need to update the object location information
        and the tours:</p><ul>';
    $object_list = '';
    $recent_full_objects = array();
    foreach ($recent_added as $nid) {
      $recent_full_objects[$nid] = $objects[$nid];
      $object_list .= '<li>object_id - ' . $objects[$nid]->id . ' - ';
      $object_list .= $objects[$nid]->title . ' - ' . $objects[$nid]->gallery_title . '</li>';
    }
    $msg .= $object_list . '</ul><p>Do not reply to this email.</p>';
    $headers = "From: <" . $from . ">\nMIME-Version: 1.0\nContent-type: text/html; charset=utf-8";

    $subject = $site_name . ': Objects Now On Display Notice';

    if (mail($to, $subject, $msg, $headers)) {
      drupal_set_message('Email notice was sent regarding objects now ADDED into galleries:<ul>' . $object_list . '</ul>', 'status');
    }
    else {
      drupal_set_message('Email notice unable to send. (These objects were removed):<ul>' . $object_list . '</ul>', 'error');
    }
    _update_object_galleries($recent_added, $locations);
  }
  else {
    drupal_set_message('\'Update Objects Gallery Status\' has been run. No new gallery_locations were added.', 'status');
  }
}

/**
 * Helper function for aicapp_gendata_form_submit()
 * Similar to above, but the reverse. Notify of objects that are now on display in gallery.
  */
function _email_object_gallery_change($changed) {
  if (!empty($changed)) {
    global $base_url;
    $site_name = variable_get('site_name');

    $from = 'admin@' . $base_url;
    $to = variable_get('site_mail', '');
    $msg = '<p>This automated email is to notify you that we\'ve found object(s)
      that have changed gallery locations. You might need to update the object\'s location (map LAT/LNG) values:</p><ul>';
    $object_list = '';
    foreach ($changed as $object) {
      $object_list .= '<li>object_id - ' . $object['id'] . ' - ' . $object['title'] . '<br />Previous location: ' . $object['old_location'] . ', New location: ' . $object['location'] . '</li>';
    }
    $msg .= $object_list . '</ul><p>Do not reply to this email.</p>';
    $headers = "From: <" . $from . ">\nMIME-Version: 1.0\nContent-type: text/html; charset=utf-8";
    $subject = $site_name . ': Object Changed Location Notice';

    if (mail($to, $subject, $msg, $headers)) {
      drupal_set_message('Email notice was sent regarding objects that CHANGED galleries:<ul>' . $object_list . '</ul>', 'status');
    }
    else {
      drupal_set_message('Email notice unable to send. (These objects CHANGED galleries):<ul>' . $object_list . '</ul>', 'error');
    }
  }
  else {
    drupal_set_message('No gallery changes were found.', 'status');
  }
}

/*
 * Update the gallery_location field, and into_gallery fields for newly displayed objects based on data hub
 */
function _update_object_galleries($recent_added, $locations) {
  foreach ($recent_added as $nid) {
    $node = node_load($nid);
    $entity = entity_metadata_wrapper('node', $node);
    $entity->field_gallery_location = (string) $locations[$nid];
    $entity->field_in_gallery->set(1);
    $entity->status->set(0); // status is 0 (unpublished) because they want to look at it before it gets published.
    $entity->save();
  }
}

/**
 * Take all the data in the Drupal DB, adding data from matching records in
 * the data hub, and write them to JSON file.
 */
function aicapp_gendata_form_submit($form, &$form_state) {
  global $base_path;
  // Load the general info by loading node number 1.
  // @TODO instead of hard coding node 1, maybe add a configuration field in the
  // admin settings page for this module?
  $node_gen = node_load(1);
  strip_drupal_from_node($node_gen);
  // Load all published gallery nodes.
  $galleries = node_load_multiple(array(), array('type' => AICAPP_TYPE_GALLERY, 'status' => 1));
  // Load all published objects.
  $objects = node_load_multiple(array(), array('type' => AICAPP_TYPE_OBJECT, 'status' => 1));
  // Load audio nodes.
  $audio_files = node_load_multiple(array(), array('type' => AICAPP_TYPE_AUDIO, 'status' => 1));
  // Load tours nodes.
  $tours = node_load_multiple(array(), array('type' => AICAPP_TYPE_TOUR));
  // Load map annontations that are published.
  $map_annotations = node_load_multiple(array(), array('type' => AICAPP_TYPE_MAP_ANNOTATION, 'status' => 1));
  // Load map floor that are published. There should only be 1 node loaded.
  $map_floor = node_load_multiple(array(), array('type' => AICAPP_TYPE_MAP_FLOOR, 'status' => 1));
  // Load all published exhibition nodes.
  $exhibitions = node_load_multiple(array(), array('type' => AICAPP_TYPE_EXHIBITION, 'status' => 1));
  // Load featured Events & Objects via an entity field query because we Only
  // need a list of node IDs instead of entire objects.
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', array(AICAPP_TYPE_EXHIBITION), 'IN')
    ->propertyCondition('status', 1, '=')
    ->propertyCondition('promote', 1, '=')
    ->execute();
  // Load all featured nodes.
  $featured = isset($results['node']) ? node_load_multiple(array_keys($results['node'])) : array();
  // Gallery nodes.
  $gallery_ids = array();
  $by_gallery_id = array();
  foreach ($galleries as $gallery) {
    // Strip out Drupal native stuff we don't need in the JSON output from galleries.
    strip_drupal_from_node($gallery);
    $gallery_ids[] = $gallery->gallery_id;
    $by_gallery_id[$gallery->gallery_id] = $gallery;
  }
  $galleries['#updated'] = array();
  // Query the data aggregrator for recent data using the gallery ids.
  $options = array('ids' => $gallery_ids, 'limit' => count($gallery_ids));
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_GALLERIES;
  $results = _aicapp_fetch_data($url, $options);
  if (!empty($results)) {
    // @TODO a better way would be to only request the fields we want.
    $gallery_to_skip = array(
      'id', 'lake_guid', 'category_ids', 'last_updated_fedora', 'latlon',
      'last_updated_source', 'last_updated', 'last_updated_citi',
    );
    foreach ($results as $item) {
      $id = isset($item['id']) ? $item['id'] : NULL;
      if (empty($id) || !isset($by_gallery_id[$id])) {
        continue;
      }
      $gallery = $by_gallery_id[$id];
      foreach ($item as $key => $val) {
        if ($key === 'is_closed') {
          $key = 'closed';
          unset($gallery->is_closed);
        }
        elseif (in_array($key, $gallery_to_skip)) {
          continue;
        }
        $gallery->{$key} = $val;
      }
      $galleries['#updated'][$gallery->nid] = $gallery;
    }
  }
  // Use the updated galleries.
  $galleries = $galleries['#updated'];
  // Now we build up the objects array for JSON output.
  $object_ids = array();
  $by_object_id = array();
  $objects['#updated'] = array();
  foreach ($objects as $object) {
    if (!is_object($object)) {
      continue;
    }
    $entity = entity_metadata_wrapper('node', $object);
    $object_id = $entity->field_object_id->value();
    if (empty($object_id)) {
      // If there is no object id, then we have a custom object.
      $object->id = NULL;
      $object->object_id = NULL;
      // Add local values.
      $objects['#updated'][$object->nid] = _aicapp_update_local_artwork_data($object, $entity);
    }
    else {
      $object_ids[] = $object_id;
      $by_object_id[$object_id] = $object;
    }
  }
  // Query the data aggregrator for recent data using the object ids.
  $options = array('ids' => $object_ids, 'limit' => count($object_ids));
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS;
  $results = _aicapp_fetch_data($url, $options);
  if (!empty($results)) {
    // @TODO a better way would be to only request the fields we want.
    $object_props_to_skip = array('#skip' => array(
      'description', 'medium', 'inscriptions', 'provenance_text', 'exhibition_history',
      'object_type', 'object_type_id', 'publication_history', 'collection_status',
      'publishing_verification_level', 'gallery_id', 'place_of_origin',
    ));
    foreach ($results as $item) {
      $id = isset($item['id']) ? $item['id'] : NULL;
      if (empty($id) || !isset($by_object_id[$id])) {
        continue;
      }
      $object = $by_object_id[$id];
      $objects['#updated'][$object->nid] = _aicapp_remote_object_properties($object, $item, $object_props_to_skip);
    }
  }
  // Only show objects that are in a gallery, and have lat/long values,
  // and that are published.
  foreach ($objects['#updated'] as $key => $object) {
    // Strip out Drupal properties we don't need in the JSON output of obects.
    strip_drupal_from_node($object);
    // Remove object that do not qualify because they are a) not in a gallery,
    // b) have no location, or c) are not published.
    if (empty($object->in_gallery) || empty($object->location) || empty($object->status)) {
      unset($objects['#updated'][$key]);
    }
  }

  // Overwrite the objects with the updated copy.
  $objects = $objects['#updated'];
  // Format audio node.
  foreach ($audio_files as $audio) {
    strip_drupal_from_node($audio);
  }
  // Loop through all tours.
  foreach ($tours as $key => $tour) {
    // If tour is featured (ie, promote = 1), then add to featued lists.
    if ($tour->promote && $tour->status) {
      $featured[$tour->nid] = new stdClass();
      $featured[$tour->nid]->nid = $tour->nid;
      $featured[$tour->nid]->type = AICAPP_TYPE_TOUR;
    }
    // Clean the tour node of extra properties.
    strip_drupal_from_node($tour);
    // Retrieve today's date.
    $today = date("Y-m-d H:i:s");
    if (!empty($tour->tour_dates) && !empty($tour->tour_dates[LANGUAGE_NONE][0]['value'])) {
      $tourStartDate = $tour->tour_dates[LANGUAGE_NONE][0]['value'];
      $tourEndDate = $tour->tour_dates[LANGUAGE_NONE][0]['value2'];
      $tour->tour_dates = array(
        'start_date' => $tourStartDate,
        'end_date' => $tourEndDate,
      );
      // If today is greater than or equal to the start date and
      // it's also less than or equal to the end date, publish the tour.
      if ($today >= $tourStartDate && $today <= $tourEndDate) {
        db_query("UPDATE {node} SET status = 1 WHERE nid = :nid", array(':nid' => $tour->nid));
        db_query("UPDATE {node_revision} SET status = 1 WHERE nid = :nid", array(':nid' => $tour->nid));
      }
      else {
        // Unpublish the tour.
        db_query("UPDATE {node} SET status = 0 WHERE nid = :nid", array(':nid' => $tour->nid));
        db_query("UPDATE {node_revision} SET status = 0 WHERE nid = :nid", array(':nid' => $tour->nid));
        unset($tours[$key]);
        // Also remove from featured.
        unset($featured[$tour->nid]);
      }
    }
    elseif (empty($tour->tour_dates) && $tour->status == 0) {
      unset($tours[$key]);
    }
    // Add the weight from the view page so we can sort.
    $result = db_query('SELECT weight FROM {draggableviews_structure} WHERE entity_id = :d', array(':d' => $tour->nid));
    foreach ($result as $item) {
      $tour->weight = (!empty($item->weight)) ? $item->weight : 0;
    }
    // Collect the tour stops (objects + audio files)
    // App v1 -- this will be deprecated.
    if (!empty($tour->stops)) {
      $tour->stops = aicapp_collect_tour_stops($tour->stops);
    }
    // App v2 -- process all tour stops..
    if (isset($tour->tour_stop_items)) {
      $tour->tour_stops = $tour->tour_stop_items;
      unset($tour->tour_stop_items);
    }
  }
  // Sort tours.
  usort($tours, 'sort_objects_by_weight');
  // Format map annontations.
  foreach ($map_annotations as $annontation) {
    strip_drupal_from_node($annontation);
  }
  // Format map annontations.
  foreach ($map_floor as $floor) {
    strip_drupal_from_node($floor);
    // There should only be 1 map floor node.
    $map_floor = $floor->floors;
  }
  // Format exhibitions
  $by_exhibition_id = array();
  foreach ($exhibitions as $exhibition) {
    if ($exhibition->promote && $exhibition->status) {
      $featured[$exhibition->nid] = new stdClass();
      $featured[$exhibition->nid]->nid = $exhibition->nid;
      $featured[$exhibition->nid]->type = AICAPP_TYPE_EXHIBITION;
    }
    // Strip out Drupal native stuff we don't need in the JSON output from galleries.
    strip_drupal_from_node($exhibition);
    if (!empty($exhibition->image_url)) {
      $by_exhibition_id[$exhibition->exhibition_id] = $exhibition;
      unset($exhibition->exhibition_id);
    }
  }
  // Format featured tours and exhibitions.
  $featured_sorted = array();
  if (!empty($featured)) {
    foreach ($featured as $feature) {
      $featured_sorted[$feature->type][] = $feature->nid;
    }
  }
  // Prepare to output JSON Version 2 JSON data.
  // Add all the entities to a single array for JSON encoding.
  $v2_data = array(
    'dashboard' => array(
      'featured_tours' => isset($featured_sorted[AICAPP_TYPE_TOUR]) ? $featured_sorted[AICAPP_TYPE_TOUR] : array(),
      'featured_exhibitions' => isset($featured_sorted[AICAPP_TYPE_EXHIBITION]) ? $featured_sorted[AICAPP_TYPE_EXHIBITION] : array(),
    ),
    'general_info' => $node_gen,
    'galleries' => $galleries,
    'objects' => $objects,
    'audio_files' => $audio_files,
    'tours' => $tours,
    'annontations' => $map_annotations,
    'map_floors' => !empty($map_floor) ? $map_floor : array(),
    'tour_categories' => _aicapp_get_tour_categories(),
    'exhibitions' => $by_exhibition_id,
    'data' => _aic_app_get_data_endpoints(),
  );
  // Writing version 2 file output.
  $v2_json_output = json_encode($v2_data);
  $v2_filename = variable_get('file_public_path', conf_path() . '/files');
  $v2_filename .= '/' . AICAPP_JSON_FILENAME . '-' . AICAPP_JSON_V2 . '.json';
  $v2_file = file_put_contents($v2_filename, $v2_json_output);
  // Version 1 data.
  $v1_data = array(
    'general_info' => $node_gen,
    'galleries' => $galleries,
    'objects' => $objects,
    'audio_files' => $audio_files,
    'tours' => $tours,
  );
  // Remove translations property to prevent any changes to v1 JSON.
  foreach ($v1_data as $type => $items) {
    if ($type === 'general_info') {
      if (isset($items->translations)) {
        unset($items->translations);
      }
      $v1_data[$type] = $items;
      continue;
    }
    elseif ($type === 'tours') {
      $cleaned_items = array();
      foreach ($items as &$item) {
        if (isset($item->translations)) {
          unset($item->translations);
        }
        $cleaned_items[] = $item;
      }
      $v1_data[$type] = $cleaned_items;
      continue;
    }
    foreach ($items as $key => &$item) {
      if (isset($item->translations)) {
        unset($item->translations);
      }
      $v1_data[$type][$key] = $item;
    }
  }
  // Write JSON output to files.
  // v1 verion file output.
  $v1_json_output = json_encode($v1_data);
  $v1_filename = variable_get('file_public_path', conf_path() . '/files');
  $v1_filename .= '/' . AICAPP_JSON_FILENAME . '.json';
  $v1_file = file_put_contents($v1_filename, $v1_json_output);
  // If both v1 & v1 files were written successfully.
  if ($v1_file && $v2_file) {
    drupal_set_message('Updated files <strong>v1</strong>: <a href="' . $base_path . 'sites/default/files/appData.json' . '">appData.json</a> or <strong>v2</strong>: <a href="' . $base_path . 'sites/default/files/appData-v2.json' . '">appData-v2.json</a><br>When you click to view one of the files, be sure to refresh your browser as it might be cached. Best viewed in Chrome.', 'status');
    variable_set('aicapp_pending', 0);
  }
  else {
    drupal_set_message('Problem occurred, file not written.', 'error');
  }
}

/**
 * Collect tour stops and return as a group. Use for V1 App JSON.
 */
function aicapp_collect_tour_stops($stops = array()) {
  $full_stops = $audio = $objects = array();
  foreach ($stops as $stop) {
    if (empty($stop['value'])) {
      continue;
    }
    $result = db_query("SELECT field_t_audio_nid, delta
      FROM {field_revision_field_t_audio}
      WHERE revision_id = :vid
      ORDER by delta", array(':vid' => $stop['value']));
    foreach ($result as $item) {
      $audio[] = array('nid' => $item->field_t_audio_nid, 'delta' => $item->delta);
    }

    $result = db_query("SELECT field_t_object_nid, delta
      FROM {field_revision_field_t_object}
      WHERE revision_id = :vid
      ORDER by delta", array(':vid' => $stop['value']));
    foreach ($result as $item) {
      $objects[] = array('nid' => $item->field_t_object_nid, 'delta' => $item->delta);
    }
    // Now we should have 2 arrays of same length, sorted in order.
    if (count($audio) == count($objects)) {
      for ($i = 0; $i < count($audio); $i++) {
        $full_stops[] = array(
          AICAPP_TYPE_AUDIO => $audio[$i]['nid'],
          AICAPP_TYPE_OBJECT => $objects[$i]['nid'],
          'sort' => $objects[$i]['delta'],
        );
      }
    }
  }
  return $full_stops;
}

/**
 * Helper to sort object by weight.
 */
function sort_objects_by_weight($a, $b) {
  if ((!isset($a->weight) || !isset($b->weight)) || (isset($a->weight) && isset($b->weight) && $a->weight == $b->weight)) {
    return 0;
  }
  return $a->weight - $b->weight;
}

/**
 * Add the remote artwork object data to the object node.
 */
function _aicapp_update_local_artwork_data(&$object, $entity = NULL) {
  if (!$entity) {
    $entity = entity_metadata_wrapper('node', $object);
  }
  // If there is no object id, then we have a custom object.
  // Reference values entered for object data.
  $object->in_gallery = $entity->field_in_gallery->value();
  $object->gallery_title = $entity->field_gallery_location->value();
  $object->credit_line = $entity->field_credit_line->value();
  $object->copyright_notice = $entity->field_copyright_notice->value();
  if ($entity->field_artist_origin->value()) {
    $object->artist_culture_place_delim = $entity->field_artist_name->value() . '|' . $entity->field_artist_origin->value();
  }
  else {
    $object->artist_culture_place_delim = $entity->field_artist_name->value();
  }
  return $object;
}

/**
 * Fetch data from the data aggregrator.
 */
function _aicapp_fetch_data($endpoint, $options = array(), $full_response = FALSE, $batch_start = 0) {
  $results = array();
  $defaults = array(
    'batch_count' => 67,
    'http' => 'GET',
  );
  // Merge in default values.
  $options += $defaults;
  // Format a couple fields if they were used.
  if (!empty($options['fields'])) {
    $options['fields'] = is_array($options['fields']) ? implode(',', $options['fields']) : $options['fields'];
  }
  if (!empty($options['ids'])) {
    if (!is_array($options['ids'])) {
      $options['ids'] = explode(',', $options['ids']);
    }
    // Combine all ids to eliminate duplicates, also the array_filter removes
    // negative values. @TODO confirm we want to remove negative gallery ids.
    $options['ids'] = array_filter(array_combine($options['ids'], $options['ids']), 'is_positive');
    // Batch large number of ids or large limit requests into a small number of
    // separate requests and then send back all results.
    // @TODO In order to handle large number of requests, explore whether
    // https://www.drupal.org/project/httprl would help by making parallel http requests.
    $id_count = count($options['ids']);
    if ($id_count > $options['batch_count']) {
      // Separate the request into batches.
      $batch_options = $options;
      $batch_options['limit'] = $options['batch_count'];
      $all_ids = array_combine($batch_options['ids'], $batch_options['ids']);
      while ($batch_start <= $id_count) {
        $batch = array_slice($all_ids, $batch_start, $options['batch_count'], TRUE);
        $batch_options['ids'] = array_values($batch);
        $new_results = _aicapp_fetch_data($endpoint, $batch_options);
        $results = is_array($new_results) ? array_merge($results, $new_results) : $results;
        $batch_start += $options['batch_count'];
      }
      // Return all results.
      return $results;
    }
    else {
      $options['ids'] = implode(',', $options['ids']);
    }
  }
  $data = NULL;
  if (strtoupper($options['http']) === 'POST') {
    // POST'ing a query.
    $post_options = array(
      'method' => 'POST',
      'data' => $options['query'],
      'headers' => array('Content-Type' => 'application/json'),
    );
    try {
      $result = drupal_http_request($endpoint, $post_options);
      if ($result->code === '200' && !empty($result->data)) {
        $data = $result->data;
      }
    }
    catch (Exception $e) {

    }
  }
  else {
    unset($options['https']);
    $url = $endpoint . '?' . http_build_query($options);
    try {
      $data = file_get_contents($url);
    }
    catch (Exception $e) {
      // Likely hitting 429, too many requests.
      $replacements = array(
        '%url' => $object->nid,
        '%e' => !empty($e->errorInfo[2]) ? $e->errorInfo[2] : '',
      );
      drupal_set_message(t("An error (%e) occurred when fetching data from: %url", $replacements), 'error');
      if (module_exists('devel')) {
        $d = debug_backtrace();
        $replacements['%debug'] = $d[1]['function'];
        $message = t('There was a problem (%e) fetching data from: %url. The calling function was %debug', $replacements);
        watchdog('aic_update_object', $message, array(), WATCHDOG_ERROR);
      }
    }
  }
  // If connection not available.
  if (!$data) {
    return;
  }
  $json = json_decode($data, TRUE);
  if ($full_response && !empty($json)) {
    $results = $json;
  }
  elseif (isset($json['data'])) {
    foreach ($json['data'] as $remote_record) {
      $results[] = $remote_record;
    }
  }
  return $results;
}

/**
 * Clear out all the Drupal stuff from the node, so we can deliver JSON data.
 */
function strip_drupal_from_node(&$node) {
  // Node properties that we want to save, so we skip unsetting them.
  $to_skip = array(
    'title', 'status', 'type', 'nid', 'translations',
    // Artwork object properties that we do not want to strip away.
    'id', 'in_gallery', 'gallery_location', 'credit_line', 'copyright_notice',
    'artist_culture_place_delim', 'object_id', 'main_reference_number',
    'title_t', 'artist_sort_name', 'artist_culture_place', 'dimensions',
    'date_display', 'date_range', 'reference_num', 'artist_display',
  );
  // Node properties that we want to strip.
  $to_unset = array(
    'vid', 'uid', 'log', 'comment', 'promote', 'sticky', 'created', 'changed',
    'tnid', 'translate', 'revision_timestamp', 'revision_uid', 'path', 'name',
    'picture', 'data', 'vuuid', 'uuid',
    'body', 'title_original', 'entity_translation_handler_id',
  );
  foreach ($to_unset as $property) {
    if (isset($node->{$property})) {
      unset($node->{$property});
    }
  }
  // Save the properties of the node before adding more.
  $properties = array_keys((array) $node);
  // List of node types that can be translated.
  // Save the translations available.
  $translations = array();
  if (isset($node->translations) && isset($node->translations->data)) {
    $translations = $node->translations->data;
  }
  $i18n_types = array(
    AICAPP_TYPE_AUDIO, AICAPP_TYPE_TOUR,
    AICAPP_TYPE_MAP_ANNOTATION, AICAPP_TYPE_PAGE,
  );
  if (in_array($node->type, $i18n_types)) {
    // Create an empty translations property to store all translations.
    $node->translations = array();
  }
  else {
    unset($node->translations);
  }
  // Fields used in multiple content types, such as location and floor.
  // Location field.
  if (isset($node->field_location)) {
    $node->location = NULL;
    if (isset($node->field_location[LANGUAGE_NONE][0]['safe_value'])) {
      $node->location = $node->field_location[LANGUAGE_NONE][0]['safe_value'];
    }
    // Location should be split into latitude and longitude properties.
    if (!empty($node->location)) {
      $pieces = explode(',', $node->location);
      $node->latitude = $pieces[0];
      $node->longitude = isset($pieces[1]) ? $pieces[1] : '';
    }
  }
  // Current Floor is used in Gallery, Map Annotation & Tour nodes. App V1.
  if (isset($node->field_floor)) {
    $node->floor = NULL;
    if (isset($node->field_floor[LANGUAGE_NONE][0]['safe_value'])) {
      $node->floor = $node->field_floor[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // If the floor reference field is set.
  if (isset($node->field_floor_reference)) {
    $node->floor = NULL;
    if (isset($node->field_floor_reference[LANGUAGE_NONE][0]['target_id'])) {
      $floor = entity_load('field_collection_item', array($node->field_floor_reference[LANGUAGE_NONE][0]['target_id']));
      if (count($floor)) {
        $floor = array_pop($floor);
        $node->floor = !empty($floor->field_floor_label) ? $floor->field_floor_label[LANGUAGE_NONE][0]['safe_value'] : '';
      }
    }
  }
  // Image field is used in Object, Tour & Article nodes.
  if (isset($node->field_image)) {
    $node->image_filename = NULL;
    $node->image_url = NULL;
    $node->image_filemime = NULL;
    $node->image_filesize = NULL;
    $node->image_width = NULL;
    $node->image_height = NULL;
    if (isset($node->field_image[LANGUAGE_NONE][0]['uri'])) {
      $node->image_filename = $node->field_image[LANGUAGE_NONE][0]['filename'];
      $node->image_url = _aicapp_file_create_url($node->field_image[LANGUAGE_NONE][0]['uri']);
      $node->image_filemime = $node->field_image[LANGUAGE_NONE][0]['filemime'];
      $node->image_filesize = $node->field_image[LANGUAGE_NONE][0]['filesize'];
      $node->image_width = $node->field_image[LANGUAGE_NONE][0]['width'];
      $node->image_height = $node->field_image[LANGUAGE_NONE][0]['height'];
    }
  }
  // Object & Tour thumbnail image crop dimensions. First handle v1 of app.
  if (isset($node->field_thumbnail_crop_rect)) {
    $node->thumbnail_crop_rect = array();
    if (isset($node->field_thumbnail_crop_rect[LANGUAGE_NONE][0])) {
      $items = field_get_items('node', $node, 'field_thumbnail_crop_rect');
      foreach ($items as $itemid) {
        $item = field_collection_field_get_entity($itemid);
        if ($item->field_x) {
          $node->thumbnail_crop_rect = array(
            'x' => !empty($item->field_x) ? $item->field_x[LANGUAGE_NONE][0]['value'] : NULL,
            'y' => !empty($item->field_y) ? $item->field_y[LANGUAGE_NONE][0]['value'] : NULL,
            'width' => !empty($item->field_width) ? $item->field_width[LANGUAGE_NONE][0]['value'] : NULL,
            'height' => !empty($item->field_height) ? $item->field_height[LANGUAGE_NONE][0]['value'] : NULL,
          );
          json_encode($node->thumbnail_crop_rect);
          // Set v2 values by default to v1. They will be overwritten by
          // v2 values below, if they exist.
          $node->thumbnail_crop_v2 = $node->thumbnail_crop_rect;
        }
      }
    }
  }
  // Now v2 app fields for thumbnail crop rectangle.
  if (isset($node->field_thumbnail_image_crop)) {
    if (isset($node->field_thumbnail_image_crop[LANGUAGE_NONE][0])) {
      $items = field_get_items('node', $node, 'field_thumbnail_image_crop');
      foreach ($items as $itemid) {
        $item = field_collection_field_get_entity($itemid);
        if ($item->field_x) {
          $node->thumbnail_crop_v2 = array(
            'x' => !empty($item->field_x) ? $item->field_x[LANGUAGE_NONE][0]['value'] : NULL,
            'y' => !empty($item->field_y) ? $item->field_y[LANGUAGE_NONE][0]['value'] : NULL,
            'width' => !empty($item->field_width) ? $item->field_width[LANGUAGE_NONE][0]['value'] : NULL,
            'height' => !empty($item->field_height) ? $item->field_height[LANGUAGE_NONE][0]['value'] : NULL,
            'image_width' => !empty($item->field_image_width) ? $item->field_image_width[LANGUAGE_NONE][0]['value'] : NULL,
            'image_height' => !empty($item->field_image_height) ? $item->field_image_height[LANGUAGE_NONE][0]['value'] : NULL,
          );
          json_encode($node->thumbnail_crop_v2);
        }
      }
    }
  }

  // Object & Tour thumbnail image url.
  if (isset($node->field_thumbnail_image)) {
    $node->thumbnail_full_path = NULL;
    if (isset($node->field_thumbnail_image[LANGUAGE_NONE][0]['safe_value'])) {
      $node->thumbnail_full_path = $node->field_thumbnail_image[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Object & Tour large image crop dimensions for v1 of app.
  if (isset($node->field_large_image_crop_rect)) {
    $node->large_image_crop_rect = array();
    if (isset($node->field_large_image_crop_rect[LANGUAGE_NONE][0])) {
      $items = field_get_items('node', $node, 'field_large_image_crop_rect');
      foreach ($items as $itemid) {
        $item = field_collection_field_get_entity($itemid);
        if ($item->field_x) {
          $node->large_image_crop_rect = array(
            'x' => !empty($item->field_x) ? $item->field_x[LANGUAGE_NONE][0]['value'] : NULL,
            'y' => !empty($item->field_y) ? $item->field_y[LANGUAGE_NONE][0]['value'] : NULL,
            'width' => !empty($item->field_width) ? $item->field_width[LANGUAGE_NONE][0]['value'] : NULL,
            'height' => !empty($item->field_height) ? $item->field_height[LANGUAGE_NONE][0]['value'] : NULL,
          );
          json_encode($node->large_image_crop_rect);
          // Set v2 values by default to v1. They will be overwritten by
          // v2 values below, if they exist.
          $node->large_image_crop_v2 = $node->large_image_crop_rect;
        }
      }
    }
  }
  // Now v2 app fields for thumbnail crop rectangle.
  if (isset($node->field_large_image_crop)) {
    if (isset($node->field_large_image_crop[LANGUAGE_NONE][0])) {
      $items = field_get_items('node', $node, 'field_large_image_crop');
      foreach ($items as $itemid) {
        $item = field_collection_field_get_entity($itemid);
        if ($item->field_x) {
          $node->large_image_crop_v2 = array(
            'x' => !empty($item->field_x) ? $item->field_x[LANGUAGE_NONE][0]['value'] : NULL,
            'y' => !empty($item->field_y) ? $item->field_y[LANGUAGE_NONE][0]['value'] : NULL,
            'width' => !empty($item->field_width) ? $item->field_width[LANGUAGE_NONE][0]['value'] : NULL,
            'height' => !empty($item->field_height) ? $item->field_height[LANGUAGE_NONE][0]['value'] : NULL,
          );
          json_encode($node->large_image_crop_v2);
        }
      }
    }
  }

  // Object & Tour full size image url.
  if (isset($node->field_large_image)) {
    $node->large_image_full_path = NULL;
    if (isset($node->field_large_image[LANGUAGE_NONE][0]['safe_value'])) {
      $node->large_image_full_path = $node->field_large_image[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Fields that belong to only 1 content type.
  switch ($node->type) {
    case AICAPP_TYPE_PAGE:
      // General Info node field items.
      if (isset($node->field_museum_hours)) {
        $node->museum_hours = NULL;
        if (isset($node->field_museum_hours[$node->language][0]['safe_value'])) {
          $node->museum_hours = $node->field_museum_hours[$node->language][0]['safe_value'];
        }
      }
      // (field_home_member_prompt_text) home_member_prompt_text.
      if (isset($node->field_home_member_prompt_text)) {
        $node->home_member_prompt_text = NULL;
        if (isset($node->field_home_member_prompt_text[$node->language][0]['safe_value'])) {
          $node->home_member_prompt_text = $node->field_home_member_prompt_text[$node->language][0]['safe_value'];
        }
      }
      // (field_audio_title) audio_title.
      if (isset($node->field_audio_title)) {
        $node->audio_title = NULL;
        if (isset($node->field_audio_title[$node->language][0]['safe_value'])) {
          $node->audio_title = $node->field_audio_title[$node->language][0]['safe_value'];
        }
      }
      // (field_audio_subtitle) audio_subtitle.
      if (isset($node->field_audio_subtitle)) {
        $node->audio_subtitle = NULL;
        if (isset($node->field_audio_subtitle[$node->language][0]['safe_value'])) {
          $node->audio_subtitle = $node->field_audio_subtitle[$node->language][0]['safe_value'];
        }
      }
      // (field_map_title) map_title.
      if (isset($node->field_map_title)) {
        $node->map_title = NULL;
        if (isset($node->field_map_title[$node->language][0]['safe_value'])) {
          $node->map_title = $node->field_map_title[$node->language][0]['safe_value'];
        }
      }
      // (field_map_subtitle) map_subtitle.
      if (isset($node->field_map_subtitle)) {
        $node->map_subtitle = NULL;
        if (isset($node->field_map_subtitle[$node->language][0]['safe_value'])) {
          $node->map_subtitle = $node->field_map_subtitle[$node->language][0]['safe_value'];
        }
      }
      // (field_info_title) info_title.
      if (isset($node->field_info_title)) {
        $node->info_title = NULL;
        if (isset($node->field_info_title[$node->language][0]['safe_value'])) {
          $node->info_title = $node->field_info_title[$node->language][0]['safe_value'];
        }
      }
      // (field_info_subtitle) info_subtitle.
      if (isset($node->field_info_subtitle)) {
        $node->info_subtitle = NULL;
        if (isset($node->field_info_subtitle[$node->language][0]['safe_value'])) {
          $node->info_subtitle = $node->field_info_subtitle[$node->language][0]['safe_value'];
        }
      }
      // General Info translations.
      if (!empty($node->museum_hours)) {
        foreach ($translations as $lang_key => $details) {
          if ($lang_key === 'en') {
            continue;
          }
          $node->translations[] = array(
            'language' => $lang_key,
            'museum_hours' => isset($node->field_museum_hours[$lang_key][0]['safe_value']) ? $node->field_museum_hours[$lang_key][0]['safe_value'] : '',
            'home_member_prompt_text' => isset($node->field_home_member_prompt_text[$lang_key][0]['safe_value']) ? $node->field_home_member_prompt_text[$lang_key][0]['safe_value'] : '',
            'audio_title' => isset($node->field_audio_title[$lang_key][0]['safe_value']) ? $node->field_audio_title[$lang_key][0]['safe_value'] : '',
            'audio_subtitle' => isset($node->field_audio_subtitle[$lang_key][0]['safe_value']) ? $node->field_audio_subtitle[$lang_key][0]['safe_value'] : '',
            'map_title' => isset($node->field_map_title[$lang_key][0]['safe_value']) ? $node->field_map_title[$lang_key][0]['safe_value'] : '',
            'map_subtitle' => isset($node->field_map_subtitle[$lang_key][0]['safe_value']) ? $node->field_map_subtitle[$lang_key][0]['safe_value'] : '',
            'info_title' => isset($node->field_info_title[$lang_key][0]['safe_value']) ? $node->field_info_title[$lang_key][0]['safe_value'] : '',
            'info_subtitle' => isset($node->field_info_subtitle[$lang_key][0]['safe_value']) ? $node->field_info_subtitle[$lang_key][0]['safe_value'] : '',
          );
        }
      }
      break;

    case $node->type === AICAPP_TYPE_GALLERY:
      // For v1 compliance.
      $node->title_t = $node->title;
      if (!empty($node->field_gallery_id[LANGUAGE_NONE])) {
        $node->gallery_id = $node->field_gallery_id[LANGUAGE_NONE][0]['safe_value'];
      }
      break;

    // Object node type field items, starging with the object id.
    case  AICAPP_TYPE_OBJECT:
      // For v1 compliance title_t must remain.
      $node->title_t = $node->title;
      // What is this object's gallery location?
      if (isset($node->gallery_title)) {
        // Keep property name of gallery location despite the underlying
        // property name change.
        $node->gallery_location = $node->gallery_title;
      }
      // Is this object in a gallery?
      if (isset($node->is_on_view) && !isset($node->in_gallery)) {
        $node->in_gallery = $node->is_on_view;
      }
      if (isset($node->main_reference_number)) {
        $node->reference_num = $node->main_reference_number;
      }
      // Audio Commentary field collection items.
      $node->audio_commentary = array();
      if ($fc_items = field_get_items('node', $node, 'field_audio_commentary')) {
        // Extract the field collection items.
        foreach ($fc_items as $fc_item) {
          $item = field_collection_field_get_entity($fc_item);
          $audio_id = !empty($item->field_audio_commentary_audio) ? $item->field_audio_commentary_audio[LANGUAGE_NONE][0]['target_id'] : NULL;
          $node->audio_commentary[] = array(
            'object_selector_number' => !empty($item->field_object_selector_number) ? $item->field_object_selector_number[LANGUAGE_NONE][0]['value'] : NULL,
            'audio' => $audio_id,
          );
        }
      }
      $node->highlighted_object = NULL;
      // Is this a highlighed object?
      if (isset($node->field_highlighted_object[LANGUAGE_NONE][0])) {
        $node->highlighted_object = $node->field_highlighted_object[LANGUAGE_NONE][0]['value'];
      }
      // Path to full size image.
      $node->full_image_full_path = NULL;
      if (isset($node->field_full_image)) {
        if (isset($node->field_full_image[LANGUAGE_NONE][0]['safe_value'])) {
          $node->full_image_full_path = $node->field_full_image[LANGUAGE_NONE][0]['safe_value'];
        }
      }
      // App v1 property: audio.
      $node->audio = array();
      if (isset($node->field_object_audio[LANGUAGE_NONE][0]['nid'])) {
        foreach ($node->field_object_audio[LANGUAGE_NONE] as $audiofld) {
          $node->audio[] = $audiofld['nid'];
        }
      }
      // For backward compliance, if audio is empty, but audio commentary items
      // aren't we can fill audio with the values from audio commentary.
      if (empty($node->audio) && !empty($node->audio_commentary)) {
        $node->audio = $node->audio_commentary;
      }
      // App v1 property: audio_transcript.
      $node->audio_transcript = NULL;
      if (isset($node->field_object_audio[LANGUAGE_NONE][0]['node']->field_audio_transcript[LANGUAGE_NONE][0]['safe_value'])) {
        $node->audio_transcript = $node->field_object_audio[LANGUAGE_NONE][0]['node']->field_audio_transcript[LANGUAGE_NONE][0]['safe_value'];
      }
      // App v1 property: Object selector number.
      $node->object_selector_number = NULL;
      if (isset($node->field_object_selector_number[LANGUAGE_NONE][0]['value'])) {
        $node->object_selector_number = $node->field_object_selector_number[LANGUAGE_NONE][0]['value'];
      }
      // App v1 property: Object selector number.
      $node->object_selector_numbers = array();
      if (isset($node->field_object_selector_numbers[LANGUAGE_NONE][0]['value'])) {
        foreach ($node->field_object_selector_numbers[LANGUAGE_NONE] as $object_selector) {
          $node->object_selector_numbers[] = $object_selector['value'];
        }
      }
      // If the object selctor numbers array is empty, but an integer selector
      // number exists, fill the first element of the array with the integer value.
      if (!empty($node->object_selector_number) && empty($node->object_selector_numbers)) {
        $node->object_selector_numbers[] = $node->object_selector_number;
      }
      // Artist display.
      if (!empty($node->artist_culture_place_delim)) {
        $node->artist_culture_place_delim = str_replace("\n", "\r", $node->artist_culture_place_delim);
      }
      break;

    // Tour node items, beginning with tour banner.
    case AICAPP_TYPE_TOUR:
      $node->tour_banner = NULL;
      if (isset($node->field_tour_banner[LANGUAGE_NONE][0]['value'])) {
        $node->tour_banner = $node->field_tour_banner[LANGUAGE_NONE][0]['value'];
      }
      // Tour selector field.
      $node->selector_number = NULL;
      if (isset($node->field_selector_number[LANGUAGE_NONE][0]['value'])) {
        $node->selector_number = $node->field_selector_number[LANGUAGE_NONE][0]['value'];
      }
      // Tour description field.
      $node->description = NULL;
      $node->description_html = NULL;
      if (isset($node->field_description[$node->language][0]['value'])) {
        $descriptions = field_get_items('node', $node, 'field_description');
        $a_description = array_shift($descriptions);
        $description = $a_description['value'];
        $node->description = trim(strip_tags($description));
        $node->description_html = trim($description);
      }
      // Move tour dats into a new property so it can be acessed later.
      $node->tour_dates = array();
      if (!empty($node->field_tour_dates)) {
        $node->tour_dates = $node->field_tour_dates;
      }
      // Tour Intro.
      $node->intro = NULL;
      $node->intro_html = NULL;
      if (isset($node->field_intro[$node->language][0]['value'])) {
        $intros = field_get_items('node', $node, 'field_intro');
        $an_intro = array_shift($intros);
        $intro = $an_intro['value'];
        $node->intro = trim(strip_tags($intro));
        $node->intro_html = trim($intro);
      }
      // Tour stops.
      $node->tour_stop_items = _aicapp_get_tour_stops($node);
      // Tour Duration.
      $node->tour_duration = NULL;
      if (isset($node->field_tour_duration[$node->language][0])) {
        $node->tour_duration = $node->field_tour_duration[$node->language][0]['safe_value'];
      }
      // Tour audio node id..
      $node->tour_audio = NULL;
      if (isset($node->field_tour_audio[LANGUAGE_NONE][0])) {
        $node->tour_audio = $node->field_tour_audio[LANGUAGE_NONE][0]['nid'];
      }
      // Tour categories.
      $node->category = NULL;
      $term = NULL;
      if (isset($node->field_tour_category[LANGUAGE_NONE][0])) {
        $term = taxonomy_term_load($node->field_tour_category[LANGUAGE_NONE][0]['tid']);
        $node->category = $term->name;
      }
      // Tour translations.
      foreach ($translations as $lang_key => $details) {
        if ($lang_key === 'en') {
          continue;
        }
        $translation_data = array(
          'language' => $lang_key,
          'title' => isset($node->title_field[$lang_key][0]['safe_value']) ? $node->title_field[$lang_key][0]['safe_value'] : '',
          'description' => isset($node->field_description[$lang_key][0]['safe_value']) ? trim(strip_tags($node->field_description[$lang_key][0]['safe_value'])) : '',
          'description_html' => isset($node->field_description[$lang_key][0]['safe_value']) ? $node->field_description[$lang_key][0]['safe_value'] : '',
          'intro' => isset($node->field_intro[$lang_key][0]['safe_value']) ? trim(strip_tags($node->field_intro[$lang_key][0]['safe_value'])) : '',
          'intro_html' => isset($node->field_intro[$lang_key][0]['safe_value']) ? $node->field_intro[$lang_key][0]['safe_value'] : '',
          'tour_duration' => isset($node->field_tour_duration[$lang_key][0]['safe_value']) ? $node->field_tour_duration[$lang_key][0]['safe_value'] : '',
        );
        if (is_object($term)) {
          $translation_data['category'] = isset($term->name_field[$lang_key][0]['safe_value']) ? $term->name_field[$lang_key][0]['safe_value'] : '';
        }
        $node->translations[] = $translation_data;
      }
      // App V1 - version of tour stops.
      if (isset($node->field_stops2)) {
        $node->stops = array();
        if (isset($node->field_stops2[LANGUAGE_NONE][0])) {
          $node->stops = $node->field_stops2[LANGUAGE_NONE];
        }
      }
      break;

    // Audio node field items.
    case AICAPP_TYPE_AUDIO:
      // This handles each separate audio file.
      if (isset($node->field_audio_file)) {
        $node->audio_filename = NULL;
        $node->audio_file_url = NULL;
        $node->audio_filemime = NULL;
        $node->audio_filesize = NULL;
        if (isset($node->field_audio_file[$node->language][0]['uri'])) {
          $node->audio_filename = $node->field_audio_file[$node->language][0]['filename'];
          $node->audio_file_url = _aicapp_file_create_url($node->field_audio_file[$node->language][0]['uri']);
          $node->audio_filemime = $node->field_audio_file[$node->language][0]['filemime'];
          $node->audio_filesize = $node->field_audio_file[$node->language][0]['filesize'];
        }
      }
      // Audio Transcript.
      if (isset($node->field_audio_transcript)) {
        $node->audio_transcript = NULL;
        if (isset($node->field_audio_transcript[$node->language][0]['safe_value'])) {
          $node->audio_transcript = $node->field_audio_transcript[$node->language][0]['safe_value'];
        }
      }
      // Audio Credits.
      if (isset($node->field_credits)) {
        $node->credits = NULL;
        if (isset($node->field_credits[$node->language][0]['safe_value'])) {
          $node->credits = $node->field_credits[$node->language][0]['safe_value'];
        }
      }
      // Audio Track title.
      if (isset($node->field_track_title)) {
        $node->track_title = NULL;
        if (isset($node->field_track_title[$node->language][0]['safe_value'])) {
          $node->track_title = $node->field_track_title[$node->language][0]['safe_value'];
        }
      }
      // Translations.
      foreach ($translations as $lang_key => $details) {
        if ($lang_key === 'en') {
          continue;
        }
        $node->translations[] = array(
          'language' => $lang_key,
          'title' => isset($node->title_field[$lang_key][0]['safe_value']) ? $node->title_field[$lang_key][0]['safe_value'] : '',
          'track_title' => isset($node->field_track_title[$lang_key][0]['safe_value']) ? $node->field_track_title[$lang_key][0]['safe_value'] : '',
          'audio_filename' => isset($node->field_audio_file[$lang_key][0]['filename']) ? $node->field_audio_file[$lang_key][0]['filename'] : '',
          'audio_file_url' => isset($node->field_audio_file[$lang_key][0]['uri']) ? _aicapp_file_create_url($node->field_audio_file[$lang_key][0]['uri']) : '',
          'audio_filemime' => isset($node->field_audio_file[$lang_key][0]['filemime']) ? $node->field_audio_file[$lang_key][0]['filemime'] : '',
          'audio_filesize' => isset($node->field_audio_file[$lang_key][0]['filesize']) ? $node->field_audio_file[$lang_key][0]['filesize'] : '',
          'audio_transcript' => isset($node->field_audio_transcript[$lang_key][0]['safe_value']) ? $node->field_audio_transcript[$lang_key][0]['safe_value'] : '',
          'credits' => isset($node->field_credits[$lang_key][0]['safe_value']) ? $node->field_credits[$lang_key][0]['safe_value'] : '',
        );
      }
      break;

    // Map Annotation item fields.
    case AICAPP_TYPE_MAP_ANNOTATION:
      // Description (field_annotation_description)
      if (isset($node->field_annotation_description)) {
        $node->description = NULL;
        if (isset($node->field_annotation_description[$node->language][0]['safe_value'])) {
          $node->description = $node->field_annotation_description[$node->language][0]['safe_value'];
        }
      }
      // Label (field_annotation_label)
      if (isset($node->field_annotation_label)) {
        $node->label = NULL;
        if (isset($node->field_annotation_label[$node->language][0]['safe_value'])) {
          $node->label = $node->field_annotation_label[$node->language][0]['safe_value'];
        }
      }
      // Map annontation_type (field_annotation_type)
      if (isset($node->field_annotation_type)) {
        $node->annotation_type = NULL;
        if (isset($node->field_annotation_type[LANGUAGE_NONE][0]['value'])) {
          $type_field = field_info_field('field_annotation_type');
          $label = $type_field['settings']['allowed_values'][$node->field_annotation_type[LANGUAGE_NONE][0]['value']];
          $node->annotation_type = $label;
        }
      }
      // Map Annotation translations.
      foreach ($translations as $lang_key => $details) {
        if ($lang_key === 'en') {
          continue;
        }
        $node->translations[] = array(
          'language' => $lang_key,
          'title' => isset($node->title_field[$lang_key][0]['safe_value']) ? $node->title_field[$lang_key][0]['safe_value'] : '',
          'label' => isset($node->field_annotation_label[$lang_key][0]['safe_value']) ? $node->field_annotation_label[$lang_key][0]['safe_value'] : '',
        );
      }
      break;

    // Exhibtion item fields.
    case AICAPP_TYPE_EXHIBITION:
      if (!empty($node->field_imported_object_id)) {
        $node->exhibition_id = $node->field_imported_object_id[LANGUAGE_NONE][0]['safe_value'];
      }
      // Remove some properties that are not needed for exhibitions.
      unset($node->status, $node->nid, $node->type);
      break;

  }
  // Map Floors.
  if (isset($node->field_floor_map)) {
    // Set default floors to an empty array.
    $node->floors = array();
    if ($fc_items = field_get_items('node', $node, 'field_floor_map')) {
      // Extract the field collection items.
      $i = 0;
      foreach ($fc_items as $fc_item) {
        $item = field_collection_field_get_entity($fc_item);
        $floor_plan = !empty($item->field_floor_map_file) ? _aicapp_file_create_url($item->field_floor_map_file[LANGUAGE_NONE][0]['uri']) : NULL;
        $node->floors['map_floor' . $i] = array(
          'label' => !empty($item->field_floor_label) ? $item->field_floor_label[LANGUAGE_NONE][0]['value'] : NULL,
          'floor_plan' => $floor_plan,
          'anchor_pixel_1' => !empty($item->field_floor_map_anchor_pixel) ? $item->field_floor_map_anchor_pixel[LANGUAGE_NONE][0]['value'] : NULL,
          'anchor_pixel_2' => !empty($item->field_floor_map_anchor_pixel_2) ? $item->field_floor_map_anchor_pixel_2[LANGUAGE_NONE][0]['value'] : NULL,
          'anchor_location_1' => !empty($item->field_floor_anchor_geolocation) ? $item->field_floor_anchor_geolocation[LANGUAGE_NONE][0]['value'] : NULL,
          'anchor_location_2' => !empty($item->field_floor_anchor_geolocation_2) ? $item->field_floor_anchor_geolocation_2[LANGUAGE_NONE][0]['value'] : NULL,
        );
        $i++;
      }
    }
  }
  // Final clean-up. Unset language, and the rest of the saved properties.
  $properties += array('data', 'entity_translation_handler_id');
  foreach ($properties as $property) {
    if (!in_array($property, $to_skip) && isset($node->{$property})) {
      unset($node->{$property});
    }
  }
}

/**
 * Get gallery count.
 */
function aicapp_gallery_count() {
  $count = t('None found');
  $options = array('limit' => 1);
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_GALLERIES;
  // Query the data aggregrator.
  $results = _aicapp_fetch_data($url, $options, TRUE);
  if (!empty($results['pagination'])) {
    $count = $results['pagination']['total'];
  }
  $result = db_query("SELECT COUNT(nid) as count FROM {node} WHERE type = :s AND status = 1", array(':s' => AICAPP_TYPE_GALLERY));
  $galleries = $result->fetchObject();
  return '<div class="callout"><p>' . t('Galleries in Data Aggregator: ' . $count) . '<br />' . t('Galleries in Drupal: ' . $galleries->count) . '</p></div>';
}

/**
 * Hook_form_submit() implementation
 * Used to multi-load in the galleries.  Objects don't use this, they are loaded one at a time via search.
 */
function aicapp_loadgalleries_form_submit($form, &$form_state) {
  $options = array('limit' => 1000);
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_GALLERIES;
  // Query the data aggregrator.
  $results = _aicapp_fetch_data($url, $options);
  if (empty($results)) {
    return;
  }
  // first delete any old galleries not in data hub anymore
  $node_galleries = node_load_multiple(array(), array('type' => AICAPP_TYPE_GALLERY, 'status' => 1));
  try {
    // Now loop through the $result JSON.
    foreach ($results as $gallery) {
      // Create new or update existing gallery node.
      aicappSaveNode($gallery, AICAPP_TYPE_GALLERY);
    }
    foreach ($node_galleries as $node) {
      // Look for the Drupal gallery node in the data hub gallery.
      $match = FALSE;
      foreach ($results as $item) {
        if ($item['id'] == $node->field_gallery_id[LANGUAGE_NONE][0]['value']) {
          $match = TRUE;
        }
      }
      // this would work if we had php 5.5 installed on server.
      // $key = array_search($node->field_gallery_id[LANGUAGE_NONE][0]['value'], array_column($result['response']['docs'], 'gallery_id'));
      if (!$match) {
        // not found in data hub, delete the Drupal gallery
        node_delete($node->nid);
      }
    }
    drupal_set_message(t("Gallery data has been loaded!"), 'status');
  }
  catch (Exception $e) {
    drupal_set_message(t("An error occurred: " . $e), 'error');
  }
}

/**
 * Performs the actual node_save().
 * Either creates a new object node or updates the existing one.
 * expects an $object array from data hub lookup.
 */
function aicappSaveNode($object, $type, $status = 0) {
  // Prepare for node_save().
  if ($type == AICAPP_TYPE_OBJECT) {
    // Check for nid by data hub object_id.
    $qres = db_query("SELECT entity_id
                 FROM {field_data_field_object_id}
                 WHERE field_object_id_value = :id",
        array(':id' => $object['id'])
    );
    $record = $qres->fetchObject();
  }
  elseif ($type == AICAPP_TYPE_GALLERY) {
    if (!empty($object['id'])) {
      // Check for nid by data hub gallery_id.
      $qres = db_query("SELECT entity_id
                   FROM {field_data_field_gallery_id}
                   WHERE field_gallery_id_value = :id",
          array(':id' => $object['id'])
      );
    }
    $record = $qres->fetchObject();
  }
  if (!empty($record->entity_id)) {
    // We have an existing node, so load its data.
    $node = node_load($record->entity_id);
  }
  else {
    // Create a new node.
    $node = new stdClass();
    $node->title = $object['title'];
    $node->type = $type;
    $node->language = LANGUAGE_NONE;
    $node->uid = 1;
    $node->promote = 0;
    $node->comment = 0;
    $node->created = time();
  }
  // Creating an artwork object node.
  if ($type == AICAPP_TYPE_OBJECT) {
    $node->field_object_id[$node->language][0]['value'] = $object['id'];
    $node->field_reference_num[$node->language][0]['value'] = $object['main_reference_number'];
    // The 'gallery_locaiton' property seems to have changed to just 'gallery'.
    $node->field_gallery_location[$node->language][0]['value'] = $object['gallery_title'];
    // Image server URL begins like this for both thumbnail and full.
    $image_id = !empty($object['image_id']) ? $object['image_id'] : NULL;
    if (!empty($image_id)) {
      // Thumbnail.
      $thumbnail_url = _aicapp_get_image_crop($image_id, array('default' => 'thumbnail'));
      $node->field_thumbnail_image[$node->language][0]['value'] = $thumbnail_url;
      // Large size image.
      $large_url = _aicapp_get_image_crop($image_id, array('default' => 'large'));
      $node->field_large_image[$node->language][0]['value'] = $large_url;
      // Full Size images
      $full_url = _aicapp_get_image_crop($image_id, array('default' => 'full'));
      $node->field_full_image[$node->language][0]['value'] = $full_url;
    }
    // Set node to unbpublished.
    $node->status = $status;
    // Set whether the object is in a gallery, or not.
    if (!empty($object['is_on_view'])) {
      $node->field_in_gallery[$node->language][0]['value'] = $object['is_on_view'];
    }
    else {
      $node->field_in_gallery[$node->language][0]['value'] = 0;
    }
  }
  elseif ($type == AICAPP_TYPE_GALLERY) {
    if (isset($object['title'])) {
      $node->title = $object['title'];
    }
    if (isset($object['id'])) {
      $node->field_gallery_id[$node->language][0]['value'] = $object['id'];
    }
    if (isset($object['number'])) {
      $node->field_gallery_number[$node->language][0]['value'] = $object['number'];
    }
    if (!empty($object['latitude']) && !empty($object['longitude'])) {
      $node->field_location[$node->language][0]['value'] = $object['latitude'] . ',' . $object['longitude'];
    }
    if (isset($object['floor'])) {
      $node->field_floor[$node->language][0]['value'] = $object['floor'];
      // Set the floor reference field.
      // First find the entity to reference.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'field_collection_item');
      $query->propertyCondition('field_name', 'field_floor_map');
      // Sometimes Level 0 is known as LL.
      $floors = array($object['floor']);
      if (strtolower($object['floor']) === 'll') {
        $floors[] = 0;
      }
      $query->fieldCondition('field_floor_label', 'value', $floors, 'IN');
      $query->range(0, 1);
      $result = $query->execute();
      if (!empty($result['field_collection_item'])) {
        $floor_reference = key($result['field_collection_item']);
        $node->field_floor_reference[$node->language][0]['target_id'] = $floor_reference;
      }
    }
    // Set node to published.
    $node->status = 1;
  }
  try {
    node_save($node);
    return $node->nid;
  }
  catch (Exception $e) {
    drupal_set_message(t("An error occurred, did not complete node save."), 'error');
  }
}

/**
 * implement hook_form_alter()
 * Alter the node edit form - for editing objects, to insert the interactive Google Map.  We allow them to place a pin on the map
 * to determine the location of the object. The map page is an iframe, with it's own form & javascript.  The values are captured and
 * sent back to the node edit form page.
 */
function aicapp_form_alter(&$form, &$form_state, $form_id) {
  // Exit from form altering in the following cases: The sting *_node_form is
  // not present in $form_id, the '#entity_type' property is not set in $form,
  // or the '#entity_type' property is not equal to 'node'.
  if (!strstr($form_id, '_node_form')
  || !isset($form['#entity_type']) || $form['#entity_type'] !== 'node') {
    // Exit here without altering anything.
    return;
  }
  // Alter the setup form
  module_load_include('inc', 'aicapp', 'includes/aicapp.form.alter');
  // Run the form alter routine.
  _aicapp_form_alter($form, $form_state, $form_id);
}

/**
 * Helper function to make sure title field has default values when changing
 * from no language.
 */
function aicapp_setup_afterbuild($form, &$form_state) {
  // Load the include file.
  module_load_include('inc', 'aicapp', 'includes/aicapp.form.alter');
  // Run after build process
  _aicapp_form_afterbuild($form, $form_state);
  return $form;
}

/**
 *  Implements hook_node_view().
 *
 *  We do a data hub field lookup here to view the object with the complete data.
 *  Just attach the data hub data to the $node object for viewing.
 */
function aicapp_node_view($node, $view_mode, $langcode) {
  // Only request data from data hub if viewing the full node. Otherwise, when
  // this function is called for many objects/galleries over a short period of
  // time, the data hub issues a "too many requests" error.
  if ($view_mode !== 'full') {
    return;
  }
  if ($node->type == AICAPP_TYPE_OBJECT && $node->field_object_id) {
    $object_id = $node->field_object_id[LANGUAGE_NONE][0]['value'];
    if (!empty($object_id)) {
      // An object ID was passed and is not empty, query based on object ID.
      $options = array(
        'ids' => array($object_id),
        'limit' => 1,
      );
      // Query the data aggregrator.
      $results = _aicapp_fetch_data(AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS, $options);
      if (!empty($results[0])) {
        $w = 10;
        foreach ($results[0] as $key => $val) {
          if ($key === 'date_range') {
            $val = implode('-', $val);
          }
          $node->content[$key] = array(
            '#markup' => aicapp_field_markup($key, $val),
            '#weight' => $w++,
          );
        }
      }
    }
  }
  if ($node->type == AICAPP_TYPE_GALLERY) {
    if (!empty($node->field_gallery_id[LANGUAGE_NONE])) {
      $gallery_id = $node->field_gallery_id[LANGUAGE_NONE][0]['safe_value'];
    }
    else {
      $gallery_id = 0;
    }
    if (!empty($gallery_id)) {
      $options = array(
        'limit' => 1,
        'ids' => array($gallery_id),
      );
      $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_GALLERIES;
      // Query the data aggregrator.
      $results = _aicapp_fetch_data($url, $options);
      if (!empty($result[0])) {
        $w = 10;
        foreach ($result[0] as $key => $val) {
          $node->content[$key] = array(
            '#markup' => aicapp_field_markup($key, $val),
            '#weight' => $w++,
          );
        }
      }
    }
  }
}

/**
 * Field markup helper function.
 */
function aicapp_field_markup($key, $value) {
  if (is_array($value)) {
    $value = implode(', ', $value);
  }

  $markup = '<div class="field solr-field field-label-inline clearfix"><div class="field-label">' . $key . ': &nbsp;';
  $markup .= '</div><div class="field-items"><div class="field-item">' . $value . '</div></div></div>';
  return $markup;
}

/**
 *  implement hook_form()
 */
function aicapp_search_form($form_state = array()) {
  $form['intro'] = array(
    '#markup' => t('<p><a href="/node/add/object"><span class="button form-submit">Add a custom object</span></a><br /><b>Add via data hub</b><br />Use the form below to search the external Art Institute database (data hub) for an object you wish
        to add. If the object is found to already be in our system, this tool can be used to update the existing object.</p>'),
  );
  $form['search_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Search by Title'),
    '#size' => 12,
    '#default_value' => isset($form_state['values']['search_term']) ? $form_state['values']['search_term'] : '',
  );
  $form['search_ref_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Search by Reference Number'),
    '#size' => 12,
    '#default_value' => isset($form_state['values']['search_term']) ? $form_state['values']['search_term'] : '',
  );
  $form['search_object_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Search by Object ID'),
    '#description' => t('To enter multiple IDs, separate IDs with commas, i.e. 159135, 159135 - no comma at the end.<br /><br />'),
    '#size' => 12,
    '#default_value' => isset($form_state['values']['search_term']) ? $form_state['values']['search_term'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
}

/**
 *  implement hook_form_validate()
 */
function aicapp_search_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['search_title'])) {
    if (strlen($form_state['values']['search_title']) < 3) {
      form_set_error('search_title', 'Please enter more than 2 characters');
    }
  }
  if (!empty($form_state['values']['search_ref_num'])) {
    if (strlen($form_state['values']['search_ref_num']) < 4) {
      form_set_error('search_ref_num', 'Please enter more than 3 characters');
    }
  }
  if (!empty($form_state['values']['search_object_id'])) {
    // regular expression to allow for one number/id value or more with commas between and not the end
    $regex = '/^\d+(?:,\d+)*$/';
    // collecting value, removing spaces
    $objectValue = preg_replace('/\s+/', '', $form_state['values']['search_object_id']);
    if (preg_match_all($regex, $objectValue, $matches, PREG_SET_ORDER, 0)) {
      // great, value is valid
    }
    else {
      form_set_error('search_object_id', 'Object ID(s) should be a numeric value. If providing more than one ID, add a comma between IDs. Make sure there is no comma at the end.');
    }
  }
}

/**
 *  implement hook_form_submit()
 */
function aicapp_search_form_submit($form, &$form_state, $start = 0, $rows = 50) {
  global $base_path;
  $api_endpoint = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS . '/search';
  // An object ID was passed and is not empty, query based on object ID.
  $options = array(
    'size' => $rows,
    'from' => $start,
    'search_type' => 'search_title',
  );
  $search_term_array = array();
  $object_ids;
  // determining if searching by title, ref number, or id
  if (!empty($form_state['values']['search_ref_num'])) {
    $search_term = $form_state['values']['search_ref_num'];
    $options['search_type'] = 'main_reference_number';
  }
  elseif (!empty($form_state['values']['search_object_id'])) {
    // collecting value, removing spaces
    $search_term = preg_replace('/\s+/', '', $form_state['values']['search_object_id']);
    // collecting IDs for add/update all function
    $object_ids = $search_term;
    // When searching by object ID, we do not need to use the /search endpoint.
    $api_endpoint = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS;
    $options['limit'] = 1;
    // The following are not used for the artworks endpoint.
    unset($options['size']);
    unset($options['from']);
  }
  elseif (!empty($form_state['values']['search_title'])) {
    $search_term = $form_state['values']['search_title'];
  }
  else {
    drupal_set_message('Problem running search.', 'error');
    return;
  }

  $search_term_array = explode(",", $search_term);
  foreach ($search_term_array as $key => $search_term) {
    $collect = array();
    if (!empty($form_state['values']['search_object_id'])) {
      $options['ids'] = array($search_term);
    }
    elseif ($options['search_type'] === 'main_reference_number') {
      $options['http'] = 'POST';
      $options['query'] = json_encode(array(
        'type' => 'artworks',
        'query' => array(
          'term' => array(
            'main_reference_number' => $search_term,
          )
        )
      ));
    }
    else {
      // This is a search by title. Use fuzziness to increase result set.
      $options['http'] = 'POST';
      $options['query'] = json_encode(array(
        'type' => 'artworks',
        'query' => array(
          'match' => array(
            'title' => array(
              'query' => $search_term,
              'fuzziness' => 'AUTO',
            ),
          )
        )
      ));
    }

    // Query the data aggregrator.
    $results = _aicapp_fetch_data($api_endpoint, $options, TRUE);
    if (!empty($results['data'])) {
      $result_count = !empty($results['pagination']['total']) ? $results['pagination']['total'] : count($results['data']);
      $collect[] = '<p>' . $result_count . ' objects found. Showing ' . $start . ' - ' . ($start + $rows) . ' | ';
      if ($start > 0) {
        $start = $start - $rows;
        $collect[] = '<a href="objects/search/' . ($start + $rows) . '">Prev page</a>';
      }
      $collect[] = ' <a href="objects/search/' . ($start + $rows) . '">Next page</a>';
      $collect[] = '</p>';
      foreach ($results['data'] as $doc) {
        $collect[] = aicapp_field_markup('object_id', $doc['id']);
        $collect[] = aicapp_field_markup('title', $doc['title']);
        if (empty($doc['main_reference_number'])) {
          // Get this value from the data aggregator.
          $doc['main_reference_number'] = _aicapp_get_reference_id(NULL, $doc['id']);
        }
        $collect[] = aicapp_field_markup('main_reference_number', $doc['main_reference_number']);
        $collect[] = '<a class="button small" href="' . $base_path . 'objects/object_add/' . $doc['id'] . '">Add or Update Object</a>';
      }
    }
    $output = implode(' ', $collect);

    if (!empty($output)) {
      drupal_set_message($output, 'status');
    }
    else {
      drupal_set_message('You entered <em>' . $search_term . '</em>, no matching object was found.', 'status');
      unset($search_term_array[$key]);
    }
  }

  // display update all button only if there's more than one object
  $countArray = count($search_term_array);
  if ($countArray > 1) {
    drupal_set_message('<a class="button updateObjects" href="' . $base_path . 'objects/object_add/' . $object_ids . '">Add or Update All</a>');
  }
}

/**
 * Implements hook_cron() function
 * Set up nightly cron job.
 */
function aicapp_cron() {
  $current = date('G');
  // Run the form submit functions.
  // At 10pm - assuming Cron is running every hour.
  if ($current == 22) {
    $fm = array();
    $fm2 = array();
    aicapp_loadgalleries_form_submit($fm, $fm2);
  }
  // At 11pm - assuming Cron is running every hour.
  if ($current == 23) {
    $fm = array();
    $fm2 = array();
    aicapp_objectGalleryStatus_submit($fm, $fm2);
  }
  // At 12pm - assuming Cron is running every hour.
  if ($current == 24) {
    $fm = array();
    $fm2 = array();
    aicapp_gendata_form_submit($fm, $fm2);
  }
  $now = time();
  $last = variable_get('aicapp_remote_entities_imported', 0);
  // At 1am - assuming Cron is running every hour, but only 1 per 24 hours.
  if ($now > ($last + 86400)) {
    module_load_include('inc', 'aicapp', 'includes/aicapp.admin');
    $fm = array();
    $fm2 = array();
    aicapp_load_remote_form_submit($fm, $fm2);
    variable_set('aicapp_remote_entities_imported', $now);
  }
}

/**
 * Create a text file that triggers the Apache cron job to sync the files
 * with external system.
 */
function aicapp_file_sync_form_submit() {
  $filename = 'trigger/file_sync_trigger.txt';
  if (!file_exists($filename)) {
    $file = fopen($filename, 'w');
    if ($file) {
      drupal_set_message('The file-sync trigger was generated. The system will now sync files.', 'status');
    }
    else {
      drupal_set_message('Unable to create the file-sync trigger.', 'error');
    }
  }
  else {
    drupal_set_message('The file-sync trigger has been generated.', 'status');
  }
}

/**
 * Rewrite the object properties of a few specific properties.
 */
function _aicapp_remote_object_properties(&$object, $item, $options = array()) {
  $defaults = array(
    '#skip' => array('provenance_text', 'exhibition_history'),
  );
  $options += $defaults;
  $object_props_to_skip = $options['#skip'];
  foreach ($item as $key => $val) {
    if ($key === 'date_range') {
      $val = implode('-', $val);
    }
    elseif ($key === 'id') {
      $key = 'object_id';
      // Also perserve original
      $object->id = $val;
    }
    elseif ($key === 'is_on_view') {
      $key = 'in_gallery';
    }
    elseif ($key === 'artist_display') {
      $key = 'artist_culture_place_delim';
    }
    if (!in_array($key, $object_props_to_skip)) {
      $object->{$key} = $val;
    }
  }
  return $object;
}

/**
 * Implements hook_node_presave().
 *
 * Warn user if attached stops on the tour don't have location values.  They
 * won't be sent to the app without them.
 */
function aicapp_node_presave($node) {
  // A general flag to indicate there are changes to be published.
  variable_set('aicapp_pending', 1);
  if ($node->type === AICAPP_TYPE_TOUR) {
    _aicapp_check_for_tour_problems($node);
    _aicapp_update_image_fields($node);
  }
  elseif ($node->type === AICAPP_TYPE_OBJECT) {
    if (!empty($node->skip_hooks_presave)) {
      return;
    }
    _aicapp_update_image_fields($node);
    // Check if the object has a full size image in data hub.
    if (isset($node->field_object_id[LANGUAGE_NONE][0]['value'])) {
      $object_id = $node->field_object_id[LANGUAGE_NONE][0]['value'];
      if (!empty($object_id)) {
        // An object ID was passed and is not empty, query based on object ID.
        $options = array(
          'ids' => array($object_id),
          'limit' => 1,
        );
        // Query the data aggregrator.
        $results = _aicapp_fetch_data(AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS, $options);
        if (empty($results[0]) || empty($results[0]['image_id'])) {
          drupal_set_message('The object ' . $node->title . ' does not have a preferred image id the data hub.', 'warning');
        }
      }
    }
    // Also if an object is saved and is set to be published, but has no audio,
    // set it back to unpublished and give warning.
    if (!field_get_items('node', $node, 'field_audio_commentary')) {
      $node->status = 0;
      drupal_set_message('The object ' . $node->title . ' has no audio files attached, and has been unpublished.', 'warning');
    }
  }
}

/**
 * Update image fields if a local has been uploaded.
 */
function _aicapp_update_image_fields(&$node, $image_id = NULL) {
  $image_fields = array(
    'field_thumbnail_image' => 'field_thumbnail_image_crop',
    'field_large_image' => 'field_large_image_crop',
    'field_full_image' => NULL,
  );
  $clear_crops = FALSE;
  // Look at original to see if there is a newly uploaded image, and if so
  // remove any pre-existing crop values.
  $original = !empty($node->original) ? $node->original : $node;
  if (!empty($node->field_image[LANGUAGE_NONE]) && !empty($original->field_image[LANGUAGE_NONE])
    && $node->field_image[LANGUAGE_NONE][0]['fid'] !== $original->field_image[LANGUAGE_NONE][0]['fid']) {
    $clear_crops = TRUE;
  }
  foreach ($image_fields as $field => $crop_field) {
    // Check whether to clear crops.
    if ($clear_crops && $crop_field) {
      unset($node->$crop_field[LANGUAGE_NONE]);
    }
    if (!isset($node->{$field})) {
      continue;
    }
    elseif (empty($node->field_image[LANGUAGE_NONE])) {
      // No image has uploaded to this node. If the host node is an artwork
      // object and this field has no value, attempt to fill the field with
      // an image from the data hub.
      if (empty($image_id)) {
        $image_id = _aicapp_get_image_id($node);
      }
      if (!empty($image_id)) {
        $type = 'thumbnail';
        if ($field === 'field_large_image') {
          $type = 'large';
        }
        elseif ($field === 'field_full_image') {
          $type = 'full';
        }
        $node->{$field}[LANGUAGE_NONE][0]['value'] = _aicapp_get_image_crop($image_id, array('default' => $type));
      }
      continue;
    }
    // An uploaded image is present, this will fill a field with a URL that
    // points to a styled/cropped version of the image.
    $image_file = file_load($node->field_image[LANGUAGE_NONE][0]['fid']);
    if (!$image_file) {
      continue;
    }
    // Choose which image style to use.
    elseif ($field === 'field_thumbnail_image') {
      $url = _aicapp_file_create_url($image_file->uri, 'thumbnail_one_twelve');
    }
    elseif ($field === 'field_large_image') {
      $url = _aicapp_file_create_url($image_file->uri, 'large_six_hundred');
    }
    elseif ($field === 'field_full_image') {
      $url = _aicapp_file_create_url($image_file->uri);
    }
    // Path to cropped locally stored image goes here.
    $node->{$field}[LANGUAGE_NONE][0]['value'] = $url;
  }
}

/**
 * Return a object id from the data hub, given a object node.
 */
function _aicapp_get_image_id($object) {
  $image_ids = &drupal_static(__FUNCTION__);
  if (is_object($object) && !empty($object->nid)) {
    $entity = entity_metadata_wrapper('node', $object);
    $object_id = $entity->field_object_id->value();
    $image_ids = array($object_id => '');
  }
  if (empty($object_id)) {
    return;
  }
  elseif (!empty($image_ids[$object_id])) {
    if ($update) {
      // @TODO
    }
    return $image_ids[$object_id];
  }
  $options = array(
    'fields' => 'id,image_id',
    'ids' => implode(',', array_keys($image_ids)),
  );
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS;
  // Query the data aggregrator.
  $results = _aicapp_fetch_data($url, $options);
  if (empty($results)) {
    return;
  }
  foreach ($results as $key => $values) {
    if (!empty($values['image_id'])) {
      $image_ids[$values['id']] = $values['image_id'];
    }
  }
  return isset($image_ids[$object_id]) ? $image_ids[$object_id] : NULL;
}

/**
 * Return a object reference id from the data hub, given a object node.
 */
function _aicapp_get_reference_id($object, $object_id = NULL) {
  $reference_ids = &drupal_static(__FUNCTION__);
  if (empty($object) && !empty($object_id)) {
    // Check for nid by data hub object_id.
    $qres = db_query("SELECT entity_id
                 FROM {field_data_field_object_id}
                 WHERE field_object_id_value = :id",
        array(':id' => $object_id)
    );
    $record = $qres->fetchObject();
    if (!empty($record->entity_id)) {
      // We have an existing node, so load its data.
      $object = node_load($record->entity_id);
    }
  }
  if (is_object($object) && !empty($object->nid)) {
    $entity = entity_metadata_wrapper('node', $object);
    $reference_num = $entity->field_reference_num->value();
    $object_id = $entity->field_object_id->value();
    $reference_ids = array($object_id => $reference_num);
  }
  if (empty($reference_num) && empty($object_id)) {
    return;
  }
  elseif (!empty($reference_ids[$object_id])) {
    if ($update) {
      // @TODO
    }
    return $reference_ids[$object_id];
  }
  $options = array(
    'fields' => 'id,main_reference_number',
    'ids' => $object_id,
  );
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS;
  // Query the data aggregrator.
  $results = _aicapp_fetch_data($url, $options);
  if (empty($results)) {
    return;
  }
  foreach ($results as $key => $values) {
    if (!empty($values['main_reference_number'])) {
      $reference_ids[$values['id']] = $values['main_reference_number'];
    }
  }
  return isset($reference_ids[$object_id]) ? $reference_ids[$object_id] : NULL;
}

/**
 * Replacement for file_create_url.
 */
function _aicapp_file_create_url($uri, $preset = NULL) {
  if ($preset) {
    return _aicapp_image_url($preset, $uri);
  }
  // Allow the URI to be altered, e.g. to serve a file from a CDN or static
  // file server.
  drupal_alter('file_url', $uri);

  $scheme = file_uri_scheme($uri);
  if (!$scheme) {
    // Allow for:
    // - root-relative URIs (e.g. /foo.jpg in http://example.com/foo.jpg)
    // - protocol-relative URIs (e.g. //bar.jpg, which is expanded to
    //   http://example.com/bar.jpg by the browser when viewing a page over
    //   HTTP and to https://example.com/bar.jpg when viewing a HTTPS page)
    // Both types of relative URIs are characterized by a leading slash, hence
    // we can use a single check.
    if (drupal_substr($uri, 0, 1) == '/') {
      return $uri;
    }
    else {
      // If this is not a properly formatted stream, then it is a shipped file.
      // Therefore, return the urlencoded URI with the base URL prepended.
      return $GLOBALS['base_url'] . '/' . drupal_encode_path($uri);
    }
  }
  elseif ($scheme == 'http' || $scheme == 'https') {
    // Check for HTTP so that we don't have to implement getExternalUrl() for
    // the HTTP wrapper.
    return $uri;
  }
  else {
    // Intercept the public stream and use a config value.
    if ($scheme === 'public') {
      $replace = AICAPP_CURRENT_SERVER_FQDM . '/';
      $file_path = variable_get('aicapp_file_public_path', conf_path() . '/files');
      $replace .= $file_path;
      $uri = str_replace('public://', '', $uri);
      $url = $replace . '/' . drupal_encode_path($uri);
      return $url;
    }
    // Attempt to return an external URL using the appropriate wrapper.
    elseif ($wrapper = file_stream_wrapper_get_instance_by_uri($uri)) {
      return $wrapper->getExternalUrl();
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Replacement for image_style_url.
 */
function _aicapp_image_url($style_name, $path) {
  $uri = image_style_path($style_name, $path);

  // The passed-in $path variable can be either a relative path or a full URI.
  $original_uri = file_uri_scheme($path) ? file_stream_wrapper_uri_normalize($path) : file_build_uri($path);

  // The token query is added even if the 'image_allow_insecure_derivatives'
  // variable is TRUE, so that the emitted links remain valid if it is changed
  // back to the default FALSE.
  // However, sites which need to prevent the token query from being emitted at
  // all can additionally set the 'image_suppress_itok_output' variable to TRUE
  // to achieve that (if both are set, the security token will neither be
  // emitted in the image derivative URL nor checked for in
  // image_style_deliver()).
  $token_query = array();
  if (!variable_get('image_suppress_itok_output', FALSE)) {
    $token_query = array(IMAGE_DERIVATIVE_TOKEN => image_style_path_token($style_name, $original_uri));
  }

  // If not using clean URLs, the image derivative callback is only available
  // with the query string. If the file does not exist, use url() to ensure
  // that it is included. Once the file exists it's fine to fall back to the
  // actual file path, this avoids bootstrapping PHP once the files are built.
  if (!variable_get('clean_url') && file_uri_scheme($uri) == 'public' && !file_exists($uri)) {
    $directory_path = file_stream_wrapper_get_instance_by_uri($uri)->getDirectoryPath();
    return url($directory_path . '/' . file_uri_target($uri), array('absolute' => TRUE, 'query' => $token_query));
  }

  $file_url = _aicapp_file_create_url($uri);
  // Append the query string with the token, if necessary.
  if ($token_query) {
    $file_url .= (strpos($file_url, '?') !== FALSE ? '&' : '?') . drupal_http_build_query($token_query);
  }

  return $file_url;
}

/**
 * Prepare a URL to a cropped remote image.
 */
function _aicapp_get_image_crop($image_id, $crop_values = array()) {
  $image_ids = &drupal_static(__FUNCTION__);
  $defaults = array(
    'default' => 'thumbnail',
    'presets' => array(
      'thumbnail' => array(
        'iiif_size' => variable_get('aicapp_image_thumb_crop', '!112,112'),
        'region' => 'full',
        'x' => 0,
        'x1' => 112,
        'y' => 0,
        'y2' => 112,
        'h' => 112,
        'w' => 112,
      ),
      'large' => array(
        'iiif_size' => variable_get('aicapp_image_large_crop', '!800,800'),
        'region' => 'full',
        'x' => 0,
        'x1' => 800,
        'y' => 0,
        'y2' => 800,
        'h' => 800,
        'w' => 800,
      ),
      'full' => array(
        'iiif_size' => 'full',
        'region' => 'full',
      ),
    ),
    'region' => AICAPP_IMAGE_CROP_REGION,
    'quality' => AICAPP_IMAGE_CROP_QUALITY,
    'filename' => AICAPP_IMAGE_CROP_FORMAT,
    'server' => AICAPP_IMAGE_SERVER,
    'rotation' => AICAPP_IMAGE_CROP_ROTATION,
  );
  $crop_values += $defaults;

  if (empty($image_id)) {
    return;
  }
  elseif (!empty($crop_values['default']) && isset($image_ids[$image_id]) && !empty($image_ids[$image_id][$crop_values['default']])) {
    return $image_ids[$image_id][$crop_values['default']];
  }

  $preset = !empty($crop_values['presets'][$crop_values['default']])
         ? $crop_values['presets'][$crop_values['default']]
         : $crop_values['presets']['thumbnail'];

  // If actual crop values were passed, use those intead of presets.
  if (isset($crop_values['x1']) && isset($crop_values['y1'])
    && isset($crop_values['h']) && isset($crop_values['w'])) {
    // @TODO to use a percentage we need the full width and heigth of the source image.
    // {scheme}://{server}{/prefix}/{identifier}/info.json
    // Convert to a percentage using the following formula:
    $percentages['x'] = round($crop_values['x1'] / $preset['w'], 3) * 100;
    $percentages['y'] = round($crop_values['y1'] / $preset['h'], 3) * 100;
    $percentages['w'] = round(($crop_values['x2'] - $crop_values['x1']) / $preset['w'], 3) * 100;
    $percentages['h'] = round(($crop_values['y2'] - $crop_values['y1']) / $preset['h'], 3) * 100;
    $preset['region'] = $crop_values['x1'] . ',' . $crop_values['y1'] . ',' . $crop_values['w'] . ',' . $crop_values['h'];
  }
  // Build a dynamic path to the image using the Image Server URL and
  // the image ID using the following format:
  // {scheme}://{server}{/prefix}/{identifier}/{region}/{size}/{rotation}/{quality}.{format}
  // Build a path to the thumbnail image.
  $url = $crop_values['server'] . '/' . $image_id . '/';
  // Here the region and size of the crop are applied. Region options are:
  // full	The complete image is returned, without any cropping.
  // square	The region is defined as an area where the width and height are both equal to the length of the shorter dimension of the complete image. The region may be positioned anywhere in the longer dimension of the image content at the server’s discretion, and centered is often a reasonable default.
  // x,y,w,h	The region of the full image to be returned is specified in terms of absolute pixel values. The value of x represents the number of pixels from the 0 position on the horizontal axis. The value of y represents the number of pixels from the 0 position on the vertical axis. Thus the x,y position 0,0 is the upper left-most pixel of the image. w represents the width of the region and h represents the height of the region in pixels.
  // pct:x,y,w,h	The region to be returned is specified as a sequence of percentages of the full image’s dimensions, as reported in the image information document. Thus, x represents the number of pixels from the 0 position on the horizontal axis, calculated as a percentage of the reported width. w represents the width of the region, also calculated as a percentage of the reported width. The same applies to y and h respectively. These may be floating point numbers.
  $url .= $preset['region'] . '/';
  // Size "determines the dimensions to which the extracted region is to be scaled."
  // Size options are:
  // max	The image or region is returned at the maximum size available, as indicated by maxWidth, maxHeight, maxArea in the profile description. This is the same as full if none of these properties are provided.
  // w,	The image or region should be scaled so that its width is exactly equal to w, and the height will be a calculated value that maintains the aspect ratio of the extracted region.
  // ,h	The image or region should be scaled so that its height is exactly equal to h, and the width will be a calculated value that maintains the aspect ratio of the extracted region.
  // pct:n	The width and height of the returned image is scaled to n% of the width and height of the extracted region. The aspect ratio of the returned image is the same as that of the extracted region.
  // w,h	The width and height of the returned image are exactly w and h. The aspect ratio of the returned image may be different than the extracted region, resulting in a distorted image.
  // !w,h	The image content is scaled for the best fit such that the resulting width and height are less than or equal to the requested width and height. The exact scaling may be determined by the service provider, based on characteristics including image quality and system performance. The dimensions of the returned image content are calculated to maintain the aspect ratio of the extracted region.
  $url .= $preset['iiif_size'] . '/';
  // Rotation is the "The degrees of clockwise rotation from 0 up to 360."
  // "A leading exclamation mark (“!n”) indicates that the image should be
  // mirrored by reflection on the vertical axis before any rotation is applied."
  $url .= $crop_values['rotation'] . '/';
  // Quality "determines whether the image is delivered in color, grayscale or
  // black and white." Options are color, gray, bitonal, default.
  $url .= $crop_values['quality'] . '.';
  // Filename options: jpg tif	png	gif jp2 pdf webp
  $url .= $crop_values['filename'];
  $image_ids[$image_id][$crop_values['default']] = $url;
  return $image_ids[$image_id][$crop_values['default']];
}

/**
 * Check for problems with the object.
 */
function _aicapp_check_for_tour_problems(&$tour) {
  $noLocs = array();
  $unpubs = array();
  $noaudio = array();
  $noImage = array();
  $inGallery = array();
  $stops = array();
  $to_remove = array();
  // App V2 - field_tour_stops is a field collection of tour stop items..
  if (!empty($tour->field_tour_stops[LANGUAGE_NONE])) {
    if ($fc_items = field_get_items('node', $tour, 'field_tour_stops')) {
      foreach ($fc_items as $fc_item) {
        $item = field_collection_field_get_entity($fc_item);
        $stop_audio = !empty($item->field_tour_stop_audio_commentary) ? $item->field_tour_stop_audio_commentary[LANGUAGE_NONE] : NULL;
        $stop_bumper = !empty($item->field_tour_stop_bumper) ? $item->field_tour_stop_bumper[LANGUAGE_NONE] : NULL;
        $stop_object = !empty($item->field_tour_stop_object) ? $item->field_tour_stop_object[LANGUAGE_NONE] : NULL;
        if (empty($stop_object) && empty($stop_audio) && empty($stop_bumper)) {
          $to_remove[] = $item->item_id;
          continue;
        }
        if (!empty($stop_object)) {
          $stops[] = array(
            'nid' => $item->field_tour_stop_object[LANGUAGE_NONE][0]['target_id'],
          );
        }
      }
    }
    // Remove any empty tour stops.
    if (count($to_remove)) {
      foreach ($to_remove as $remove_id) {
        foreach ($tour->field_tour_stops[LANGUAGE_NONE] as $key => $values) {
          if ((int)$values['value'] === $remove_id) {
            unset($tour->field_tour_stops[LANGUAGE_NONE][$key]);
          }
        }
      }
      entity_delete_multiple('field_collection_item', $to_remove);
    }
  }
  // App V1 - To be deprecated. field_stops2 will no longer be used.
  if (empty($stops) && !empty($tour->field_stops2[LANGUAGE_NONE][0]['entity']->field_t_object[LANGUAGE_NONE])) {
    $stops = $tour->field_stops2[LANGUAGE_NONE][0]['entity']->field_t_object[LANGUAGE_NONE];
  }
  // Loop through stops to check for problems.
  foreach ($stops as $stop) {
    $node = node_load($stop['nid']);
    if (!is_object($node)) {
      continue;
    }
    if (empty($node->field_location)) {
      $noLocs[] = array('nid' => $node->nid, 'title' => $node->title);
    }
    if (!$node->status) {
      $unpubs[] = array('nid' => $node->nid, 'title' => $node->title);
    }
    if (empty($node->field_audio_commentary[LANGUAGE_NONE][0])) {
      $noaudio[] = array('nid' => $node->nid, 'title' => $node->title);
    }
    if ((empty($node->field_thumbnail_image) || empty($node->field_large_image)) && empty($node->field_image)) {
      $noImage[] = array('nid' => $node->nid, 'title' => $node->title);
    }
    if ($node->field_in_gallery[LANGUAGE_NONE][0]['value'] != TRUE) {
      $inGallery[] = array('nid' => $node->nid, 'title' => $node->title);
    }
  }
  if (!empty($noLocs)) {
    $group = '<ul>';
    foreach ($noLocs as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following object(s) do not have a location field data set (lat/lon):' .
      $group . 'Location data must be set for the objects to be sent to the mobile app.', 'error');
  }
  if (!empty($unpubs)) {
    $group = '<ul>';
    foreach ($unpubs as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following object(s) are currently marked unpublished:' . $group, 'error');
  }
  if (!empty($noaudio)) {
    $group = '<ul>';
    foreach ($noaudio as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following object(s) have no default audio file:' . $group, 'error');
  }
  if (!empty($noImage)) {
    $group = '<ul>';
    foreach ($noImage as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following object(s) are missing images:' . $group, 'error');
  }
  if (!empty($inGallery)) {
    $group = '<ul>';
    foreach ($inGallery as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following objects\' \'in gallery\' setting is set to FALSE:' . $group, 'error');
  }
}

/**
 * Cycle through every published CMS object and pull it up in data hub.
 * Show it here if no "large_image_large_path" is found AND,
 * if no image has been added in the node.
 */
function aicapp_object_noimg() {
  // Grab object_ids and nid for every object node.
  $query = db_select('field_revision_field_object_id', 'fi')->extend('PagerDefault');
  $query->join('node', 'n', 'n.nid = fi.entity_id');
  $query->fields('fi', array('entity_id', 'field_object_id_value'))
    ->limit(10)
    ->condition('fi.bundle', AICAPP_TYPE_OBJECT)
    ->condition('n.status', 1)
    ->orderBy('field_object_id_value');
  $result = $query->execute();
  // Examine in data hub and see if image is there.
  $rows = array();
  while ($record = $result->fetchAssoc()) {
    // An object ID was passed and is not empty, query based on object ID.
    $options = array(
      'ids' => array($record['field_object_id_value']),
      'limit' => 1,
    );
    // Query the data aggregrator.
    $results = _aicapp_fetch_data(AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS, $options);
    if (!empty($results[0])) {
      $item = $results[0];
      if (empty($item['image_id'])) {
        // There is no image in data hub,  Check Drupal.
        $node = node_load($record['entity_id']);
        if (empty($node->field_image[LANGUAGE_NONE][0]['uri'])) {
          $rows[] = l($item['id'] . ' - ' . substr($item['title'], 0, 50), 'node/' . $record['entity_id'] . '/edit') . ' -> <span class="red">[needs image]</span>';
        }
      }
      else {
        $rows[] = $item['id'] . ' - ' . substr($item['title'], 0, 50) . ' -> [good]';
      }
    }
  }
  $output = array(
    array(
      '#theme' => 'item_list',
      '#items' => $rows,
    ),
    array(
      '#theme' => 'pager',
    ),
  );
  return $output;
}

/**
 * Check a connection beofre making a query.
 */
function _aicapp_check_connection($url) {
  // Filter out invalid URLs.
  if (!filter_var($url, FILTER_VALIDATE_URL)) {
    return FALSE;
  }
  // Initialize CURL to test a connection to a URL.
  $curl_init = curl_init($url);
  curl_setopt($curl_init, CURLOPT_CONNECTTIMEOUT, 5);
  curl_setopt($curl_init, CURLOPT_HEADER, TRUE);
  curl_setopt($curl_init, CURLOPT_NOBODY, TRUE);
  curl_setopt($curl_init, CURLOPT_RETURNTRANSFER, TRUE);
  $response = curl_exec($curl_init);
  curl_close($curl_init);
  // Return TRUE if a response is valid.
  if ($response) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Return an array of tour category terms.
 */
function _aicapp_get_tour_categories($vocabulary_name = AICAPP_TOUR_VOCABULARY_NAME) {
  $categories = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  foreach ($terms as $term) {
    $categories[$term->tid] = array(
      'category' => $term->name,
      'translations' => array(),
    );
    foreach ($term->name_field as $lang_key => $details) {
      if ($lang_key === 'en' || !isset($term->name_field[$lang_key][0]['safe_value'])) {
        continue;
      }
      $categories[$term->tid]['translations'][] = array(
        'language' => $lang_key,
        'category' => $term->name_field[$lang_key][0]['safe_value'],
      );
    }
  }
  return $categories;
}

/**
 * Test if a value is positive.
 */
function is_positive($value) {
  return $value >= 0 && is_numeric($value);
}

/**
 * Ajax callback for the updated term reference field.
 */
function aicapp_object_limit_js($form, $form_state) {
  // Get the delta of the parent field collection item that triggered the ajax.
  $parent_delta = $form_state['triggering_element']['#parents'][2];
  // Use the triggering elments parents to form a path to the element to replace.
  $element_path = array_slice($form_state['triggering_element']['#parents'], 0, 3);
  // Add the field name we're replacing.
  $type = !empty($form['type']['#value']) ? $form['type']['#value'] : NULL;
  if (!empty($form_state['triggering_element']['#field_name'])) {
    $field_trigger = $form_state['triggering_element']['#field_name'];
  }
  elseif (!empty($form_state['triggering_element']['field_name'])) {
    $field_trigger = $form_state['triggering_element']['field_name'];
  }
  // Depending on what field is being updated...
  switch ($field_trigger) {
    default:
      $element_path[] = $field_trigger;
      break;
    case 'field_tour_stop_object':
      $element_path[] = 'field_tour_stop_audio_commentary';
      break;
  }
  // if ($type === AICAPP_TYPE_TOUR) {
  //
  // }
  // elseif ($type === AICAPP_TYPE_OBJECT) {
  //   $element_path[] = 'field_audio_commentary_audio';
  // }
  $form_return_element = drupal_array_get_nested_value($form, $element_path);
  // Add any messages.
  if ($messages = theme('status_messages')) {
    $form_return_element['messages'] = array(
      '#markup' => '<div class="views-messages">' . $messages . '</div>',
    );
  }
  return $form_return_element;
}

/**
 * Implements hook_date_formats().
 */
function aicapp_date_formats() {
  $formats = array();
  $formats[] = array(
    'type' => 'aicapp_date_type',
    'format' => 'M j Y - g:ia',
    'locales' => array(),
  );
  return $formats;
}

/**
 * Implements hook_date_format_types().
 */
function aicapp_date_format_types() {
  $types = array();
  $types['aicapp_date_type'] = t('Short Date, 12 Hour Time');
  return $types;
}

/**
 * Implements hook_query_TAG_alter()
 */
function aicapp_query_tour_stops_missing_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_tour_stops', 'o', 'node.nid = o.entity_id');
  $query->isNull('o.field_tour_stops_value');
}

/**
 * Implements hook_query_TAG_alter()
 */
function aicapp_query_object_audio_missing_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_audio_commentary', 'o', 'node.nid = o.entity_id');
  $query->isNull('o.field_audio_commentary_value');
}

/**
 * Return an array of data API endpoints.
 */
function _aic_app_get_data_endpoints() {
  return array(
    'image_server_url' => AICAPP_IMAGE_SERVER,
    'data_api_url' => AICAPP_DATA_API_HOST,
    'exhibitions_endpoint' => AICAPP_DATA_API_ENDPOINT_EXHIBITION,
    'artworks_endpoint' => AICAPP_DATA_API_ENDPOINT_ARTWORKS,
    'galleries_endpoint' => AICAPP_DATA_API_ENDPOINT_GALLERIES,
    'images_endpoint' => AICAPP_DATA_API_ENDPOINT_IMAGES,
    'events_endpoint' => AICAPP_DATA_API_ENDPOINT_EVENTS,
    'autocomplete_endpoint' => AICAPP_DATA_API_ENDPOINT_AUTOCOMPLETE,
    'tours_endpoint' => AICAPP_DATA_API_ENDPOINT_TOURS,
    'members_endpoint' => AICAPP_DATA_API_ENDPOINT_MEMBERS,
  );
}
