<?php

/**
 * @file
 * Manage objects and galleries that are used in the Mobile APP.
 *
 * Objects and galleries have some data stored in Drupal, and some coming from SOLR queries to the
 * Chicago Art Institute's existing DB.  Objects physical location can be pinned on a Google Map of the Institute.
 *
 * This module creates a button that when clicked, pulls all the published content into a JSON file (appData.json) at
 * the site root, which is then called by the mobile APP.
 *
 * Email notices are also fired when objects are pulled out of galleries or added back into galleries.
 */

/**
 * Implements  hook_init().
 */
function aicapp_init() {
  define('AICAPP_ARTWORK_QUERY', 'artwork');
  define('AICAPP_GALLERY_QUERY', 'gallery');
  define('AICAPP_IMAGE_SERVER', rtrim(variable_get('aicapp_image_server_url', FALSE), '/'));
  define('AICAPP_IMAGE_CROP_REGION', 'full');
  define('AICAPP_IMAGE_CROP_ROTATION', 0);
  define('AICAPP_IMAGE_CROP_QUALITY', 'default');
  define('AICAPP_IMAGE_CROP_FORMAT', 'jpg');
  global $language;
  define('AICAPP_DEFAULT_LANG', $language->language);
  define('AICAPP_TYPE_AUDIO', 'audio');
  define('AICAPP_TYPE_OBJECT', 'object');
  define('AICAPP_TYPE_GALLERY', 'gallery');
  define('AICAPP_TYPE_PAGE', 'page');
  define('AICAPP_TYPE_TOUR', 'tour');
  define('AICAPP_TYPE_EVENT', 'event');
  define('AICAPP_TYPE_EXHIBITION', 'exhibition');
  define('AICAPP_TYPE_MAP_ANNOTATION', 'map_annotation');
  define('AICAPP_DATA_AGGREGATOR', 'aic_data_aggregrator');
  define('AICAPP_DATA_SOLR', 'aic_data_solr');
  define('AICAPP_DATA_API_HOST', rtrim(variable_get('aicapp_data_api_host', 'http://aggregator-data-test.artic.edu'), '/'));
  define('AICAPP_DATA_API_ENDPOINT_EVENT', variable_get('aicapp_data_endpoint_events', '/api/v1/events'));
  define('AICAPP_DATA_API_ENDPOINT_EXHIBITION', variable_get('aicapp_data_endpoint_exhibitions', '/api/v1/exhibitions'));
  define('AICAPP_DATA_API_ENDPOINT_ARTWORKS', variable_get('aicapp_data_endpoint_artworks', '/api/v1/artworks'));
  define('AICAPP_DATA_API_ENDPOINT_GALLERIES', variable_get('aicapp_data_endpoint_galleries', '/api/v1/galleries'));
  define('AICAPP_DATA_API_ENDPOINT_IMAGES', variable_get('aicapp_data_endpoint_images', '/api/v1/images'));
}

/**
 * Implements  hook_menu().
 */
function aicapp_menu() {
  $items['objects/search'] = array(
    'title' => 'Add an Object',
    'page callback' => 'aicapp_search_object',
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  // This is redundant, a placeholder for the next one.
  $items['objects/object_add'] = array(
    'title' => 'Add Object',
    'page callback' => 'aicapp_search_object',
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  $items['objects/object_add/%'] = array(
    'title' => 'Add Object',
    'page callback' => 'aicapp_add_object',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  $items['objects/noimg'] = array(
    'title' => 'Objects without Images',
    'page callback' => 'aicapp_object_noimg',
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  $items['objects/check-objects-gallery'] = array(
    'title' => 'Check Objects Gallery Info',
    'page callback' => 'aicapp_object_checks',
    'type' => MENU_CALLBACK,
    'weight' => 20,
    'access arguments' => array('add objects'),
  );
  /* Queries to retrieve data from Solr API */
  $items['admin/settings/aic-api'] = array(
    'title' => 'AIC API module settings',
    'description' => 'Specify the URLs of your API',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('aicapp_admin'),
    'access arguments' => array('administer aic api settings'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function aicapp_permission() {
  return array(
    'add objects' => array(
      'description' => t('Add or edit objects in the museum'),
      'title' => t('Add or Edit Objects'),
      'restrict access' => FALSE,
    ),
  );
}

/**
 * Page callback function.
 */
function aicapp_search_object() {
  $fm = drupal_get_form('aicapp_search_form');
  return render($fm);
}

/**
 * Page callback for adding an object.
 */
function aicapp_add_object($object_id = 0) {
  $objectidArray = array();
  $objectidArray = explode(",", $object_id);
  // Collecting information to present to the user.
  $collect = array();

  foreach ($objectidArray as $object_id) {

    // An object ID was passed and is not empty, query based on object ID.
    $options = array(
      'ids' => array($object_id),
      'key' => 'object_id',
    );
    $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS;
    // Query the data aggregrator.
    $results = _aicapp_fetch_data($url, $options);
    if (!empty($results[0])) {
      // // Query SOLR to get the object.
      // $result = _runSolrQuery(AICAPP_ARTWORK_QUERY, 'object_id', $object_id);
      // if ($result['response']['numFound'] > 0) {
      // Creates the new object or updates existing if it finds it in our Db.
      $nid = aicappSaveNode($results[0], AICAPP_TYPE_OBJECT);
      $object = '<strong>Object ' . $object_id . ' saved.</strong><br />';
      $object .= l(t('View object'), '/node/' . $nid) . '<br /><br />';
      $collect[] = $object;
    }
    else {
      $collect[] = t('Ran into a problem attempting SOLR query with object id:') . $object_id . '<br />';
    }
  }

  $output = implode(' ', $collect);
  return $output;
}

/**
 * Implements hook_block_info().
 */
function aicapp_block_info() {
  $blocks['data_buttons'] = array(
    'info' => t('Load and Generate Buttons'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => 1,
  );
  $blocks['publish_butn'] = array(
    'info' => t('Publish Button'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'sidebar_first',
    'visibility' => 1,
  );
  $blocks['data_search'] = array(
    'info' => t('Search AI Data'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'header',
    'visibility' => 1,
  );
  $blocks['gallery_count'] = array(
    'info' => t('Gallery Count'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'content',
    'visibility' => 1,
  );
  $blocks['updates_pending'] = array(
    'info' => t('Updates Pending'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'header',
    'visibility' => 1,
  );
  $blocks['info_for_no-image_page'] = array(
    'info' => t('Info for no-image page'),
    'status' => TRUE,
    'weight' => 0,
    'region' => 'content',
    'visibility' => 1,
  );

  return $blocks;
}

/**
 * Implements  hook_block_view().
 */
function aicapp_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'data_buttons':
      $block['subject'] = t('Load and Generate Buttons');
      $block['content'] = aicapp_data_content();
      break;

    case 'publish_butn':
      $block['subject'] = t('Publish Button');
      $block['content'] = aicapp_pub_content();
      break;

    case 'data_search':
      $search_form = aicapp_search_form();
      $block['subject'] = t('Search AI Data');
      $block['content'] = render($search_form);
      break;

    case 'gallery_count':
      $block['subject'] = t('Gallery Count');
      $block['content'] = aicapp_gallery_count();
      break;

    case 'updates_pending':
      $block['subject'] = t('Updates Pending');
      $block['content'] = aicapp_updates_pending();
      break;

    case 'info_for_no-image_page':
      $block['subject'] = t('Info for no-image page');
      $block['content'] = aicapp_info_for_no_image_page();
      break;
  }
  return $block;
}

/**
 * Block content callback.
 */
function aicapp_updates_pending() {
  $updates = variable_get('aicapp_pending');
  if ($updates) {
    return '<div class="pending">' . t('Updates Pending') . '</div>';
  }
  else {
    return '<div class="done">' . t('Up to Date') . '</div>';
  }
}

/**
 * Block content callback.
 */
function aicapp_data_content() {
  $fm1 = drupal_get_form('aicapp_loadgalleries_form');
  $fm2 = drupal_get_form('aicapp_gendata_form');
  return render($fm1) . render($fm2);
}

/**
 * Block content callback.
 */
function aicapp_pub_content() {
  $fm3 = drupal_get_form('aicapp_file_sync_form');
  return render($fm3);
}

/**
 * Block content callback.
 */
function aicapp_info_for_no_image_page() {
  return '<p>This page is conducting a live search of each published object from the Drupal CMS in the SOLR data to see if there is a full-sized image. If there is not an image in SOLR or Drupal, then it is flagged.</p>
';
}

/**
 * Hook_form() implementation.
 */
function aicapp_loadgalleries_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh Gallery List'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
};

/**
 * Hook_form() implementation.
 */
function aicapp_gendata_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit for Publishing'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
};

/**
 * Hook_form() implementation.
 */
function aicapp_file_sync_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Publish'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
}

/**
 * Page callback wth email aic-contours-notifications@artic.edu.
 */
function aicapp_object_checks() {
  $frm = drupal_get_form('aicapp_ObjectGalleryStatus');
  $msg = '<p>This button will cause the system to compare all objects with the current SOLR data, and update any objects that
  have been moved into galleries but are currently marked as "Not on display" in Drupal. It will send out an email to tell
  you which objects have recently been put into a gallery, update their gallery number field, and set "in Gallery" to checked.
  It will also set these objects to unpublished so you can review & enter lat / long values if needed.</p>
  <p style="margin-bottom:50px;">
  It will also check each object for any gallery location changes and update the object. An email will
  be sent out to notify of any changes. <em>It will take a while to do all this - please be patient!</em></p>';

  $frm2 = drupal_get_form('aicapp_verify_obj_gallery');
  $msg2 = '<p>This will check objects to make sure the SOLR field "gallery_location" is a valid gallery (one listed here under Galleries).</p>';

  return render($frm) . $msg . render($frm2) . $msg2;
}

/**
 * Gallery status callback.
 */
function aicapp_ObjectGalleryStatus() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Update Objects' Gallery Status"),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
}

/**
 * Verify Object Gallery submit.
 */
function aicapp_verify_obj_gallery() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Verify Objects' Galleries"),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
}

/**
 * Object Gallery Status submit.
 */
function aicapp_objectGalleryStatus_submit($form, &$form_state) {
  // Load all objects, including unpublished, because we compare if objects
  // previously not in a gallery (and unpublished) are now displayed.
  $objects = node_load_multiple(array(), array('type' => AICAPP_TYPE_OBJECT));

  // Now we build up the objects array for JSON output.
  $art_gone = array();
  $art_in_gallery = array();
  $locations = array();
  $changed = array();
  foreach ($objects as $key => $object) {
    aicapp_fetch_remote_artwork($object);
    // Check objects here to see if they recently went off display.
    // We send email notice in that case - (they may need to update a tour?)
    // First collect the ones marked not on display in current SOLR data.
    if (empty($object->in_gallery)) {
      $art_gone[] = $object->nid;
    }
    else {
      // Keep it simple for array comparison later.
      $art_in_gallery[] = $object->nid;
      if (!empty($object->gallery_location)) {
        $locations[$object->nid] = $object->gallery_location;
      }
    }

    // Make sure any objects that have changed galleries get updated.
    if (isset($object->gallery_location)) {
      $loc = $object->gallery_location;
      $ingallery = $object->in_gallery;
      if (empty($object->in_gallery)) {
        $ingallery = 0;
      }
    }
    else {
      $loc = '';
      $ingallery = 0;
    }
    // Check if 'in gallery' statuses have changed and sync with Solr data.
    if (isset($object->field_in_gallery[LANGUAGE_NONE][0]['value']) && $ingallery != $object->field_in_gallery[LANGUAGE_NONE][0]['value']) {
      db_query("UPDATE {field_data_field_in_gallery}
        SET field_in_gallery_value = :ingal
        WHERE entity_id = :nid", array(':nid' => $object->nid, ':ingal' => $ingallery));

      db_query("UPDATE {field_revision_field_in_gallery}
        SET field_in_gallery_value = :ingal
        WHERE entity_id = :nid", array(':nid' => $object->nid, ':ingal' => $ingallery));
    }
    // Update gallery locations.
    if (isset($object->field_gallery_location[LANGUAGE_NONE][0]['value']) && $loc != $object->field_gallery_location[LANGUAGE_NONE][0]['value']) {
      // Track old gallery locations to compare with new locations.
      $oldloc = $object->field_gallery_location[LANGUAGE_NONE][0]['value'];

      db_query("UPDATE {field_data_field_gallery_location}
          SET field_gallery_location_value = :gal
          WHERE entity_id = :nid
          AND entity_type = 'node'
          AND bundle = :bundle", array(':bundle' => AICAPP_TYPE_OBJECT, ':nid' => $object->nid, ':gal' => $loc));

      db_query("UPDATE {field_revision_field_gallery_location}
          SET field_gallery_location_value = :gal
          WHERE entity_id = :nid
          AND entity_type = 'node'
          AND bundle = :bundle", array(':bundle' => AICAPP_TYPE_OBJECT, ':nid' => $object->nid, ':gal' => $loc));

      // Setting node to unpublished.
      db_query("UPDATE {node} SET status = 0 WHERE nid = :nid", array(':nid' => $object->nid));
      db_query("UPDATE {node_revision} SET status = 0 WHERE nid = :nid", array(':nid' => $object->nid));

      $changed[] = array(
        'object_id' => $object->object_id,
        'title' => $object->title_t,
        'location' => $object->gallery_location,
        'old_location' => $oldloc,
      );
    }
  }

  // flush drupal cache.
  drupal_flush_all_caches();

  // notify of any objects no longer on display.
  _email_art_removed($art_gone);

  // notify of any objects BACK on display
  _email_art_gallery($art_in_gallery, $locations, $objects);

  // notify of any objects that have changed gallery location.
  _email_object_gallery_change($changed);
}

/**
 * verify that the gallery assigned to a published object is one of the galleries we have in Drupal.
 */
function aicapp_verify_obj_gallery_submit($form, &$form_state) {
  $object_query = "SELECT node.nid, fi.field_object_id_value AS object_id
      FROM {node}, {field_data_field_object_id} fi
      WHERE node.nid = fi.entity_id
      AND fi.bundle = :bundle
      AND node.status = 1";
  $objects = db_query($object_query, array(':bundle' => AICAPP_TYPE_OBJECT));
  $gallery_query = "SELECT nid, title
      FROM {node}
      WHERE node.type = :bundle
      AND node.status = 1";
  $galleries = db_query($gallery_query, array(':bundle' => AICAPP_TYPE_GALLERY));

  // need a simple array
  $gals = array();
  foreach ($galleries as $gallery) {
    $gals[] = $gallery->title_t;
  }

  $bad_obj_galleries = '';
  foreach ($objects as $object) {
    aicapp_fetch_remote_artwork($object, $object->object_id);
    $match = FALSE;
    if (isset($object->gallery_location)) {
      $match = array_search($object->gallery_location, $gals);
    }
    if (($match === FALSE) && isset($object->gallery_location) && $object->gallery_location != 'Currently not on display') {
      $bad_obj_galleries .= '<li>Object ID: ' . $object->object_id . ' -- ' . $object->gallery_location . '</li>';
    }
  }
  // now notify
  if (!empty($bad_obj_galleries)) {
    drupal_set_message('Invalid gallery names found on objects: <ul>' . $bad_obj_galleries . '</ul>', 'error');
  }
  else {
    drupal_set_message('No invalid gallery names found in objects', 'status');
  }
}

/**
 * Helper function for aicapp_gendata_form_submit()
 * Compare 2 arrays of art objects. The first comes from current SOLR & are marked as not in gallery.
 * The 2nd is from the Drupal DB, and are marked as in gallery.
 * For any that are in both, they have recently been moved out of their gallery.
 * Shoot off email notice with a list - the admin may need to update tours.
 */
function _email_art_removed($art_gone) {
  global $base_url;
  global $site_name;

  // Now collect all objects from our Drupal DB (field_in_gallery table) that are in gallery and are published
  $result = db_query("SELECT f.entity_id, f.field_in_gallery_value
    FROM {field_data_field_in_gallery} f, {node} n
    WHERE f.bundle = :bundle
    AND f.entity_type = 'node'
    AND f.field_in_gallery_value = 1
    AND f.entity_id = n.nid
    AND n.status = 1", array(':bundle' => AICAPP_TYPE_OBJECT));

  $was_in_gallery = array();
  // grab the ones that have been on display
  foreach ($result as $item) {
    $was_in_gallery[] = $item->entity_id;
  }

  // now compare
  $recent_pulled = array_intersect($art_gone, $was_in_gallery);

  if (!empty($recent_pulled)) {
    $from = 'admin@' . $base_url;
    $to = variable_get('site_mail', '');
    $msg = '<p>' . t('This automated email is to notify you that we\'ve found objects
        that were recently REMOVED from galleries. You might need to update
        the tours if any of these objects were shown:') . '</p><ul>';
    $object_list = '';
    foreach ($recent_pulled as $nid) {
      $object = node_load($nid);
      // was this object on a tour?
      // V1 version of finding if a object is on a tour.
      $result = db_query("SELECT entity_id FROM field_data_field_stops2 WHERE field_stops2_value = :d", array(':d' => $nid));
      $tours = array();
      foreach ($result as $item) {
        $tours[] = node_load($item->entity_id);
      }
      // Try V2 tour stops if $tours is empty.
      if (empty($tours)) {
        if ($tour_objects = _aicapp_get_tour_objects(array(), $nid)) {
          foreach ($tour_objects as $tour_nid => $tour_values) {
            $tours[] = node_load($tour_nid);
          }
        }
      }

      $object_list .= '<li>object_id = ' . $object->object_id . ' -- ' . $object->title_t;
      if (!empty($tours[0])) {
        foreach ($tours as $tour) {
          $object_list .= '<br>-- On tour: ' . check_plain($tour->title);
        }
      }
      $object_list .= '</li>';

      // set the object's status to unpublished
      db_query("UPDATE {node} SET status = 0 WHERE nid = :nid", array(':nid' => $object->nid));
    }
    $msg .= $object_list . '</ul><p>Do not reply to this email.</p>';
    $headers = "From: <" . $from.">\nMIME-Version: 1.0\nContent-type: text/html; charset=utf-8";
    $subject = $site_name . ' -- Object Removal Notice';

    if (mail($to, $subject, $msg, $headers)) {
      drupal_set_message('Email notice was sent regarding objects that have been removed:<ul>' . $object_list . '</ul>', 'status');
    }
    else {
      drupal_set_message('Email notice unable to send. (These objects were removed):<ul>' . $object_list . '</ul>', 'error');
    }
  }
}

/**
 * Helper function that lists, given a list of tour ids, will return all objects
 * that are currently in a published  tour, grouped by tour. You can also pass an array of
 * object ids to limit the items returned to only those objects. Passing an
 * array with just one object id will return all the tours that object is in.
 *
 */
function _aicapp_get_tour_objects($tour_nids = array(), $object_nids = array()) {
  // Normalize arguments to make sure we have arrays.
  if (!is_array($tour_nids)) {
    $tour_nids = is_numeric($tour_nids) ? array($tour_nids) : array();
  }
  if (!is_array($object_nids)) {
    $object_nids = is_numeric($object_nids) ? array($object_nids) : array();
  }
  // Load all tours filted by the given tour ids.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', AICAPP_TYPE_TOUR, '=')
    ->propertyCondition('status', 1, '=');
  if (count($tour_nids)) {
    $query->entityCondition('entity_id', $tour_nids, 'IN');
  }
  $results = $query->execute();
  $tours = isset($results['node']) ? entity_load('node', array_keys($results['node'])) : array();
  $tour_objects = array();
  foreach ($tours as $tour) {
    $tour_objects[$tour->nid] = array();
    $stops = _aicapp_get_tour_stops($tour);
    foreach ($stops as $delta => $stop) {
      if (!isset($stop['object']) || (count($object_nids) && !in_array($stop['object'], $object_nids))) {
        continue;
      }
      $tour_objects[$tour->nid][$stop['object']] = $stop;
    }
  }
  return array_filter($tour_objects);
}

function _aicapp_get_tour_stops($tour) {
  $stops = array();
  if (empty($tour->nid)) {
    return $stops;
  }
  if ($fc_items = field_get_items('node', $tour, 'field_tour_stops')) {
    $i = 0;
    foreach ($fc_items as $fc_item) {
      $item = field_collection_field_get_entity($fc_item);
      $audio_commentary_id = !empty($item->field_tour_stop_audio_commentary) ? $item->field_tour_stop_audio_commentary[LANGUAGE_NONE][0]['target_id'] : NULL;
      $audio_commentary = $audio_commentary_id ? entity_load_single('field_collection_item', $audio_commentary_id) : NULL;
      $audio_node_id = !empty($audio_commentary->field_audio_commentary_audio) ? $audio_commentary->field_audio_commentary_audio[LANGUAGE_NONE][0]['target_id']: NULL;
      $bumper_commentary_id = !empty($item->field_tour_stop_audio_bumper) ? $item->field_tour_stop_audio_bumper[LANGUAGE_NONE][0]['target_id'] : NULL;
      $bumper_commentary = $bumper_commentary_id ? entity_load_single('field_collection_item', $bumper_commentary_id) : NULL;
      $bumper_node_id = is_object($bumper_commentary) ? $bumper_commentary->hostEntityId() : NULL;
      $object_node_id = !empty($item->field_tour_stop_object) ? $item->field_tour_stop_object[LANGUAGE_NONE][0]['target_id'] : NULL;
      // if ($object_node = node_load($object_node_id)) {
      //   $entity = entity_metadata_wrapper('node', $object_node_id);
      //   $object_id = $entity->field_object_id->value();
      // }
      // else {
      //   $object_id = NULL;
      // }
      $stops[] = array(
        //'object_id' => $object_id,
        'object' => $object_node_id,
        'audio_id' => $audio_node_id,
        'audio_bumper' => $bumper_node_id,
        'sort' => $i,
      );
      $i++;
    }
  }
  return $stops;
}

/**
 * Helper function for aicapp_gendata_form_submit()
 * Similar to above, but the reverse. Notify of objects that are now on display in gallery.
 */
function _email_art_gallery($art_in_gallery, $locations, $objects) {
  global $base_url;
  global $site_name;

  // Now collect all objects from our Drupal DB (field_in_gallery table) that are NOT in gallery
  $not_displayed = array();
  foreach ($objects as $obj) {
    if ($obj->field_in_gallery[LANGUAGE_NONE][0]['value'] == 0) {
      $not_displayed[] = $obj->nid;
    }
  }

  // now compare
  $recent_added = array_intersect($art_in_gallery, $not_displayed);

  if (!empty($recent_added)) {
    $from = 'admin@' . $base_url;
    $to = variable_get('site_mail', '');
    $msg = '<p>This automated email is to notify you that we\'ve found objects
        that were recently ADDED into galleries. You might need to update the object location information
        and the tours:</p><ul>';
    $object_list = '';
    $recent_full_objects = array();
    foreach ($recent_added as $nid) {
      $recent_full_objects[$nid] = $objects[$nid];
      $object_list .= '<li>object_id - ' . $objects[$nid]->object_id . ' - ' . $objects[$nid]->title_t . ' - ' . $objects[$nid]->gallery_location . '</li>';
    }
    $msg .= $object_list . '</ul><p>Do not reply to this email.</p>';
    $headers = "From: <" . $from.">\nMIME-Version: 1.0\nContent-type: text/html; charset=utf-8";
    $subject = $site_name . 'Objects Now On Display Notice';

    if (mail($to, $subject, $msg, $headers)) {
      drupal_set_message('Email notice was sent regarding objects now ADDED into galleries:<ul>' . $object_list . '</ul>', 'status');
    }
    else {
      drupal_set_message('Email notice unable to send. (These objects were removed):<ul>' . $object_list . '</ul>', 'error');
    }
    _update_object_galleries($recent_added, $locations);
  }
  else {
    drupal_set_message('\'Update Objects Gallery Status\' has been run. No new gallery_locations were added.', 'status');
  }
}

/**
 * Helper function for aicapp_gendata_form_submit()
 * Similar to above, but the reverse. Notify of objects that are now on display in gallery.
  */
function _email_object_gallery_change($changed) {
  if (!empty($changed)) {
    global $base_url;
    global $site_name;

    $from = 'admin@' . $base_url;
    $to = variable_get('site_mail', '');
    $msg = '<p>This automated email is to notify you that we\'ve found object(s)
      that have changed gallery locations. You might need to update the object\'s location (map LAT/LNG) values:</p><ul>';
    $object_list = '';
    foreach ($changed as $object) {
      $object_list .= '<li>object_id - ' . $object['object_id'] . ' - ' . $object['title_t'] . '<br />Previous location: ' . $object['old_location'] . ', New location: ' . $object['location'] . '</li>';
    }
    $msg .= $object_list . '</ul><p>Do not reply to this email.</p>';
    $headers = "From: <" . $from . ">\nMIME-Version: 1.0\nContent-type: text/html; charset=utf-8";
    $subject = $site_name . 'Object Changed Location Notice';

    if (mail($to, $subject, $msg, $headers)) {
      drupal_set_message('Email notice was sent regarding objects that CHANGED galleries:<ul>' . $object_list . '</ul>', 'status');
    }
    else {
      drupal_set_message('Email notice unable to send. (These objects CHANGED galleries):<ul>' . $object_list . '</ul>', 'error');
    }
  }
  else {
    drupal_set_message('No gallery changes were found.', 'status');
  }
}

/*
 * Update the gallery_location field, and into_gallery fields for newly displayed objects based on SOLR
 */
function _update_object_galleries($recent_added, $locations) {
  foreach ($recent_added as $nid) {
    $node = node_load($nid);
    $entity = entity_metadata_wrapper('node', $node);
    $entity->field_gallery_location = (string) $locations[$nid];
    $entity->field_in_gallery->set(1);
    $entity->status->set(0); // status is 0 (unpublished) because they want to look at it before it gets published.
    $entity->save();
  }
}

/**
 * hook_form_submit() implementation
 * take all the data in the Drupal DB, and the data from matching records in SOLR, and
 * write them to JSON file.
 */
function aicapp_gendata_form_submit($form, &$form_state) {
  global $base_path;
  // Load the general info by loading node number 1.
  $node_gen = node_load(1);
  strip_drupal_from_node($node_gen);
  // Load all published gallery nodes.
  $galleries = node_load_multiple(array(), array('type' => AICAPP_TYPE_GALLERY, 'status' => 1));
  // Load all published objects.
  $objects = node_load_multiple(array(), array('type' => AICAPP_TYPE_OBJECT, 'status' => 1));
  // Load audio nodes.
  $audio_files = node_load_multiple(array(), array('type' => AICAPP_TYPE_AUDIO, 'status' => 1));
  // Load tours nodes.
  $tours = node_load_multiple(array(), array('type' => AICAPP_TYPE_TOUR));
  // Load map annontations that are published.
  $map_annotations = node_load_multiple(array(), array('type' => AICAPP_TYPE_MAP_ANNOTATION, 'status' => 1));
  // Load featured Events & Objects via an entity field query because we Only
  // need a list of node IDs instead of entire objects.
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', array(AICAPP_TYPE_EVENT, AICAPP_TYPE_EXHIBITION), 'IN')
    ->propertyCondition('status', 1, '=')
    ->propertyCondition('promote', 1, '=')
    ->execute();
  // Load all featued nodes.
  $featured = isset($results['node']) ? node_load_multiple(array_keys($results['node'])) : array('node' => array());
  // Strip out Drupal native stuff we don't need in the JSON output.
  foreach ($galleries as $gallery) {
    strip_drupal_from_node($gallery);
    // Add in other gallery fields from SOLR.
    $result = _runSolrQuery(AICAPP_GALLERY_QUERY, 'gallery_id', $gallery->gallery_id);
    if (!empty($result['response']['docs'])) {
      foreach ($result['response']['docs'][0] as $key => $val) {
        if ($val == '<NOT Closed>' || $val == '<Closed>') {
          if ($val == '<NOT Closed>') {
            $gallery->$key = 'False';
          }
          elseif ($val == '<Closed>') {
            $gallery->$key = 'True';
          }
        }
        else {
          $gallery->$key = $val;
        }
      }
    }
  }
  // Now we build up the objects array for JSON output.
  foreach ($objects as $key => $object) {
    aicapp_fetch_remote_artwork($object);
    strip_drupal_from_node($object);
    // Only show objects that are in a gallery, and have lat/long values,
    // and that are published.
    if (empty($object->in_gallery) || !$object->in_gallery || empty($object->location) || !$object->status) {
      unset($objects[$key]);
    }
  }
  // Format audio node.
  foreach ($audio_files as $audio) {
    strip_drupal_from_node($audio);
  }
  // Loop through all tours.
  foreach ($tours as $key => $tour) {
    // If tour is featured (ie, promote = 1), then add to featued lists.
    if ($tour->promote && $tour->status) {
      $featured['node'][$tour->nid] = new stdClass();
      $featured['node'][$tour->nid]->nid = $tour->nid;
      $featured['node'][$tour->nid]->type = AICAPP_TYPE_TOUR;
    }
    // Clean the tour node of extra properties.
    strip_drupal_from_node($tour);
    // Retrieve today's date.
    $today = date("Y-m-d H:i:s");
    if (!empty($tour->tour_dates) && !empty($tour->tour_dates[LANGUAGE_NONE][0]['value'])) {
      $tourStartDate = $tour->tour_dates[LANGUAGE_NONE][0]['value'];
      $tourEndDate = $tour->tour_dates[LANGUAGE_NONE][0]['value2'];
      $tour->tour_dates = array(
        'start_date' => $tourStartDate,
        'end_date' => $tourEndDate,
      );
      // iIf today is greater than or equal to the start date and
      // it's also less than or equal to the end date, publish the tour.
      if ($today >= $tourStartDate && $today <= $tourEndDate) {
        db_query("UPDATE {node} SET status = 1 WHERE nid = :nid", array(':nid' => $tour->nid));
        db_query("UPDATE {node_revision} SET status = 1 WHERE nid = :nid", array(':nid' => $tour->nid));
      }
      else {
        // Unpublish the tour.
        db_query("UPDATE {node} SET status = 0 WHERE nid = :nid", array(':nid' => $tour->nid));
        db_query("UPDATE {node_revision} SET status = 0 WHERE nid = :nid", array(':nid' => $tour->nid));
        unset($tours[$key]);
        // Also remove from featured.
        unset($featured['node'][$tour->nid]);
      }
    }
    elseif (empty($tour->tour_dates) && $tour->status == 0) {
      unset($tours[$key]);
    }
    // Add the weight from the view page so we can sort.
    $result = db_query('SELECT weight FROM {draggableviews_structure} WHERE entity_id = :d', array(':d' => $tour->nid));
    foreach ($result as $item) {
      $tour->weight = (!empty($item->weight)) ? $item->weight : 0;
    }
    // Collect the tour stops (objects + audio files)
    // App v1 -- this will be deprecated.
    if (!empty($tour->stops)) {
      $tour->stops = aicapp_collect_tour_stops($tour->stops);
    }
    // App v2 -- process all tour stops..
    if (isset($tour->tour_stop_items)) {
      $tour->tour_stops = $tour->tour_stop_items;
      unset($tour->tour_stop_items);
    }
  }
  // Sort tours.
  usort($tours, 'sort_objects_by_weight');
  // Format map annontations.
  foreach ($map_annotations as $annontation) {
    strip_drupal_from_node($annontation);
  }
  // Format featured events, tours and exhibitions.
  $featured_sorted = array();
  if (!empty($featured['node'])) {
    foreach ($featured['node'] as $feature) {
      $featured_sorted[$feature->type][] = $feature->nid;
    }
  }
  // Prepare to output JSON data.
  // Add all the entities to a single array for encoding.
  $v1_data = array(
    'general_info' => $node_gen,
    'galleries' => $galleries,
    'objects' => $objects,
    'audio_files' => $audio_files,
    'tours' => $tours,
  );
  // Version 2 JSON data.
  $v2_data = array(
    'dashboard' => array(
      'featured_tours' => isset($featured_sorted[AICAPP_TYPE_TOUR]) ? $featured_sorted[AICAPP_TYPE_TOUR] : array(),
      'featured_exhibitions' => isset($featured_sorted[AICAPP_TYPE_EXHIBITION]) ? $featured_sorted[AICAPP_TYPE_EXHIBITION] : array(),
      'featured_events' => isset($featured_sorted[AICAPP_TYPE_EVENT]) ? $featured_sorted[AICAPP_TYPE_EVENT] : array(),
    ),
    'general_info' => $node_gen,
    'galleries' => $galleries,
    'objects' => $objects,
    'audio_files' => $audio_files,
    'tours' => $tours,
    'annontations' => $map_annotations,
  );
  // Write JSON output to files.
  // v1 verion file output.
  $v1_json_output = json_encode($v1_data);
  $v1_filename = 'appData';
  $v1_file = file_put_contents('sites/default/files/' . $v1_filename . '.json', $v1_json_output);
  // Version 2 file output.
  $v2_json_output = json_encode($v2_data);
  $v2_filename = 'appData-v2';
  $v2_file = file_put_contents('sites/default/files/' . $v2_filename . '.json', $v2_json_output);
  // If both v1 & v1 files were written successfully.
  if ($v1_file && $v2_file) {
    drupal_set_message('Updated files <strong>v1</strong>: <a href="' . $base_path . 'sites/default/files/appData.json' . '">appData.json</a> or <strong>v2</strong>: <a href="' . $base_path . 'sites/default/files/appData-v2.json' . '">appData-v2.json</a><br>When you click to view one of the files, be sure to refresh your browser as it might be cached. Best viewed in Chrome.', 'status');
    variable_set('aicapp_pending', 0);
  }
  else {
    drupal_set_message('Problem occurred, file not written.', 'error');
  }
}

/**
 * Collect tour stops and return as a group. Use for V1 App JSON.
 */
function aicapp_collect_tour_stops($stops = array()) {
  $full_stops = $audio = $objects = array();
  foreach ($stops as $stop) {
    if (empty($stop['value'])) {
      continue;
    }
    $result = db_query("SELECT field_t_audio_nid, delta
      FROM {field_revision_field_t_audio}
      WHERE revision_id = :vid
      ORDER by delta", array(':vid' => $stop['value']));
    foreach ($result as $item) {
      $audio[] = array('nid' => $item->field_t_audio_nid, 'delta' => $item->delta);
    }

    $result = db_query("SELECT field_t_object_nid, delta
      FROM {field_revision_field_t_object}
      WHERE revision_id = :vid
      ORDER by delta", array(':vid' => $stop['value']));
    foreach ($result as $item) {
      $objects[] = array('nid' => $item->field_t_object_nid, 'delta' => $item->delta);
    }
    // Now we should have 2 arrays of same length, sorted in order.
    if (count($audio) == count($objects)) {
      for ($i = 0; $i < count($audio); $i++) {
        $full_stops[] = array(
          AICAPP_TYPE_AUDIO => $audio[$i]['nid'],
          AICAPP_TYPE_OBJECT => $objects[$i]['nid'],
          'sort' => $objects[$i]['delta'],
        );
      }
    }
  }
  return $full_stops;
}

/**
 * Helper to sort object by weight.
 */
function sort_objects_by_weight($a, $b) {
  if ((!isset($a->weight) || !isset($b->weight)) || (isset($a->weight) && isset($b->weight) && $a->weight == $b->weight)) {
    return 0;
  }
  return $a->weight - $b->weight;
}

/**
 * Add the SOLR data to the node.
 */
function aicapp_fetch_remote_artwork(&$object, $object_id = NULL, $provider = AICAPP_DATA_SOLR) {
  // For now, just return the same as before. Eventually switch to getting
  // data from https://art-institute-of-chicago.github.io/data-aggregator.
  if ($provider === AICAPP_DATA_SOLR) {
    return _getSOLRdata($object, $object_id);
  }
  elseif ($provider === AICAPP_DATA_AGGREGATOR) {
    return _aicapp_update_remote_artwork_data($object, $object_id);
  }
}

/**
 * Add the SOLR data to the node.
 */
function _aicapp_update_remote_artwork_data(&$object, $object_id = NULL) {
  $entity = entity_metadata_wrapper('node', $object);
  if (empty($object_id)) {
    $object_id = $entity->field_object_id->value();
    if (empty($object_id)) {
      // If there is no object id, then we have a custom object.
      // Reference values entered for object data.
      $object->in_gallery = $entity->field_in_gallery->value();
      $object->gallery_location = $entity->field_gallery_location->value();
      $object->credit_line = $entity->field_credit_line->value();
      $object->copyright_notice = $entity->field_copyright_notice->value();
      if ($entity->field_artist_origin->value()) {
        $object->artist_culture_place_delim = $entity->field_artist_name->value() . '|' . $entity->field_artist_origin->value();
      }
      else {
        $object->artist_culture_place_delim = $entity->field_artist_name->value();
      }
      return;
    }
  }
  // An object ID was passed and is not empty, query based on object ID.
  $options = array(
    'ids' => array($object_id),
    'key' => 'object_id',
  );
  $url = AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_ARTWORKS;
  // Query the data aggregrator.
  $results = _aicapp_fetch_data($url, $options);
  if (!empty($results[0])) {
    foreach ($results[0] as $key => $val) {
      if ($key == 'date_range') {
        $val = implode('-', $val);
      }
      if ($key != 'provenance_text' && $key != 'exhibition_history') {
        $object->$key = $val;
      }
    }
  }
}

/**
 * Fetch data from the data aggregrator.
 */
function _aicapp_fetch_data($endpoint, $options = array()) {
  $results = array();
  $defaults = array(
    'limit' => 'limit=1',
    'fields' => array(),
    'ids' => array(),
  );
  $options += $defaults;
  $limit_count = 50;
  $max_page = 10;
  $url = $endpoint . '?' . $options['limit'];
  if (!empty($options['fields'])) {
    $url .= '&fields=' . implode(',', $options['fields']);
  }
  if (!empty($options['fields'])) {
    $url .= '&ids=' . implode(',', $options['ids']);
  }
  $remote_objects = array();
  try {
    $connection = file_get_contents($url);
    // If connection not available.
    if (!$connection) {
      return;
    }
    $json = json_decode($connection, TRUE);
    if (isset($json['data'])) {
      foreach ($json['data'] as $remote_record) {
        $results[] = $remote_record;
      }
    }
  }
  catch (Exception $e) {

  }
  return $results;
}

/**
 * Add the SOLR data to the node.
 */
function _getSOLRdata(&$object, $object_id = NULL) {
  $entity = entity_metadata_wrapper('node', $object);
  if (empty($object_id)) {
    $object_id = $entity->field_object_id->value();
    if (empty($object_id)) {
      // if there is no object id, then we have a custom object. Reference values entered for object data.
      $object->in_gallery = $entity->field_in_gallery->value();
      $object->gallery_location = $entity->field_gallery_location->value();
      $object->credit_line = $entity->field_credit_line->value();
      $object->copyright_notice = $entity->field_copyright_notice->value();
      if ($entity->field_artist_origin->value()) {
        $object->artist_culture_place_delim = $entity->field_artist_name->value() . '|' . $entity->field_artist_origin->value();
      }
      else {
        $object->artist_culture_place_delim = $entity->field_artist_name->value();
      }
      return;
    }
  }

  $result = _runSolrQuery(AICAPP_ARTWORK_QUERY, 'object_id', $object_id);
  if (!empty($result['response']['docs'])) {
    foreach ($result['response']['docs'][0] as $key => $val) {
      if ($key == 'date_range') {
        $val = implode('-', $val);
      }
      if ($key != 'provenance_text' && $key != 'exhibition_history') {
        $object->$key = $val;
      }
    }
  }
}

/**
 * Clear out all the Drupal stuff from the node, so we can deliver JSON data.
 */
function strip_drupal_from_node(&$node) {
  $to_unset = array(
    'vid', 'uid', 'log', 'comment', 'promote', 'sticky', 'created', 'changed',
    'tnid', 'translate', 'revision_timestamp', 'revision_uid', 'path', 'name',
    'picture', 'data', 'vuuid', 'uuid',
    'body', 'title_original', 'entity_translation_handler_id',
  );
  foreach ($to_unset as $property) {
    if (isset($node->{$property})) {
      unset($node->{$property});
    }
  }
  // Save the properties of the node before adding more.
  $properties = array_keys((array) $node);
  // List of node types that can be translated.
  // Save the translations available.
  $translations = array();
  if (isset($node->translations) && isset($node->translations->data)) {
    $translations = $node->translations->data;
  }
  $i18n_types = array(
    AICAPP_TYPE_AUDIO, AICAPP_TYPE_TOUR,
    AICAPP_TYPE_MAP_ANNOTATION, AICAPP_TYPE_PAGE,
  );
  if (in_array($node->type, $i18n_types)) {
    // Create an empty translations property to store all translations.
    $node->translations = array();
  }
  else {
    unset($node->translations);
  }
  // Fields used in multiple content types, such as location and floor.
  // Location field.
  if (isset($node->field_location)) {
    $node->location = '';
    if (isset($node->field_location[LANGUAGE_NONE][0]['safe_value'])) {
      $node->location = $node->field_location[LANGUAGE_NONE][0]['safe_value'];
    }
    // Location should be split into latitude and longitude properties.
    if (!empty($node->location)) {
      $pieces = explode(',', $node->location);
      $node->latitude = $pieces[0];
      $node->longitude = isset($pieces[1]) ? $pieces[1] : '';
    }
  }
  // Current Floor is used in Gallery, Map Annotation & Tour nodes. App V1.
  if (isset($node->field_floor)) {
    $node->floor = '';
    if (isset($node->field_floor[LANGUAGE_NONE][0]['safe_value'])) {
      $node->floor = $node->field_floor[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // If the floor reference field is set.
  if (isset($node->field_floor_reference)) {
    $node->floor = '';
    if (isset($node->field_floor_reference[LANGUAGE_NONE][0]['target_id'])) {
      $floor = entity_load('field_collection_item', array($node->field_floor_reference[LANGUAGE_NONE][0]['target_id']));
      if (count($floor)) {
        $floor = array_pop($floor);
        $node->floor = !empty($floor->field_floor_label) ? $floor->field_floor_label[LANGUAGE_NONE][0]['safe_value'] : '';
      }
    }
  }
  // Image field is used in Object, Tour & Article nodes.
  if (isset($node->field_image)) {
    $node->image_filename = '';
    $node->image_url = '';
    $node->image_filemime = '';
    $node->image_filesize = '';
    $node->image_width = '';
    $node->image_height = '';
    if (isset($node->field_image[LANGUAGE_NONE][0]['uri'])) {
      $node->image_filename = $node->field_image[LANGUAGE_NONE][0]['filename'];
      $node->image_url = file_create_url($node->field_image[LANGUAGE_NONE][0]['uri']);
      $node->image_filemime = $node->field_image[LANGUAGE_NONE][0]['filemime'];
      $node->image_filesize = $node->field_image[LANGUAGE_NONE][0]['filesize'];
      $node->image_width = $node->field_image[LANGUAGE_NONE][0]['width'];
      $node->image_height = $node->field_image[LANGUAGE_NONE][0]['height'];
    }
  }
  // Object & Tour thumnail image crop dimensions.
  if (isset($node->field_thumbnail_crop_rect)) {
    $node->thumbnail_crop_rect = array();
    if (isset($node->field_thumbnail_crop_rect[LANGUAGE_NONE][0])) {
      $items = field_get_items('node', $node, 'field_thumbnail_crop_rect');
      foreach ($items as $itemid) {
        $item = field_collection_field_get_entity($itemid);
        if ($item->field_x) {
          $node->thumbnail_crop_rect = array(
            'x' => $item->field_x[LANGUAGE_NONE][0]['value'],
            'y' => $item->field_y[LANGUAGE_NONE][0]['value'],
            'width' => $item->field_width[LANGUAGE_NONE][0]['value'],
            'height' => $item->field_height[LANGUAGE_NONE][0]['value'],
          );
          json_encode($node->thumbnail_crop_rect);
        }
      }
    }
  }
  // Object & Tour thumbnail image url.
  if (isset($node->field_thumbnail_image)) {
    $node->thumbnail_full_path = '';
    if (isset($node->field_thumbnail_image[LANGUAGE_NONE][0]['safe_value'])) {
      $node->thumbnail_full_path = $node->field_thumbnail_image[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Object & Tour large image crop dimensions.
  if (isset($node->field_large_image_crop_rect)) {
    $node->large_image_crop_rect = array();
    if (isset($node->field_large_image_crop_rect[LANGUAGE_NONE][0])) {
      $items = field_get_items('node', $node, 'field_large_image_crop_rect');
      foreach ($items as $itemid) {
        $item = field_collection_field_get_entity($itemid);
        if ($item->field_x) {
          $node->large_image_crop_rect = array(
            'x' => $item->field_x[LANGUAGE_NONE][0]['value'],
            'y' => $item->field_y[LANGUAGE_NONE][0]['value'],
            'width' => $item->field_width[LANGUAGE_NONE][0]['value'],
            'height' => $item->field_height[LANGUAGE_NONE][0]['value'],
          );
          json_encode($node->large_image_crop_rect);
        }
      }
    }
  }
  // Object & Tour full size image url.
  if (isset($node->field_large_image)) {
    $node->large_image_full_path = '';
    if (isset($node->field_large_image[LANGUAGE_NONE][0]['safe_value'])) {
      $node->large_image_full_path = $node->field_large_image[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Fields that belong to only 1 content type.
  // General Info node field items.
  if (isset($node->field_museum_hours)) {
    $node->museum_hours = '';
    if (isset($node->field_museum_hours[$node->language][0]['safe_value'])) {
      $node->museum_hours = $node->field_museum_hours[$node->language][0]['safe_value'];
    }
  }
  // General Info translations.
  if (!empty($node->museum_hours)) {
    foreach ($translations as $lang_key => $details) {
      if ($lang_key === 'en') {
        continue;
      }
      $node->translations[] = array(
        'language' => $lang_key,
        'museum_hours' => isset($node->field_museum_hours[$lang_key][0]['safe_value']) ? $node->field_museum_hours[$lang_key][0]['safe_value'] : '',
      );
    }
  }
  // Gallery node field items.
  if (isset($node->field_gallery_id)) {
    $node->gallery_id = '';
    if (isset($node->field_gallery_id[LANGUAGE_NONE][0]['safe_value'])) {
      $node->gallery_id = $node->field_gallery_id[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Gallery Number.
  if (isset($node->field_gallery_number)) {
    $node->gallery_number = '';
    // This is overriding the SOLR data.  This is why we sync.
    if (isset($node->field_gallery_number[LANGUAGE_NONE][0]['safe_value'])) {
      $node->gallery_number = $node->field_gallery_number[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Object node type field items, starging with the object id.
  if (isset($node->field_object_id)) {
    $node->object_id = '';
    if (isset($node->field_object_id[LANGUAGE_NONE][0]['value'])) {
      $node->object_id = $node->field_object_id[LANGUAGE_NONE][0]['value'];
    }
  }
  // Object reference number.
  if (isset($node->field_reference_num)) {
    $node->reference_num = '';
    if (isset($node->field_reference_num[LANGUAGE_NONE][0]['safe_value'])) {
      $node->reference_num = $node->field_reference_num[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // What is this object's gallery location?
  if (isset($node->field_gallery_location)) {
    $node->gallery_location = '';
    if (isset($node->field_gallery_location[LANGUAGE_NONE][0]['safe_value'])) {
      $node->gallery_location = $node->field_gallery_location[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Is this object in a gallery?
  if (isset($node->field_in_gallery)) {
    $node->in_gallery = '';
    if (isset($node->field_reference_num[LANGUAGE_NONE][0]['safe_value'])) {
      $node->reference_num = $node->field_reference_num[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Audio Commentary field collection items.
  if ($fc_items = field_get_items('node', $node, 'field_audio_commentary')) {
    $node->audio_commentary = '';
    // Extract the field collection items.
    foreach ($fc_items as $fc_item) {
      $item = field_collection_field_get_entity($fc_item);
      $audio_id = !empty($item->field_audio_commentary_audio) ? $item->field_audio_commentary_audio[LANGUAGE_NONE][0]['target_id'] : NULL;
      $node->audio_commentary[] = array(
        'object_selector_number' => !empty($item->field_object_selector_number) ? $item->field_object_selector_number[LANGUAGE_NONE][0]['value'] : NULL,
        'audio' => $audio_id,
      );
    }
  }
  // Object audio files.
  if (isset($node->field_object_audio)) {
    if (isset($node->field_object_audio[LANGUAGE_NONE][0]['nid'])) {
      foreach ($node->field_object_audio[LANGUAGE_NONE] as $audiofld) {
        $node->audio[] = $audiofld['nid'];
      }
    }
    if (isset($node->field_object_audio[LANGUAGE_NONE][0]['node']->field_audio_transcript[LANGUAGE_NONE][0]['safe_value'])) {
      $node->audio_transcript = $node->field_object_audio[LANGUAGE_NONE][0]['node']->field_audio_transcript[LANGUAGE_NONE][0]['safe_value'];
    }
  }
  // Is this a highlighed object?
  if (isset($node->field_highlighted_object)) {
    if (isset($node->field_highlighted_object[LANGUAGE_NONE][0])) {
      $node->highlighted_object = $node->field_highlighted_object[LANGUAGE_NONE][0]['value'];
    }
  }
  // App v1 property: Object selector number.
  if (isset($node->field_object_selector_number)) {
    $node->object_selector_number = '';
    if (isset($node->field_object_selector_number[LANGUAGE_NONE][0]['value'])) {
      $node->object_selector_number = $node->field_object_selector_number[LANGUAGE_NONE][0]['value'];
    }
  }
  // App v1 property: Object selector number.
  if (isset($node->field_object_selector_numbers)) {
    $node->object_selector_numbers = array();
    if (isset($node->field_object_selector_numbers[LANGUAGE_NONE][0]['value'])) {
      foreach ($node->field_object_selector_numbers[LANGUAGE_NONE] as $objselector) {
        $node->object_selector_numbers[] = $objselector['value'];
      }
    }
  }
  // Tour node items, beginning with tour banner.
  if (isset($node->field_tour_banner)) {
    $node->tour_banner = '';
    if (isset($node->field_tour_banner[LANGUAGE_NONE][0]['value'])) {
      $node->tour_banner = $node->field_tour_banner[LANGUAGE_NONE][0]['value'];
    }
  }
  // Tour selector field.
  if (isset($node->field_selector_number)) {
    $node->selector_number = '';
    if (isset($node->field_selector_number[LANGUAGE_NONE][0]['value'])) {
      $node->selector_number = $node->field_tour_banner[LANGUAGE_NONE][0]['value'];
    }
  }
  // Tour description field.
  if (isset($node->field_description)) {
    $node->description = '';
    $node->description_html = '';
    if (isset($node->field_description[$node->language][0]['value'])) {
      $descriptions = field_get_items('node', $node, 'field_description');
      $a_description = array_shift($descriptions);
      $description = $a_description['value'];
      $node->description = trim(strip_tags($description));
      $node->description_html = trim($description);
    }
  }
  // Move tour dats into a new property so it can be acessed later.
  if (isset($node->field_tour_dates)) {
    $node->tour_dates = array();
    if (!empty($node->field_tour_dates)) {
      $node->tour_dates = $node->field_tour_dates;
    }
  }
  // Tour Intro.
  if (isset($node->field_intro)) {
    $node->intro = '';
    $node->intro_html = '';
    if (isset($node->field_intro[$node->language][0]['value'])) {
      $intros = field_get_items('node', $node, 'field_intro');
      $an_intro = array_shift($intros);
      $intro = $an_intro['value'];
      $node->intro = trim(strip_tags($intro));
      $node->intro_html = trim($intro);
    }
  }
  // Tour stops.
  if (isset($node->field_tour_stops)) {
    $node->tour_stop_items = _aicapp_get_tour_stops($node);
  }
  // Tour Duration.
  if (isset($node->field_tour_duration)) {
    $node->tour_duration = '';
    if (isset($node->field_tour_duration[$node->language][0])) {
      $node->tour_duration = $node->field_tour_duration[$node->language][0]['safe_value'];
    }
  }
  // Tour audio node id..
  if (isset($node->field_tour_audio)) {
    $node->tour_audio = '';
    if (isset($node->field_tour_audio[LANGUAGE_NONE][0])) {
      $node->tour_audio = $node->field_tour_audio[LANGUAGE_NONE][0]['nid'];
    }
  }
  // Tour translations.
  if ($node->type === AICAPP_TYPE_TOUR) {
    foreach ($translations as $lang_key => $details) {
      if ($lang_key === 'en') {
        continue;
      }
      $node->translations[] = array(
        'language' => $lang_key,
        'title' => isset($node->title_field[$lang_key][0]['safe_value']) ? $node->title_field[$lang_key][0]['safe_value'] : '',
        'description' => isset($node->field_description[$lang_key][0]['safe_value']) ? trim(strip_tags($node->field_description[$lang_key][0]['safe_value'])) : '',
        'description_html' => isset($node->field_description[$lang_key][0]['safe_value']) ? $node->field_description[$lang_key][0]['safe_value'] : '',
        'intro' => isset($node->field_intro[$lang_key][0]['safe_value']) ? trim(strip_tags($node->field_intro[$lang_key][0]['safe_value'])) : '',
        'intro_html' => isset($node->field_intro[$lang_key][0]['safe_value']) ? $node->field_intro[$lang_key][0]['safe_value'] : '',
        'tour_duration' => isset($node->field_tour_duration[$lang_key][0]['safe_value']) ? $node->field_tour_duration[$lang_key][0]['safe_value'] : '',
      );
    }
  }
  // App V1 - version of tour stops.
  if (isset($node->field_stops2)) {
    $node->stops = array();
    if (isset($node->field_stops2[LANGUAGE_NONE][0])) {
      $node->stops = $node->field_stops2[LANGUAGE_NONE];
    }
  }
  // Audio node field items.
  // This handles each separate audio file.
  if (isset($node->field_audio_file)) {
    $node->audio_filename = '';
    $node->audio_file_url = '';
    $node->audio_filemime = '';
    $node->audio_filesize = '';
    if (isset($node->field_audio_file[$node->language][0]['uri'])) {
      $node->audio_filename = $node->field_audio_file[$node->language][0]['filename'];
      $node->audio_file_url = file_create_url($node->field_audio_file[$node->language][0]['uri']);
      $node->audio_filemime = $node->field_audio_file[$node->language][0]['filemime'];
      $node->audio_filesize = $node->field_audio_file[$node->language][0]['filesize'];
    }
  }
  // Audio Transcript.
  if (isset($node->field_audio_transcript)) {
    $node->audio_transcript = '';
    if (isset($node->field_audio_transcript[$node->language][0]['safe_value'])) {
      $node->audio_transcript = $node->field_audio_transcript[$node->language][0]['safe_value'];
    }
  }
  // Audio Credits.
  if (isset($node->field_credits)) {
    $node->credits = '';
    if (isset($node->field_credits[$node->language][0]['safe_value'])) {
      $node->credits = $node->field_credits[$node->language][0]['safe_value'];
    }
  }
  // Audio Track title.
  if (isset($node->field_track_title)) {
    $node->track_title = '';
    if (isset($node->field_track_title[$node->language][0]['safe_value'])) {
      $node->track_title = $node->field_track_title[$node->language][0]['safe_value'];
    }
  }
  // Audio translations.
  if ($node->type === AICAPP_TYPE_AUDIO) {
    foreach ($translations as $lang_key => $details) {
      if ($lang_key === 'en') {
        continue;
      }
      $node->translations[] = array(
        'language' => $lang_key,
        'title' => isset($node->title_field[$lang_key][0]['safe_value']) ? $node->title_field[$lang_key][0]['safe_value'] : '',
        'track_title' => isset($node->field_track_title[$lang_key][0]['safe_value']) ? $node->field_track_title[$lang_key][0]['safe_value'] : '',
        'audio_filename' => isset($node->field_audio_file[$lang_key][0]['filename']) ? $node->field_audio_file[$lang_key][0]['filename'] : '',
        'audio_file_url' => isset($node->field_audio_file[$lang_key][0]['uri']) ? file_create_url($node->field_audio_file[$lang_key][0]['uri']) : '',
        'audio_filemime' => isset($node->field_audio_file[$lang_key][0]['filemime']) ? $node->field_audio_file[$lang_key][0]['filemime'] : '',
        'audio_filesize' => isset($node->field_audio_file[$lang_key][0]['filesize']) ? $node->field_audio_file[$lang_key][0]['filesize'] : '',
        'audio_transcript' => isset($node->field_audio_transcript[$lang_key][0]['safe_value']) ? $node->field_audio_transcript[$lang_key][0]['safe_value'] : '',
        'credits' => isset($node->field_credits[$lang_key][0]['safe_value']) ? $node->field_credits[$lang_key][0]['safe_value'] : '',
      );
    }
  }
  // Map Annotation field items: label (field_annotation_label)
  if (isset($node->field_annotation_label)) {
    $node->label = '';
    if (isset($node->field_annotation_label[$node->language][0]['safe_value'])) {
      $node->label = $node->field_annotation_label[$node->language][0]['safe_value'];
    }
  }
  // Map annontation_type (field_annotation_type)
  if (isset($node->field_annotation_type)) {
    $node->annotation_type = '';
    if (isset($node->field_annotation_type[LANGUAGE_NONE][0]['value'])) {
      $type_field = field_info_field('field_annotation_type');
      $label = $type_field['settings']['allowed_values'][$node->field_annotation_type[LANGUAGE_NONE][0]['value']];
      $node->annotation_type = $label;
    }
  }
  // Map Annotation translations.
  if ($node->type === AICAPP_TYPE_MAP_ANNOTATION) {
    foreach ($translations as $lang_key => $details) {
      if ($lang_key === 'en') {
        continue;
      }
      $node->translations[] = array(
        'language' => $lang_key,
        'title' => isset($node->title_field[$lang_key][0]['safe_value']) ? $node->title_field[$lang_key][0]['safe_value'] : '',
        'label' => isset($node->field_annotation_label[$lang_key][0]['safe_value']) ? $node->field_annotation_label[$lang_key][0]['safe_value'] : '',
      );
    }
  }
  // Final Clean-up. Unset language, and the rest of the saved properties.
  $to_skip = array('title', 'status', 'type', 'nid', 'translations');
  $properties += array('data', 'entity_translation_handler_id');
  foreach ($properties as $property) {
    if (!in_array($property, $to_skip) && isset($node->{$property})) {
      unset($node->{$property});
    }
  }
}

/**
 * Get gallery count.
 */
function aicapp_gallery_count() {
  $result = _runSolrQuery(AICAPP_GALLERY_QUERY, '*', '*', 500);

  $SOLR_count = count($result['response']['docs']);
  $result = db_query("SELECT COUNT(nid) as count FROM {node} WHERE type = :s AND status = 1", array(':s' => AICAPP_TYPE_GALLERY));
  $galleries = $result->fetchObject();

  return '<div class="callout"><p>' . t('Galleries in SOLR: ' . $SOLR_count) . '<br />' . t('Galleries in Drupal: ' . $galleries->count) . '</p></div>';
}

/**
 * Hook_form_submit() implementation
 * Used to multi-load in the galleries.  Objects don't use this, they are loaded one at a time via search.
 */
function aicapp_loadgalleries_form_submit($form, &$form_state) {
  $result = _runSolrQuery(AICAPP_GALLERY_QUERY, '*', '*', 500);

  // first delete any old galleries not in SOLR anymore
  $galleries = node_load_multiple(array(), array('type' => AICAPP_TYPE_GALLERY, 'status' => 1));

  try {
    // Now loop through the $result JSON.
    foreach ($result['response']['docs'] as $object) {
      aicappSaveNode($object, AICAPP_TYPE_GALLERY); // create new or update existing
    }
    foreach ($galleries as $gallery) {
      // look for the Drupal gallery in the SOLR gallery
      $match = FALSE;
      foreach ($result['response']['docs'] as $item) {
        if ($item['gallery_id'] == $gallery->field_gallery_id[LANGUAGE_NONE][0]['value']) {
          $match = TRUE;
        }
      }
      // this would work if we had php 5.5 installed on server.
      // $key = array_search($gallery->field_gallery_id[LANGUAGE_NONE][0]['value'], array_column($result['response']['docs'], 'gallery_id'));
      if (!$match) {
        // not found in SOLR, delete the Drupal gallery
        node_delete($gallery->nid);
      }
    }
    drupal_set_message(t("Data has been loaded!"), 'status');
  }
  catch (Exception $e) {
    drupal_set_message(t("An error occurred: " . $e), 'error');
  }
}

/**
 * Performs the actual node_save().
 * Either creates a new object node or updates the existing one.
 * expects an $object array from SOLR lookup.
 */
function aicappSaveNode($object, $type) {
  // Prepare for node_save().
  if ($type == AICAPP_TYPE_OBJECT) {
    // Check for nid by SOLR object_id.
    $qres = db_query("SELECT entity_id
                 FROM {field_data_field_object_id}
                 WHERE field_object_id_value = :id",
        array(':id' => $object['object_id'])
    );
    $record = $qres->fetchObject();
  }
  elseif ($type == AICAPP_TYPE_GALLERY) {
    if (!empty($object['gallery_id'])) {
      // Check for nid by SOLR gallery_id.
      $qres = db_query("SELECT entity_id
                   FROM {field_data_field_gallery_id}
                   WHERE field_gallery_id_value = :id",
          array(':id' => $object['gallery_id'])
      );
    }
    $record = $qres->fetchObject();
  }
  if (!empty($record->entity_id)) {
    // We have an existing node, so load its data.
    $node = node_load($record->entity_id);
  }
  else {
    // Create a new node.
    $node = new stdClass();
    $node->title = $object['title_t'];
    $node->type = $type;
    $node->language = LANGUAGE_NONE;
    $node->uid = 1;
    $node->promote = 0;
    $node->comment = 0;
    $node->created = time();
  }
  // Creating an artwork object node.
  if ($type == AICAPP_TYPE_OBJECT) {
    $node->field_object_id[$node->language][0]['value'] = $object['object_id'];
    $node->field_reference_num[$node->language][0]['value'] = $object['main_reference_number'];
    $node->field_gallery_location[$node->language][0]['value'] = $object['gallery_location'];

    // @TODO build a dynamic path to the image using the Image Server URL and
    // the image ID using the following format:
    // {scheme}://{server}{/prefix}/{identifier}/{region}/{size}/{rotation}/{quality}.{format}
    $filename = AICAPP_IMAGE_CROP_QUALITY . '.' . AICAPP_IMAGE_CROP_FORMAT;
    // Image server URL begins like this for both thumnail and full.
    $url = !empty($object['preferred_image_id']) ? AICAPP_IMAGE_SERVER . '/' . $object['preferred_image_id'] . '/' : NULL;

    if (!empty($object['thumbnail_full_path'])) {
      $crop_size = variable_get('aicapp_image_thumb_crop', '!112,112');
      // Build a path to the thumnail image.
      $url .= AICAPP_IMAGE_CROP_REGION . '/' . $crop_size . '/';
      $url .= AICAPP_IMAGE_CROP_ROTATION . '/' . $filename;
      $node->field_thumbnail_image[$node->language][0]['value'] = $url;
      // @TODO remove following after previous line is functioning.
      // $node->field_thumbnail_image[$node->language][0]['value'] = $object['thumbnail_full_path'];
    }
    if (!empty($object['large_image_full_path'])) {
      $crop_size = variable_get('aicapp_image_full_crop', '!800,800');
      // Build a path to the full image.
      $url .= AICAPP_IMAGE_CROP_REGION . '/' . $crop_size . '/';
      $url .= AICAPP_IMAGE_CROP_ROTATION . '/' . $filename;
      $node->field_large_image[$node->language][0]['value'] = $url;
      // @TODO remove following after previous line is functioning.
      //$node->field_large_image[$node->language][0]['value'] = $object['large_image_full_path'];
    }
    // Set node to unbpublished.
    $node->status = 0;
    // Set whether the object is in a gallery, or not.
    if ($object['in_gallery']) {
      $node->field_in_gallery[$node->language][0]['value'] = $object['in_gallery'];
    }
    else {
      $node->field_in_gallery[$node->language][0]['value'] = 0;
    }
  }
  elseif ($type == AICAPP_TYPE_GALLERY) {
    if (isset($object['title_t'])) {
      $node->title = $object['title_t'];
    }
    if (isset($object['gallery_id'])) {
      $node->field_gallery_id[$node->language][0]['value'] = $object['gallery_id'];
    }
    if (isset($object['gallery_number'])) {
      $node->field_gallery_number[$node->language][0]['value'] = $object['gallery_number'];
    }
    if (!empty($object['latitude']) && !empty($object['longitude'])) {
      $node->field_location[$node->language][0]['value'] = $object['latitude'] . ',' . $object['longitude'];
    }
    if (isset($object['floor'])) {
      $node->field_floor[$node->language][0]['value'] = $object['floor'];
      // Set the floor reference field.
      // First find the entity to reference.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'field_collection_item');
      $query->propertyCondition('field_name', 'field_floor_map');
      // Sometimes Level 0 is known as LL.
      $floors = array($object['floor']);
      if (strtolower($object['floor']) === 'll') {
        $floors[] = 0;
      }
      $query->fieldCondition('field_floor_label', 'value', $floors, 'IN');
      $query->range(0, 1);
      $result = $query->execute();
      if (!empty($result['field_collection_item'])) {
        $floor_reference = key($result['field_collection_item']);
        $node->field_floor_reference[$node->language][0]['target_id'] = $floor_reference;
      }
    }
    // Set node to published.
    $node->status = 1;
  }
  try {
    node_save($node);
    return $node->nid;
  }
  catch (Exception $e) {
    drupal_set_message(t("An error occurred, did not complete node save."), 'error');
  }
}

/**
 * implement hook_form_alter()
 * Alter the node edit form - for editing objects, to insert the interactive Google Map.  We allow them to place a pin on the map
 * to determine the location of the object. The map page is an iframe, with it's own form & javascript.  The values are captured and
 * sent back to the node edit form page.
 */
function aicapp_form_alter(&$form, &$form_state, $form_id) {
  // Exit from form altering in the following cases: The sting *_node_form is
  // not present in $form_id, the '#entity_type' property is not set in $form,
  // or the '#entity_type' property is not equal to 'node'.
  if (!strstr($form_id, '_node_form')
  || !isset($form['#entity_type']) || $form['#entity_type'] !== 'node') {
    // Exit here without altering anything.
    return;
  }
  // Alter the setup form
  module_load_include('inc', 'aicapp', 'includes/aicapp.form.alter');
  // Run the form alter routine.
  _aicapp_form_alter($form, $form_state, $form_id);
}

/**
 * Helper function to make sure title field has default values when changing
 * from no language.
 */
function aicapp_setup_afterbuild($form, &$form_state) {
  // Load the include file.
  module_load_include('inc', 'aicapp', 'includes/aicapp.form.alter');
  // Run after build process
  _aicapp_form_afterbuild($form, $form_state);
  return $form;
}

/**
 *  Implements hook_node_view().
 *
 *  We do a SOLR field lookup here to view the object with the complete data.
 *  Just attach the SOLR data to the $node object for viewing.
 */
function aicapp_node_view($node, $view_mode, $langcode) {
  if ($node->type == AICAPP_TYPE_OBJECT && $node->field_object_id) {
    $ref_num = $node->field_object_id[LANGUAGE_NONE][0]['value'];
    if (!empty($ref_num)) {
      $result = _runSolrQuery(AICAPP_ARTWORK_QUERY, 'object_id', $ref_num);

      if (!empty($result['response']['docs'])) {
        $w = 10;
        foreach ($result['response']['docs'][0] as $key => $val) {
          if ($key == 'date_range') {
            $val = implode('-', $val);
          }
          $node->content[$key] = array(
            '#markup' => aicapp_field_markup($key, $val),
            '#weight' => $w++,
          );
        }
      }
    }
  }
  if ($node->type == AICAPP_TYPE_GALLERY) {
    if (!empty($node->field_gallery_id[LANGUAGE_NONE])) {
      $gallery_id = $node->field_gallery_id[LANGUAGE_NONE][0]['safe_value'];
    }
    else {
      $gallery_id = 0;
    }
    if (!empty($gallery_id)) {
      $result = _runSolrQuery(AICAPP_GALLERY_QUERY, 'gallery_id', $gallery_id);

      if (!empty($result['response']['docs'])) {
        $w = 10;
        foreach ($result['response']['docs'][0] as $key => $val) {
          $node->content[$key] = array(
            '#markup' => aicapp_field_markup($key, $val),
            '#weight' => $w++,
          );
        }
      }
    }
  }
}

/**
 * Field markup helper function.
 */
function aicapp_field_markup($key, $value) {
  if (is_array($value)) {
    $value = implode(', ', $value);
  }

  $markup = '<div class="field solr-field field-label-inline clearfix"><div class="field-label">' . $key . ': &nbsp;';
  $markup .= '</div><div class="field-items"><div class="field-item">' . $value . '</div></div></div>';
  return $markup;
}

/**
 *  implement hook_form()
 */
function aicapp_search_form($form_state = array()) {
  $form['intro'] = array(
    '#markup' => t('<p><a href="/node/add/object"><span class="button form-submit">Add a custom object</span></a><br /><b>Add via Solr</b><br />Use the form below to search the external Art Institute database (SOLR) for an object you wish
        to add. If the object is found to already be in our system, this tool can be used to update the existing object.</p>'),
  );
  $form['search_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Search by Title'),
    '#size' => 12,
    '#default_value' => isset($form_state['values']['search_term']) ? $form_state['values']['search_term'] : '',
  );
  $form['search_ref_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Search by Reference Number'),
    '#size' => 12,
    '#default_value' => isset($form_state['values']['search_term']) ? $form_state['values']['search_term'] : '',
  );
  $form['search_object_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Search by Object ID'),
    '#description' => t('To enter multiple IDs, separate IDs with commas, i.e. 159135, 159135 - no comma at the end.<br /><br />'),
    '#size' => 12,
    '#default_value' => isset($form_state['values']['search_term']) ? $form_state['values']['search_term'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array('class' => array('button')),
  );
  return $form;
}

/**
 *  implement hook_form_validate()
 */
function aicapp_search_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['search_title'])) {
    if (strlen($form_state['values']['search_title']) < 3) {
      form_set_error('search_title', 'Please enter more than 2 characters');
    }
  }
  if (!empty($form_state['values']['search_ref_num'])) {
    if (strlen($form_state['values']['search_ref_num']) < 4) {
      form_set_error('search_ref_num', 'Please enter more than 3 characters');
    }
  }
  if (!empty($form_state['values']['search_object_id'])) {
    // regular expression to allow for one number/id value or more with commas between and not the end
    $regex = '/^\d+(?:,\d+)*$/';
    // collecting value, removing spaces
    $objectValue = preg_replace('/\s+/', '', $form_state['values']['search_object_id']);
    if (preg_match_all($regex, $objectValue, $matches, PREG_SET_ORDER, 0)) {
      // great, value is valid
    }
    else {
      form_set_error('search_object_id', 'Object ID(s) should be a numeric value. If providing more than one ID, add a comma between IDs. Make sure there is no comma at the end.');
    }
  }
}

/**
 *  implement hook_form_submit()
 */
function aicapp_search_form_submit($form, &$form_state, $start = 0, $rows = 50) {
  global $base_path;
  $field = 'title_t';
  $srchtermArray = array();
  $objectIDs;
  // determining if searching by title, ref number, or id
  if (!empty($form_state['values']['search_title'])) {
    $srchterm = $form_state['values']['search_title'] . '~';
    $field = 'title_t';
  }
  elseif (!empty($form_state['values']['search_ref_num'])) {
    $srchterm = $form_state['values']['search_ref_num'];
    $field = 'main_reference_number';
  }
  elseif (!empty($form_state['values']['search_object_id'])) {
    // collecting value, removing spaces
    $srchterm = preg_replace('/\s+/', '', $form_state['values']['search_object_id']);
    // collecting IDs for add/update all function
    $objectIDs = $srchterm;
    $field = 'object_id';
  }
  else {
    drupal_set_message('Problem running search.', 'error');
    return;
  }

  $srchtermArray = explode(",", $srchterm);
  foreach ($srchtermArray as $key => $srchterm) {
    $result = _runSolrQuery(AICAPP_ARTWORK_QUERY, $field, $srchterm, $rows, $start);

    $collect = array();
    if (!empty($result['response']['numFound'])) {
      $collect[] = '<p>' . $result['response']['numFound'] . ' objects found. Showing ' . $start . ' - ' . ($start + $rows) . ' | ';
      if ($start > 0) {
        $start = $start - $rows;
        $collect[] = '<a href="objects/search/' . ($start + $rows) . '">Prev page</a>';
      }
      if ($start < $result['response']['numFound']) {
        $collect[] = ' <a href="objects/search/' . ($start + $rows) . '">Next page</a>';
      }
      $collect[] = '</p>';
      foreach ($result['response']['docs'] as $doc) {
        $collect[] = aicapp_field_markup('object_id', $doc['object_id']);
        $collect[] = aicapp_field_markup('title', $doc['title_t']);
        $collect[] = aicapp_field_markup('main_reference_number', $doc['main_reference_number']);
        $collect[] = '<a class="button small" href="' . $base_path . 'objects/object_add/' . $doc['object_id'] . '">Add or Update Object</a>';
      }
    }
    $output = implode(' ', $collect);

    if (!empty($output)) {
      drupal_set_message($output, 'status');
    }
    else {
      drupal_set_message('You entered <em>' . $srchterm . '</em>, no matching object was found.', 'status');
      unset($srchtermArray[$key]);
    }
  }

  // display update all button only if there's more than one object
  $countArray = count($srchtermArray);
  if ($countArray > 1) {
    drupal_set_message('<a class="button updateObjects" href="' . $base_path . 'objects/object_add/' . $objectIDs . '">Add or Update All</a>');
  }
}

/**
 *  Run a SOLR query.
 *  To run this locally you must be connected through VPN to the AIC domain, and run the SSH command to create
 *  a tunnel mapping localhost:8080 to the SOLR URL.
 *
 *  Sample queries.  Get a specific record by main_reference_number
 *  $url = "http:// localhost:8080/solr/select?rows=50&start=0&fq=document_type%3Aartwork-webcoll&q=main_reference_number:1942.51&wt=json";
 *
 *  Get all records in the Artwork web collection
 *  $url = "http:// localhost:8080/solr/select?rows=50&start=0&fq=document_type%3Aartwork-webcoll&q=*%3A*&wt=json";
 */
function _runSolrQuery($query_type, $term, $value, $rows = 1, $start = 0) {
  $query = variable_get('aicapp_artwork_query');
  if ($query_type == AICAPP_GALLERY_QUERY) {
    $query = variable_get('aicapp_gallery_query');
  }
  elseif ($query_type == AICAPP_ARTWORK_QUERY) {
    // all good
  }
  else {
    drupal_set_message('Unsure what type of query to run: ' . $query_type, 'error');
    return;
  }
  if (empty($query)) {
    drupal_set_message('No queries to a collections API were set, so not all fields will be populated. Go to admin/settings/aic-api to add your settings.', 'warning');
    return;
  }
  else if (!_aicapp_check_connection($query)) {
    drupal_set_message('Solr server cannot be reached, check your network settings. Go to admin/settings/aic-api to add your settings', 'error');
    return;
  }
  $query = str_replace('{{rows}}', $rows, $query);
  $query = str_replace('{{start}}', $start, $query);
  $query = str_replace('{{term}}', $term, $query);
  $query = str_replace('{{value}}', $value, $query);
  // Executes the URL and saves the content (json) in the variable.
  $content = file_get_contents($query);
  if ($content) {
    return json_decode($content, TRUE);
  }
}

/**
 * Implements hook_cron() function
 * Set up nightly cron job.
 */
function aicapp_cron() {
  // Run the form submit functions.
  // Send in empty arrays representing the form as these are not used in the function anyway.
  // I guess I could have set these up as regular menu items with page callbacks.
  $fm = array();
  $fm2 = array();
  // At 10pm - assuming Cron is running every hour.
  if (date('G') == 22) {
    aicapp_loadgalleries_form_submit($fm, $fm2);
  }
  // At 11pm - assuming Cron is running every hour.
  if (date('G') == 23) {
    aicapp_objectGalleryStatus_submit($fm, $fm2);
  }
  // At 12pm - assuming Cron is running every hour.
  if (date('G') == 24) {
    aicapp_gendata_form_submit($fm, $fm2);
  }
  // At 1am - assuming Cron is running every hour.
  if (date('G') == 2 || !variable_get('aicapp_remote_entities_imported', 0)) {
    aicapp_process_remote_object();
    variable_set('aicapp_remote_entities_imported', 1);
  }
}

/**
 * Create a text file that triggers the Apache cron job to sync the files
 * with external system.
 */
function aicapp_file_sync_form_submit() {
  $filename = 'trigger/file_sync_trigger.txt';
  if (!file_exists($filename)) {
    $file = fopen($filename, 'w');
    if ($file) {
      drupal_set_message('The file-sync trigger was generated. The system will now sync files.', 'status');
    }
    else {
      drupal_set_message('Unable to create the file-sync trigger.', 'error');
    }
  }
  else {
    drupal_set_message('The file-sync trigger has been generated.', 'status');
  }
}

/**
 * Implements hook_node_presave().
 *
 * Warn user if attached stops on the tour don't have location values.  They
 * won't be sent to the app without them.
 */
function aicapp_node_presave($node) {
  // A general flag to indicate there are changes to be published.
  variable_set('aicapp_pending', 1);

  if ($node->type == AICAPP_TYPE_TOUR) {
    aicapp_check_for_tour_problems($node);
  }
  if ($node->type == AICAPP_TYPE_OBJECT) {
    if (isset($node->field_object_id[LANGUAGE_NONE][0]['value'])) {
      $ref_num = $node->field_object_id[LANGUAGE_NONE][0]['value'];
      if (!empty($ref_num)) {
        $result = _runSolrQuery(AICAPP_ARTWORK_QUERY, 'object_id', $ref_num);

        if (empty($result['response']['docs'][0]['large_image_full_path'])) {
          drupal_set_message('The object ' . $node->title . ' does not have a full-size image in SOLR.', 'warning');
        }
      }
    }
    // Also if an object is saved and is set to be published, but has no audio,
    // set it back to unpublished and give warning.
    if (empty($node->field_object_audio[LANGUAGE_NONE][0])) {
      $node->status = 0;
      drupal_set_message('The object ' . $node->title . ' has no audio file attached.', 'warning');
    }
  }
}

/**
 * Check for problems with the object.
 */
function aicapp_check_for_tour_problems($tour) {
  $noLocs = array();
  $unpubs = array();
  $noaudio = array();
  $noImage = array();
  $inGallery = array();
  $stops = array();

  // App V2 - field_tour_stops is a field collection of tour stop items..
  if (!empty($tour->field_tour_stops[LANGUAGE_NONE])) {
    if ($fc_items = field_get_items('node', $tour, 'field_tour_stops')) {
      foreach ($fc_items as $fc_item) {
        $item = field_collection_field_get_entity($fc_item);
        if (!empty($item->field_tour_stop_object)) {
          $stops[] = array(
            'nid' => $item->field_tour_stop_object[LANGUAGE_NONE][0]['target_id'],
          );
        }
      }
    }
  }
  // App V1 - To be deprecated. field_stops2 will no longer be used.
  if (empty($stops) && !empty($tour->field_stops2[LANGUAGE_NONE][0]['entity']->field_t_object[LANGUAGE_NONE])) {
    $stops = $tour->field_stops2[LANGUAGE_NONE][0]['entity']->field_t_object[LANGUAGE_NONE];
  }
  // Loop through stops to check for problems.
  foreach ($stops as $stop) {
    $node = node_load($stop['nid']);
    if (empty($node->field_location)) {
      $noLocs[] = array('nid' => $node->nid, 'title' => $node->title);
    }
    if (!$node->status) {
      $unpubs[] = array('nid' => $node->nid, 'title' => $node->title);
    }
    if (empty($node->field_object_audio[LANGUAGE_NONE][0])) {
      $noaudio[] = array('nid' => $node->nid, 'title' => $node->title);
    }
    if ((empty($node->field_thumbnail_image) || empty($node->field_large_image)) && empty($node->field_image)) {
      $noImage[] = array('nid' => $node->nid, 'title' => $node->title);
    }
    if ($node->field_in_gallery[LANGUAGE_NONE][0]['value'] != TRUE) {
      $inGallery[] = array('nid' => $node->nid, 'title' => $node->title);
    }
  }
  if (!empty($noLocs)) {
    $group = '<ul>';
    foreach ($noLocs as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following object(s) do not have a location field data set (lat/lon):' .
      $group . 'Location data must be set for the objects to be sent to the mobile app.', 'error');
  }
  if (!empty($unpubs)) {
    $group = '<ul>';
    foreach ($unpubs as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following object(s) are currently marked unpublished:' . $group, 'error');
  }
  if (!empty($noaudio)) {
    $group = '<ul>';
    foreach ($noaudio as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following object(s) have no default audio file:' . $group, 'error');
  }
  if (!empty($noImage)) {
    $group = '<ul>';
    foreach ($noImage as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following object(s) are missing images:' . $group, 'error');
  }
  if (!empty($inGallery)) {
    $group = '<ul>';
    foreach ($inGallery as $item) {
      $group .= '<li>' . l($item['title'], 'node/' . $item['nid'] . '/edit') . '</li>';
    }
    $group .= '</ul>';
    drupal_set_message('The following objects\' \'in gallery\' setting is set to FALSE:' . $group, 'error');
  }
}

/**
 * Cycle through every published CMS object and pull it up in SOLR.
 * Show it here if no "large_image_full_path" is found AND,
 * if no image has been added in the node.
 */
function aicapp_object_noimg() {
  // Grab object_ids and nid for every object node.
  $query = db_select('field_revision_field_object_id', 'fi')->extend('PagerDefault');
  $query->join('node', 'n', 'n.nid = fi.entity_id');
  $query->fields('fi', array('entity_id', 'field_object_id_value'))
    ->limit(10)
    ->condition('fi.bundle', AICAPP_TYPE_OBJECT)
    ->condition('n.status', 1)
    ->orderBy('field_object_id_value');
  $result = $query->execute();
  // Examine in SOLR and see if image is there.
  $rows = array();
  while ($record = $result->fetchAssoc()) {
    $json = _runSolrQuery(AICAPP_ARTWORK_QUERY, 'object_id', $record['field_object_id_value']);
    foreach ($json['response']['docs'] as $item) {
      if (empty($item['large_image_full_path'])) {
        // There is no image in SOLR,  Check Drupal.
        $node = node_load($record['entity_id']);
        if (empty($node->field_image[LANGUAGE_NONE][0]['uri'])) {
          $rows[] = l($item['object_id'] . ' - ' . substr($item['title_t'], 0, 50), 'node/' . $record['entity_id'] . '/edit') . ' -> <span class="red">[needs image]</span>';
        }
      }
      else {
        $rows[] = $item['object_id'] . ' - ' . substr($item['title_t'], 0, 50) . ' -> [good]';
      }
    }
  }

  $output = array(
    array(
      '#theme' => 'item_list',
      '#items' => $rows,
    ),
    array(
      '#theme' => 'pager',
    ),
  );
  return $output;
}

/**
 * Admin setting form callback.
 */
function aicapp_admin() {
  $form = array();
  $form['aicapp_artwork_query'] = array(
    '#type' => 'textarea',
    '#title' => t('Artwork query URL'),
    '#default_value' => variable_get('aicapp_artwork_query', ''),
    '#rows' => 4,
    '#description' => t("Use {{rows}}, {{start}}, {{term}}, and {{value}} to note where different values should be used."),
  );
  $form['aicapp_gallery_query'] = array(
    '#type' => 'textfield',
    '#title' => t('Gallery query URL'),
    '#default_value' => variable_get('aicapp_gallery_query', ''),
    '#size' => 200,
    '#maxlength' => 256,
    '#description' => t("Use {{rows}}, {{start}}, {{term}}, and {{value}} to note where different values should be used."),
  );
  $form['aicapp_gmap_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Maps API Key'),
    '#default_value' => variable_get('aicapp_gmap_key', ''),
    '#size' => 200,
    '#maxlength' => 256,
    '#description' => t("Go to https:// developers.google.com/maps/documentation/javascript/get-api-key to get an API key"),
  );
  $form['aicapp_image_server_url'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Image Server URL'),
    '#default_value' => variable_get('aicapp_image_server_url', ' https://lakeimagesweb.artic.edu/iiif2/'),
    '#description' => t('URL to the Image Server.'),
  );
  $form['aicapp_image_full_crop'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Full image crop dimensions.'),
    '#default_value' => variable_get('aicapp_image_thumb_crop', '!800,800'),
    '#description' => t('Minimum crop dimensions for the full image.'),
  );
  $form['aicapp_image_thumb_crop'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Thumbnail image crop dimensions.'),
    '#default_value' => variable_get('aicapp_image_thumb_crop', ' !112,112'),
    '#description' => t('Minimum crop dimensions for the thumnail image.'),
  );
  $form['aicapp_image_thumb_crop_aspect'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#maxlength' => 25,
    '#title' => t('Thumbnail crop aspect ratio.'),
    '#default_value' => variable_get('aicapp_image_thumb_crop_aspect', '1:1'),
    '#description' => t('The aspect ratio of the tool used to crop.'),
  );
  $form['aicapp_image_thumb_crop_lock'] = array(
    '#type' => 'checkbox',
    '#title' => t('Thumbnail crop aspect ratio can be changed?'),
    '#default_value' => (variable_get('aicapp_image_thumb_crop_lock', 1)) ? 1 : 0,
    '#description' => t('Whether or not to lock the crop dimensions to this aspect ratio.'),
  );
  $form['aicapp_image_large_crop_aspect'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#maxlength' => 25,
    '#title' => t('Full size image crop aspect ratio.'),
    '#default_value' => variable_get('aicapp_image_large_crop_aspect', '1.82:1'),
    '#description' => t('.'),
  );
  $form['aicapp_image_large_crop_lock'] = array(
    '#type' => 'checkbox',
    '#title' => t('Full size image crop aspect ratio can be changed?'),
    '#default_value' => (variable_get('aicapp_image_large_crop_lock', 0)) ? 1 : 0,
    '#description' => t('Whether or not to lock the crop dimensions to this aspect ratio.'),
  );
  // Data aggregrator API
  $form['aicapp_data_aggregator'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#title' => t('Data Aggregator API'),
    '#tree' => TRUE,
  );
  $form['aicapp_data_aggregator']['aicapp_data_api_host'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Data API HOST URL'),
    '#default_value' => variable_get('aicapp_data_api_host', 'http://aggregator-data-test.artic.edu'),
    '#description' => t('.'),
  );
  $form['aicapp_data_aggregator']['aicapp_data_endpoint_events'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Events Endpoint.'),
    '#default_value' => variable_get('aicapp_data_endpoint_events', '/api/v1/events'),
    '#description' => t('Query for an event via this endpoint.'),
  );
  $form['aicapp_data_aggregator']['aicapp_data_endpoint_exhibitions'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Exhibitions Endpoint.'),
    '#default_value' => variable_get('aicapp_data_endpoint_exhibitions', '/api/v1/exhibitions'),
    '#description' => t('Query for an exhibition via this endpoint.'),
  );
  $form['aicapp_data_aggregator']['aicapp_data_endpoint_artworks'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Artworks endpoint.'),
    '#default_value' => variable_get('aicapp_data_endpoint_artworks', '/api/v1/artworks'),
    '#description' => t('Query for an artwork via this endpoint.'),
  );
  $form['aicapp_data_aggregator']['aicapp_data_endpoint_galleries'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Galleries endpoint.'),
    '#default_value' => variable_get('aicapp_data_endpoint_galleries', '/api/v1/galleries'),
    '#description' => t('Query for a gallery via this endpoint.'),
  );
  $form['aicapp_data_aggregator']['aicapp_data_endpoint_images'] = array(
    '#type' => 'textfield',
    '#size' => 200,
    '#maxlength' => 256,
    '#title' => t('Images endpoint.'),
    '#default_value' => variable_get('aicapp_data_endpoint_images', '/api/v2/images'),
    '#description' => t('Query for a image via this endpoint.'),
  );
  // Data migration between v1 and v2.
  $form['aicapp_data'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Data migration'),
    '#tree' => TRUE,
  );
  $options = array(
    'audio' => t('Audio'),
    'object' => t('Objects'),
    'tour' => t('Tours'),
  );
  $form['aicapp_data']['migration_type'] = array(
    '#type' => 'select',
    '#title' => t('Select which Content type to migrate:'),
    '#options' => $options,
    '#default_value' => 'audio',
    '#description' => t('Choose a content type to migrate data from.'),
  );
  $form['aicapp_data']['migration_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Migrate Data'),
  );
  return system_settings_form($form);
}

/**
 * Admin setting validation callback.
 */
function aicapp_admin_validate($form, &$form_state) {
  $query = $form_state['values']['aicapp_artwork_query'];
  if (substr($query, 0, 7) !== "http://" && substr($query, 0, 8) !== "https://") {
    form_set_error('aicapp_artwork_query', t('You must enter a URL.'));
  }
  if (strpos($query, '{{term}}') === FALSE) {
    form_set_error('aicapp_artwork_query', t('You must include {{term}} somewhere in your URL.'));
  }
  $query = $form_state['values']['aicapp_gallery_query'];
  if (substr($query, 0, 7) !== "http://" && substr($query, 0, 8) !== "https://") {
    form_set_error('aicapp_gallery_query', t('You must enter a URL.'));
  }
  if (strpos($query, '{{term}}') === FALSE) {
    form_set_error('aicapp_gallery_query', t('You must include {{term}} somewhere in your URL.'));
  }
  // Check if Image Server value is a URL.
  if (!filter_var($form_state['values']['aicapp_image_server_url'], FILTER_VALIDATE_URL)) {
    form_set_error('aicapp_image_server_url', t('You must provide a valid URL for the Image Server.'));
  }
  if (strpos($form_state['values']['aicapp_image_large_crop_aspect'], ':') === FALSE) {
    $form_state['values']['aicapp_image_large_crop_aspect'] = $form_state['values']['aicapp_image_large_crop_aspect'] . ':1';
  }
  if (strpos($form_state['values']['aicapp_image_thumb_crop_aspect'], ':') === FALSE) {
    $form_state['values']['aicapp_image_thumb_crop_aspect'] = $form_state['values']['aicapp_image_thumb_crop_aspect'] . ':1';
  }
  // Save the variable as a lowercase string for use in JS.
  if ($form_state['values']['aicapp_image_thumb_crop_lock'] == FALSE) {
    // Leave as lowercase for use in JS.
    $form_state['values']['aicapp_image_thumb_crop_lock'] = false;
  }
  else {
    // Leave as lowercase for use in JS.
    $form_state['values']['aicapp_image_thumb_crop_lock'] = 'true';
  }
  // Save the variable as a lowercase string for use in JS.
  if ($form_state['values']['aicapp_image_large_crop_lock'] == FALSE) {
    // Leave as lowercase for use in JS.
    $form_state['values']['aicapp_image_large_crop_lock'] = false;
  }
  else {
    $form_state['values']['aicapp_image_large_crop_lock'] = 'true';
  }
  if ($form_state['clicked_button']['#value'] === 'Migrate Data') {
    global $language;
    $type = $form_state['values']['aicapp_data']['migration_type'];
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
         ->entityCondition('bundle', $type, '=');
    switch ($type) {
      default:
        drupal_set_message('There were no items to migrate');
      break;
      case AICAPP_TYPE_AUDIO:
        $query->propertyCondition('language', LANGUAGE_NONE, '=');
        $result = $query->execute();
        if (!empty($result['node'])) {
          $count = count($result['node']);
          if ($count < 1) {
            drupal_set_message('There were no audio items to migrate');
            break;
          }
          foreach ($result['node'] as $nid => $obj) {
            $node = node_load($nid);
            $node->language = $language->language;
            node_save($node);
          }
          drupal_set_message('All audio nodes have been set to English if no language had been set.');

        }
        break;

      case AICAPP_TYPE_OBJECT:
        // Load all objects that have no audio commentary items.
        $query->addTag('no_commentary_items');
        $result = $query->execute();
        if (!empty($result['node'])) {
          $i = 0;
          foreach ($result['node'] as $nid => $obj) {
            $changed = FALSE;
            $to_add = array();
            $node = node_load($nid);
            $found = array(
              'field_object_selector_numbers' => NULL,
              'field_object_selector_number' => NULL,
              'field_object_audio' => NULL,
            );
            // Check for field_object_selector_numbers, field_object_selector_number, and field_object_audio
            if (!empty($node->field_object_selector_numbers[LANGUAGE_NONE])) {
              $found['field_object_selector_numbers'] = $node->field_object_selector_numbers[LANGUAGE_NONE];
            }
            if (!empty($node->field_object_selector_number[LANGUAGE_NONE])) {
              $found['field_object_selector_number'] = $node->field_object_selector_number[LANGUAGE_NONE];
            }
            if (!empty($node->field_object_audio[LANGUAGE_NONE])) {
              // Uses 'nid' as value key instead of 'value'
              $found['field_object_audio'] = $node->field_object_audio[LANGUAGE_NONE];
            }
            // In terms of selector numbers, there are 3 cases.
            $count_multi = count($found['field_object_selector_numbers']);
            $count_audio = count($found['field_object_audio']);
            if ($count_multi === 1) {
              // One of each, make sure they are the same.
              if ($found['field_object_selector_number'] &&
                $found['field_object_selector_number'][0]['value'] === $found['field_object_selector_numbers'][0]['value']) {


                // Numbers match, there is 1 matching selector being used.
                $to_add[$i]['selector'][] = $found['field_object_selector_number'][0]['value'];
                if ($count_audio) {
                  foreach ($found['field_object_audio'] as $k => $v) {
                    $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
                  }
                }
                else {
                  // No audio found unset this selector to add.
                  unset($to_add[$i]['selector']);
                }
              }
              else {
                // Number will take precendence.
                $to_add[$i]['selector'][] = $found['field_object_selector_number'][0]['value'];
                $to_add[$i]['selector'][] = $found['field_object_selector_numbers'][LANGUAGE_NONE][0]['value'];
                // Multi and single do not match. Check audio count.
                if ($count_audio > 1) {
                  foreach ($found['field_object_audio'] as $k => $v) {
                    $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
                  }

                }
                elseif ($count_audio === 1) {
                  $to_add[$i]['audio'][] = $found['field_object_audio'][0]['nid'];
                  unset($to_add[$i]['selector'][1]);
                }
                else {
                  // No audio found unset this selector to add.
                  unset($to_add[$i]['selector']);
                }
              }
            }
            elseif ($count_multi > 1) {
              foreach ($found['field_object_selector_numbers'][LANGUAGE_NONE] as $k => $v) {
                $to_add[$i]['selector'][] = $found['field_object_selector_numbers'][$k]['value'];
              }
              if ($count_audio) {
                foreach ($found['field_object_audio'][LANGUAGE_NONE] as $k => $v) {
                  $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
                }
              }
              else {
                unset($to_add[$i]['selector']);
              }
            }
            elseif ($found['field_object_selector_number']) {
              // No multiple count but found one selector
              $to_add[$i]['selector'][] = $found['field_object_selector_number'][0]['value'];
              if ($count_audio) {
                foreach ($found['field_object_audio'] as $k => $v) {
                  $to_add[$i]['audio'][] = $found['field_object_audio'][$k]['nid'];
                }
              }
            }
            else {
              $i++;
              continue;
            }
            // Check if there are currently audio commentary items.
            if (!empty($node->field_audio_commentary[LANGUAGE_NONE])) {
              foreach ($node->field_audio_commentary[LANGUAGE_NONE] as $key => $value) {
                $field_collection_item_values[] = $value['value'];
              }
            }
            // Add the new audio commentary
            if (!empty($to_add[$i]) && !empty($to_add[$i]['audio']) && empty($field_collection_item_values)) {
              foreach ($to_add[$i]['audio'] as $k => $audio_id) {
                // Setup the values in the structure expected by the field_collection entity.
                $item_values = array(
                  'field_name' => 'field_audio_commentary',
                  'field_audio_commentary_audio' => array(
                    LANGUAGE_NONE => array(array(
                      'target_id' => $audio_id
                    )),
                  ),
                );
                if (isset($to_add[$i]['selector'][$k])) {
                  $item_values['field_object_selector_number'] = array(
                    LANGUAGE_NONE => array(array(
                      'value' => $to_add[$i]['selector'][$k]
                    ))
                  );
                }
                $fc_item = entity_create('field_collection_item', $item_values);
                $fc_item->setHostEntity('node', $node);
                $fc_item->save();
              }
              $changed = TRUE;
            }
            if ($changed === TRUE) {
              node_save($node);
            }
            $i++;
          }
          drupal_set_message('All object nodes have been set to English if no language had been set.');

        }
        break;

      case AICAPP_TYPE_TOUR:
        // Load all tous.
        $query->addTag('no_tour_stop');
        // Five at a time.
        $query->range(0, 5);
        $result = $query->execute();
        if (!empty($result['node'])) {
          $i = 0;
          foreach ($result['node'] as $nid => $obj) {
            $changed = FALSE;
            $to_add = array();
            $node = node_load($nid);
            $found = array(
              'field_t_object' => NULL,
              'field_t_audio' => NULL,
              'field_t_audio_bumper' => NULL,
            );

            // Check for field_object_selector_numbers, field_object_selector_number, and field_object_audio
            if (!empty($node->field_stops2[LANGUAGE_NONE])) {
              $ids = array();
              foreach ($node->field_stops2[LANGUAGE_NONE] as $key => $value) {
                $ids[] = $value['value'];
              }
              $stops = field_collection_item_load_multiple($ids);
              $stops = current($stops);
              foreach ($found as $field => $n) {
                if (!isset($stops->{$field}[LANGUAGE_NONE])) {
                  continue;
                }
                foreach ($stops->{$field}[LANGUAGE_NONE] as $id => $stop) {
                  $found[$field][] = $stop['nid'];
                }
              }
            }
            // In terms of selector numbers, there are 3 cases.
            $count_object = count($found['field_t_object']);
            $count_audio = count($found['field_t_audio']);
            $count_bumper = count($found['field_t_audio_bumper']);
            if ($count_object > $count_audio) {

            }
            elseif ($count_object < $count_audio) {

            }
            // Check if there are currently audio commentary items.
            if (!empty($node->field_tour_stops[LANGUAGE_NONE])) {
              foreach ($node->field_tour_stops[LANGUAGE_NONE] as $key => $value) {
                $field_collection_item_values[] = $value['value'];
              }
            }
            // Add the new audio commentary
            if (!empty($found['field_t_audio']) && empty($field_collection_item_values)) {
              foreach ($found['field_t_audio'] as $k => $audio_id) {
                // Setup the values in the structure expected by the field_collection entity.
                $item_values = array(
                  'field_name' => 'field_tour_stops',
                  'field_t_object' => array(
                    LANGUAGE_NONE => array(array(
                      'target_id' => $audio_id,
                    ))
                  )
                );
                if (isset($found['field_t_audio'][$k])) {
                  $item_values['field_t_audio'] = array(
                    LANGUAGE_NONE => array(array(
                      'target_id' => $found['field_t_audio'][$k],
                    ))
                  );
                }
                if (isset($found['field_t_audio_bumper'][$k])) {
                  $item_values['field_t_audio_bumper'] = array(
                    LANGUAGE_NONE => array(array(
                      'target_id' => $found['field_t_audio_bumper'][$k],
                    ))
                  );
                }
                $fc_item = entity_create('field_collection_item', $item_values);
                $fc_item->setHostEntity('node', $node);
                $fc_item->save();
              }
              $changed = TRUE;
            }

            // Set language to en.
            if ($node->language === LANGUAGE_NONE) {
              $node->language = $language->language;
              $changed = TRUE;
            }
            if ($changed === TRUE) {
              node_save($node);
            }
            $i++;
          }
          drupal_set_message(t('All tour nodes have been set to English if no language had been set, and tour stops have been udpated.'));

        }
        break;
    }
  }
}

/**
 * Implements hook_query_TAG_alter().This is used for data migration queries.
 */
function aicapp_query_no_commentary_items_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_audio_commentary', 'o', 'node.nid = o.entity_id');
  $query->isNull('o.field_audio_commentary_value');
}

/**
 * Implements hook_query_TAG_alter(). This is used for data migration queries.
 */
function aicapp_query_no_tour_stops_items_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_tour_stops', 'o', 'node.nid = o.entity_id');
  $query->isNull('o.field_tour_stops_value');
}

/**
 * Check a connection beofre making a query.
 */
function _aicapp_check_connection($url) {
  // Filter out invalid URLs.
  if (!filter_var($url, FILTER_VALIDATE_URL)) {
    return FALSE;
  }
  // Initialize CURL to test a connection to a URL.
  $curl_init = curl_init($url);
  curl_setopt($curl_init, CURLOPT_CONNECTTIMEOUT, 5);
  curl_setopt($curl_init, CURLOPT_HEADER, TRUE);
  curl_setopt($curl_init, CURLOPT_NOBODY, TRUE);
  curl_setopt($curl_init, CURLOPT_RETURNTRANSFER, TRUE);
  $response = curl_exec($curl_init);
  curl_close($curl_init);
  // Return TRUE if a response is valid.
  if ($response) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Make an entity field query and return results.
 */
function aicapp_get_featured($type = 'node', $bundles = array()) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $type);
  if (count($bundles)) {
    $query->entityCondition('bundle', $bundles, 'IN');
  }
  $result = $query->execute();
  return !empty($result[$type]) ? $result[$type] : array();
}

/**
 * Save remote objects to nodes.
 */
function aicapp_process_remote_object() {
  $limit = 'limit=';
  $limit_count = 50;
  $max_page = 10;
  $page = 'page=';
  // Define what we're going to import.
  $objects = array(
    AICAPP_TYPE_EVENT => array(
      'endpoint' => AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_EVENT,
      'remote' => array(),
    ),
    AICAPP_TYPE_EXHIBITION => array(
      'endpoint' => AICAPP_DATA_API_HOST . AICAPP_DATA_API_ENDPOINT_EXHIBITION,
      'remote' => array(),
    ),
  );
  $remote_objects = array();
  try {
    // Fetch all recent remote objects.
    foreach ($objects as $type => &$remote) {
      $page_start = 2;
      $url = $remote['endpoint'];
      // This will require first discovering which events and exhibitions are
      // active by using paging in the API.
      $discover = file_get_contents($url . '?' . $limit . $limit_count);
      // If connection not available.
      if (!$discover) {
        return;
      }
      $json = json_decode($discover, TRUE);
      if (isset($json['data'])) {
        foreach ($json['data'] as $remote_record) {
          if ($type === AICAPP_TYPE_EXHIBITION) {
            // Skip any that are not active
            if (!$remote_record['is_active']) {
              continue;
            }
          }
          else if ($type === AICAPP_TYPE_EVENT) {
            // Skip any that have end dates in the past.
            if (strtotime($remote_record['end_at']) > strtotime('-7 day') ) {
              continue;
            }
          }
          $remote['remote'][$remote_record['id']] = $remote_record;
        }
      }
      // Now loop though up to $max_page adding records that are active and
      // having an end date in the past.
      if (isset($json['pagination']) && isset($json['pagination']['next_url'])) {
        $loop_url = $json['pagination']['next_url'];
        while ($page_start <= $max_page) {
          $loop_json = file_get_contents($loop_url);
          if ($loop_json) {
            $decoded_loop = json_decode($loop_json, TRUE);
            if (isset($decoded_loop['data'])) {
              foreach ($decoded_loop['data'] as $remote_record) {
                if ($type === AICAPP_TYPE_EXHIBITION) {
                  // Skip any that are not active
                  if (!$remote_record['is_active']) {
                    continue;
                  }
                }
                else if ($type === AICAPP_TYPE_EVENT) {
                  // Skip any that have end dates in the past.
                  if (strtotime($remote_record['end_at']) > strtotime('-7 day') ) {
                    continue;
                  }
                }
                $remote['remote'][$remote_record['id']] = $remote_record;
              }
            }
            $loop_url = isset($decoded_loop['pagination']) ? $decoded_loop['pagination']['next_url'] : NULL;
          }
          $page_start++;
        }
      }

      // Fetch all locally saved objects using the key of remote ids.
      $remote['local'] = array();
      $remote['to_import'] = array_keys($remote['remote']);

      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $type, '=')
        ->fieldCondition('field_imported_object_id', 'value', $remote['to_import'], 'IN');
      $result = $query->execute();
      if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        $remote['local'] = entity_load('node', $nids);
      }
      // Loop through cached objects and save updated values from API.
      foreach ($remote['local'] as $local_node) {
        // Load an entity.
        $ewrapper = entity_metadata_wrapper('node', $local_node);
        $remote_id = $ewrapper->field_imported_object_id->value();

        if (empty($remote['remote'][$remote_id])) {
          continue;
        }
        // Update node fields with values from remote enities, but only if remote
        // updated date is more recent than local date.
        // Update all local objects that have local update date previous to last
        // updated remote object dates.
        $to_import = $remote['remote'][$remote_id];
        // Ttile
        $ewrapper->title->set($to_import['title']);
        // Object ID
        $ewrapper->field_imported_object_id->set($to_import['id']);
        // Object JSON
        $ewrapper->field_imported_object->set(json_encode($to_import));

        if ($type === AICAPP_TYPE_EXHIBITION) {
          // Description
          $ewrapper->field_exhibit_description->set($to_import['description']);
          // Is exhibition active
          $current_state = $ewrapper->field_exhibit_is_active->value();
          $ewrapper->field_exhibit_is_active->set($to_import['is_active']);
          if ($current_state && !$to_import['is_active']) {
            // Unpubish and demote this node.
            $ewrapper->status->set(0);
            $ewrapper->promote->set(0);
          }
          // Exhibition dates.
          $ewrapper->field_exhibit_dates->set($to_import['dates']);
        }
        elseif ($type === AICAPP_TYPE_EVENT) {
          $start = new DateTime($to_import['start_at']);
          $end = new DateTime($to_import['end_at']);
          // Event start and end dates
          $ewrapper->field_event_dates->set(array(
            'value' => $start->format('Y-m-d H:i:s'),
            'value2' => $end->format('Y-m-d H:i:s'),
          ));
          if (strtotime($to_import['end_at']) < strtotime('now')) {
            // Unpubish and demote this node.
            $ewrapper->status->set(0);
            $ewrapper->promote->set(0);
          }
        }
        // Now just save the wrapper and the entity
        $ewrapper->save();
        // Get the key value for this remote id.
        $remote_key = array_search($remote_id, $remote['to_import']);
        // Unset this item from the import stack.
        if (!empty($remote['to_import'][$remote_key])) {
          unset($remote['to_import'][$remote_key]);
        }
      }
      // Add any new remote objects that do not exist locally.
      foreach ($remote['to_import'] as $remote_id) {
        if (empty($remote['remote'][$remote_id])) {
          continue;
        }
        // Update node fields with values from remote enities, but only if
        // remote updated date is more recent than local date.
        $to_import = $remote['remote'][$remote_id];
        // Creating a new object $node and setting its 'type' and uid property.
        $values = array(
          'type' => $type,
          'uid' => 1,
          'status' => 1,
          'promote' => 0,
        );
        $entity = entity_create('node', $values);

        // The entity is now created, but we have not yet simplified use of it.
        // Now create an entity_metadata_wrapper around the new node entity
        // to make getting and setting values easier.
        $ewrapper = entity_metadata_wrapper('node', $entity);
        // Ttile.
        $ewrapper->title->set($to_import['title']);
        // Object ID.
        $ewrapper->field_imported_object_id->set($to_import['id']);
        // Object JSON.
        $ewrapper->field_imported_object->set(json_encode($to_import));

        if ($type === AICAPP_TYPE_EXHIBITION) {
          // Description.
          $ewrapper->field_exhibit_description->set($to_import['description']);
          // Is exhibition active.
          $ewrapper->field_exhibit_is_active->set($to_import['is_active']);
          // Exhibition dates..
          $ewrapper->field_exhibit_dates->set($to_import['dates']);
        }
        elseif ($type === AICAPP_TYPE_EVENT) {
          $start = new DateTime($to_import['start_at']);
          $end = new DateTime($to_import['end_at']);
          // Event start and end dates.
          $ewrapper->field_event_dates->set(array(
            'value' => $start->format('Y-m-d H:i:s'),
            'value2' => $end->format('Y-m-d H:i:s'),
          ));
          // Description.
          $ewrapper->field_event_description->set($to_import['description']);
          // Short Description.
          $ewrapper->field_event_short_description->set($to_import['short_description']);
        }
        // Now just save the wrapper and the entity.
        $ewrapper->save();
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message(t("An error occurred when importing events: " . $e), 'error');
  }
}

/**
 * Ajax callback for the updated term reference field.
 */
function aicapp_object_limit_js($form, $form_state) {
  // Get the delta of the parent field collection item that triggered the ajax.
  $parent_delta = $form_state['triggering_element']['#parents'][2];
  // Use the triggering elments parents to form a path to the element to replace.
  $element_path = array_slice($form_state['triggering_element']['#parents'], 0, 3);
  // Add the field name we're replacing.
  $type = !empty($form['type']['#value']) ? $form['type']['#value'] : NULL;
  if ($type === AICAPP_TYPE_TOUR) {
    $element_path[] = 'field_tour_stop_audio_commentary';
  }
  elseif ($type === AICAPP_TYPE_OBJECT) {
    $element_path[] = 'field_audio_commentary_audio';
  }
  $form_return_element = drupal_array_get_nested_value($form, $element_path);
  // Add any messages.
  if ($messages = theme('status_messages')) {
    $form_return_element['messages'] = array(
      '#markup' => '<div class="views-messages">' . $messages . '</div>',
    );
  }
  return $form_return_element;
}
